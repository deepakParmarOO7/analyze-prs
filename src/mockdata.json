// [
//     {
//         "file": "src/Components/TemplateCard/TemplateCard.tsx",
//         "line": 76,
//         "comment": "Are we not using common components from - https://github.com/CatalystOne/library-platform-react-packages\r\nor are we planning to move it later?",
//         "commitId": "819cc1f3cdf971eeae6357cf24468475c30a4477",
//         "codeSnippet": "@@ -0,0 +1,76 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import dayjs from 'dayjs'\n+import 'dayjs/locale/en'\n+import 'dayjs/locale/nb'\n+\n+import MoreVertIcon from '@mui/icons-material/MoreVert'\n+import { Divider, IconButton, Typography } from '@mui/material'\n+\n+import { Template } from '../../services/template'\n+import FlexBox from '../FlexBox'\n+import WorkflowLabel from './WorkflowLabel'\n+import { InnerCircle, OuterCircle, Wrapper } from './styled'\n+\n+type Props = Template & {\n+    onClick: () => void\n+    onOpen: (event: React.MouseEvent<HTMLElement>) => void\n+}\n+\n+const statusMap = {\n+    DRAFT: 'draft',\n+    PUBLISHED: 'active',\n+    INACTIVE: 'inactive'\n+}\n+\n+const TemplateCard: FC<Props> = ({\n+    lastUpdatedAt,\n+    status,\n+    workflowType,\n+    templateName,\n+    onClick,\n+    onOpen\n+}) => {\n+    const { t } = useTranslation('template-overview')\n+\n+    return (\n+        <Wrapper onClick={onClick}>\n+            <InnerCircle />\n+            <OuterCircle />\n+\n+            <FlexBox flexDirection='column' flexGrow={1} maxWidth='80%'>\n+                <Typography fontWeight='bold'>{templateName}</Typography>\n+            </FlexBox>\n+\n+            <FlexBox flexShrink={1} flexDirection='column'>\n+                <WorkflowLabel workflowType={workflowType} />\n+\n+                <Divider sx={{ marginTop: 1 }} />\n+                <FlexBox\n+                    justifyContent='space-between'\n+                    flexShrink={1}\n+                    alignItems='center'\n+                >\n+                    <Typography variant='caption'>\n+                        {t('updated', {\n+                            updated: dayjs(lastUpdatedAt).format('LL')\n+                        })}\n+                    </Typography>\n+\n+                    <FlexBox alignItems='center'>\n+                        <Typography>\n+                            {t(`#status-${statusMap[status]}`)}\n+                        </Typography>\n+\n+                        <IconButton onClick={onOpen}>\n+                            <MoreVertIcon />\n+                        </IconButton>\n+                    </FlexBox>\n+                </FlexBox>\n+            </FlexBox>\n+        </Wrapper>\n+    )\n+}\n+\n+export default TemplateCard",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/1#discussion_r1587551067",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/Components/TemplateCard/TemplateCard.tsx",
//         "line": 76,
//         "comment": "I see Box being used :)",
//         "commitId": "819cc1f3cdf971eeae6357cf24468475c30a4477",
//         "codeSnippet": "@@ -0,0 +1,76 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import dayjs from 'dayjs'\n+import 'dayjs/locale/en'\n+import 'dayjs/locale/nb'\n+\n+import MoreVertIcon from '@mui/icons-material/MoreVert'\n+import { Divider, IconButton, Typography } from '@mui/material'\n+\n+import { Template } from '../../services/template'\n+import FlexBox from '../FlexBox'\n+import WorkflowLabel from './WorkflowLabel'\n+import { InnerCircle, OuterCircle, Wrapper } from './styled'\n+\n+type Props = Template & {\n+    onClick: () => void\n+    onOpen: (event: React.MouseEvent<HTMLElement>) => void\n+}\n+\n+const statusMap = {\n+    DRAFT: 'draft',\n+    PUBLISHED: 'active',\n+    INACTIVE: 'inactive'\n+}\n+\n+const TemplateCard: FC<Props> = ({\n+    lastUpdatedAt,\n+    status,\n+    workflowType,\n+    templateName,\n+    onClick,\n+    onOpen\n+}) => {\n+    const { t } = useTranslation('template-overview')\n+\n+    return (\n+        <Wrapper onClick={onClick}>\n+            <InnerCircle />\n+            <OuterCircle />\n+\n+            <FlexBox flexDirection='column' flexGrow={1} maxWidth='80%'>\n+                <Typography fontWeight='bold'>{templateName}</Typography>\n+            </FlexBox>\n+\n+            <FlexBox flexShrink={1} flexDirection='column'>\n+                <WorkflowLabel workflowType={workflowType} />\n+\n+                <Divider sx={{ marginTop: 1 }} />\n+                <FlexBox\n+                    justifyContent='space-between'\n+                    flexShrink={1}\n+                    alignItems='center'\n+                >\n+                    <Typography variant='caption'>\n+                        {t('updated', {\n+                            updated: dayjs(lastUpdatedAt).format('LL')\n+                        })}\n+                    </Typography>\n+\n+                    <FlexBox alignItems='center'>\n+                        <Typography>\n+                            {t(`#status-${statusMap[status]}`)}\n+                        </Typography>\n+\n+                        <IconButton onClick={onOpen}>\n+                            <MoreVertIcon />\n+                        </IconButton>\n+                    </FlexBox>\n+                </FlexBox>\n+            </FlexBox>\n+        </Wrapper>\n+    )\n+}\n+\n+export default TemplateCard",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/1#discussion_r1587579828",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": null,
//         "comment": "Prefer destruct in function head and use default export for the component we expect to default be exported from this folder.",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,41 @@\n+import React, { FC } from 'react'\n+\n+import { Box } from '@mui/material'\n+\n+interface DateFormatterProps {\n+    userDateFormat: string\n+    currentDate: string\n+    warning: boolean\n+}\n+\n+/**\n+ * Converts date to logged in user's date format.\n+ *\n+ * @param props DateFormatterProps\n+ * @returns date in user's date format as string.\n+ */\n+export const DateFormatter: FC<DateFormatterProps> = (props) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1607813766",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": null,
//         "comment": "Would be great with some util methods for this so we don't mix level of high/low-lvl code. if (isDateMonthFirst(format)) or something like that ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,41 @@\n+import React, { FC } from 'react'\n+\n+import { Box } from '@mui/material'\n+\n+interface DateFormatterProps {\n+    userDateFormat: string\n+    currentDate: string\n+    warning: boolean\n+}\n+\n+/**\n+ * Converts date to logged in user's date format.\n+ *\n+ * @param props DateFormatterProps\n+ * @returns date in user's date format as string.\n+ */\n+export const DateFormatter: FC<DateFormatterProps> = (props) => {\n+    const warning = props.warning ? 'warning' : ''\n+    const convertDateInUserFormat = (): string => {\n+        const pad = (num: number) => (num < 10 ? `0${num}` : num)\n+        const date = new Date(props.currentDate)\n+        const day = date.getDate()\n+        const month = date.getMonth() + 1\n+        const year = date.getFullYear()\n+        const format = props.userDateFormat\n+\n+        if (format === 'MM/dd/yyyy') {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1607815847",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": null,
//         "comment": "There is a function for this actually. You can just do\r\n\r\nconst pad = (n: number) => String(n).padLeft(2, 0)",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,41 @@\n+import React, { FC } from 'react'\n+\n+import { Box } from '@mui/material'\n+\n+interface DateFormatterProps {\n+    userDateFormat: string\n+    currentDate: string\n+    warning: boolean\n+}\n+\n+/**\n+ * Converts date to logged in user's date format.\n+ *\n+ * @param props DateFormatterProps\n+ * @returns date in user's date format as string.\n+ */\n+export const DateFormatter: FC<DateFormatterProps> = (props) => {\n+    const warning = props.warning ? 'warning' : ''\n+    const convertDateInUserFormat = (): string => {\n+        const pad = (num: number) => (num < 10 ? `0${num}` : num)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1607818925",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/OneToOneOverview.tsx",
//         "line": 1,
//         "comment": "Remove this I guess?",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,5 @@\n+const OneToOneOverview = () => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1607819993",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/overview.tsx",
//         "line": 29,
//         "comment": "Whats going on here? :D  Todo?",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,34 @@\n+import React, { useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Layout } from '@catalystone/react-core-ui'\n+import { Tab } from '@catalystone/react-core-ui/dist/@catalystone/components/Layout/TabsLayout'\n+\n+import OneToOneOverview from './onetoone-overview/onetooneOverview'\n+import TodoOverview from './todo-overview/TodoOverview'\n+\n+const Overview: React.FC = () => {\n+    const { t } = useTranslation('Overview')\n+    const [selected, setSelected] = useState(0)\n+    const tabs: Tab[] = useMemo(\n+        () => [{ name: t('One to ones') }, { name: t('To-dos') }],\n+        []\n+    )\n+\n+    return (\n+        <Layout\n+            title={t('One to One')}\n+            layoutProps={{\n+                type: 'tabs',\n+                activeTab: selected,\n+                onClickTab: setSelected,\n+                tabs\n+            }}\n+        >\n+            {selected === 0 && <OneToOneOverview />}\n+            {selected === 1 && <TodoOverview />}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1607820670",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/overview.tsx",
//         "line": null,
//         "comment": "Use snake format. The file is json we don't want spaces ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,34 @@\n+import React, { useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Layout } from '@catalystone/react-core-ui'\n+import { Tab } from '@catalystone/react-core-ui/dist/@catalystone/components/Layout/TabsLayout'\n+\n+import OneToOneOverview from './onetoone-overview/onetooneOverview'\n+import TodoOverview from './todo-overview/TodoOverview'\n+\n+const Overview: React.FC = () => {\n+    const { t } = useTranslation('Overview')\n+    const [selected, setSelected] = useState(0)\n+    const tabs: Tab[] = useMemo(\n+        () => [{ name: t('One to ones') }, { name: t('To-dos') }],\n+        []\n+    )\n+\n+    return (\n+        <Layout\n+            title={t('One to One')}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1607821280",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/todo-overview/TodoOverview.tsx",
//         "line": 33,
//         "comment": "Any particular reason you are not using the Login screen I added? :) ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,163 @@\n+import { FC, useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+\n+import { Box } from '@mui/material'\n+\n+import {\n+    TodoOverviewData,\n+    TodoOverviewResponse\n+} from '../../../types/todo.overview.response'\n+import { Field, UserProfileField } from '../../../types/user.profile.field'\n+import {\n+    FIELD_NAME,\n+    FIELD_PHOTO,\n+    FIELD_TITLE\n+} from '../../../types/user.profile.fields'\n+import { prepareEmployeeDataUrl } from '../../../utils/monolith/EmployeeData'\n+import TodoHeader from '../todo-overview/todo-header/TodoHeader'\n+\n+interface TodoOverviewProps {}\n+\n+const TodoOverview: FC<TodoOverviewProps> = () => {\n+    useEffect(() => {\n+        fetchTodoOverviewData()\n+    }, [])\n+\n+    /*\n+     Replace the two lines below with the following lines.\n+     - const loggedInUser = __state.getSnapshot().user.uuid;\n+     - const loggedInUserDateFormat = __state.getSnapshot().user.dateFormatString;\n+      as __state is a global variable and is not available locally.\n+     */\n+    const loggedInUser = 'fd3966ba-0e24-4285-8521-41d427fcc398'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1607822765",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/todo-overview/TodoOverview.tsx",
//         "line": null,
//         "comment": "Please do not use mutating propagating patterns. Try writing functions as pure functions ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,163 @@\n+import { FC, useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+\n+import { Box } from '@mui/material'\n+\n+import {\n+    TodoOverviewData,\n+    TodoOverviewResponse\n+} from '../../../types/todo.overview.response'\n+import { Field, UserProfileField } from '../../../types/user.profile.field'\n+import {\n+    FIELD_NAME,\n+    FIELD_PHOTO,\n+    FIELD_TITLE\n+} from '../../../types/user.profile.fields'\n+import { prepareEmployeeDataUrl } from '../../../utils/monolith/EmployeeData'\n+import TodoHeader from '../todo-overview/todo-header/TodoHeader'\n+\n+interface TodoOverviewProps {}\n+\n+const TodoOverview: FC<TodoOverviewProps> = () => {\n+    useEffect(() => {\n+        fetchTodoOverviewData()\n+    }, [])\n+\n+    /*\n+     Replace the two lines below with the following lines.\n+     - const loggedInUser = __state.getSnapshot().user.uuid;\n+     - const loggedInUserDateFormat = __state.getSnapshot().user.dateFormatString;\n+      as __state is a global variable and is not available locally.\n+     */\n+    const loggedInUser = 'fd3966ba-0e24-4285-8521-41d427fcc398'\n+\n+    const loggedInUserDateFormat = 'dd/MM/yyyy'\n+\n+    const [todosResponse, setTodosResponse] = useState<TodoOverviewData[]>()\n+\n+    const [todosFetched, setTodosFetched] = useState<boolean>()\n+\n+    const fetchTodoOverviewData = async () => {\n+        try {\n+            const todoOverview = await axios.get(\n+                'https://api.devtest.catalystone.dev/onetooneservice/v2/todos'\n+            )\n+            updateTodoResponseData(todoOverview.data)\n+        } catch (error) {\n+            console.error(error)\n+        }\n+    }\n+\n+    const updateTodoResponseData = async (\n+        todoResponse: TodoOverviewResponse\n+    ) => {\n+        const tenant = 'https://onetooneroutinedev1.devtest.catalystone.dev'\n+        // participant ids for fetching user profile data.\n+        const participants = [\n+            ...new Set(\n+                todoResponse.todoOverviews.flatMap((todo) =>\n+                    todo.todoOverviewDetails.flatMap(\n+                        (detail) => detail.participants\n+                    )\n+                )\n+            )\n+        ]\n+        const fieldIds = [FIELD_NAME, FIELD_TITLE, FIELD_PHOTO]\n+        const url = prepareEmployeeDataUrl(participants, fieldIds, tenant)\n+\n+        try {\n+            const userProfile = await axios.get(url)\n+\n+            const userProfileFields: UserProfileField[] = userProfile.data\n+            const updatedTodos = todoResponse.todoOverviews.map(\n+                (todo: TodoOverviewData) => {\n+                    const owner = userProfileFields.find(\n+                        (user: UserProfileField) =>\n+                            user.employeeGUID === todo.ownerId\n+                    )\n+                    if (owner) {\n+                        const ownerNameField = owner.fields.find(\n+                            (field: Field) => field.id === FIELD_NAME\n+                        )\n+                        const ownerTitleField = owner.fields.find(\n+                            (field: Field) => field.id === FIELD_TITLE\n+                        )\n+                        const ownerAvatarField = owner.fields.find(\n+                            (field: Field) => field.id === FIELD_PHOTO\n+                        )\n+                        todo = getTodoWithOtherParticipantName(\n+                            todo,\n+                            userProfileFields\n+                        )\n+\n+                        let ownerName = ownerNameField\n+                            ? ownerNameField.data[0]\n+                            : ''\n+                        const ownerNameInitials = ownerName\n+                            .split(' ')\n+                            .map((name: string) => name[0])\n+                            .join('')\n+                        if (loggedInUser === todo.ownerId) {\n+                            ownerName = 'Myself'\n+                        }\n+                        const ownerAvatar = ownerAvatarField\n+                            ? ownerAvatarField.data[0]\n+                            : ''\n+                        const ownerTitle = ownerTitleField\n+                            ? ownerTitleField.data[0]\n+                            : ''\n+                        return {\n+                            ...todo,\n+                            ownerName,\n+                            ownerNameInitials,\n+                            ownerAvatar,\n+                            ownerTitle\n+                        }\n+                    }\n+                    return todo\n+                }\n+            )\n+\n+            setTodosResponse(updatedTodos)\n+            setTodosFetched(true)\n+        } catch (error) {\n+            console.error(error)\n+        }\n+    }\n+\n+    const getTodoWithOtherParticipantName = (\n+        todo: TodoOverviewData,\n+        userProfileFields: UserProfileField[]\n+    ): TodoOverviewData => {\n+        todo.todoOverviewDetails.forEach((todoDetail) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1607826613",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/todo-overview/TodoOverview.tsx",
//         "line": null,
//         "comment": "Also all functions that only use it's own closure can be moved outside the component to a utils.ts file ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,163 @@\n+import { FC, useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+\n+import { Box } from '@mui/material'\n+\n+import {\n+    TodoOverviewData,\n+    TodoOverviewResponse\n+} from '../../../types/todo.overview.response'\n+import { Field, UserProfileField } from '../../../types/user.profile.field'\n+import {\n+    FIELD_NAME,\n+    FIELD_PHOTO,\n+    FIELD_TITLE\n+} from '../../../types/user.profile.fields'\n+import { prepareEmployeeDataUrl } from '../../../utils/monolith/EmployeeData'\n+import TodoHeader from '../todo-overview/todo-header/TodoHeader'\n+\n+interface TodoOverviewProps {}\n+\n+const TodoOverview: FC<TodoOverviewProps> = () => {\n+    useEffect(() => {\n+        fetchTodoOverviewData()\n+    }, [])\n+\n+    /*\n+     Replace the two lines below with the following lines.\n+     - const loggedInUser = __state.getSnapshot().user.uuid;\n+     - const loggedInUserDateFormat = __state.getSnapshot().user.dateFormatString;\n+      as __state is a global variable and is not available locally.\n+     */\n+    const loggedInUser = 'fd3966ba-0e24-4285-8521-41d427fcc398'\n+\n+    const loggedInUserDateFormat = 'dd/MM/yyyy'\n+\n+    const [todosResponse, setTodosResponse] = useState<TodoOverviewData[]>()\n+\n+    const [todosFetched, setTodosFetched] = useState<boolean>()\n+\n+    const fetchTodoOverviewData = async () => {\n+        try {\n+            const todoOverview = await axios.get(\n+                'https://api.devtest.catalystone.dev/onetooneservice/v2/todos'\n+            )\n+            updateTodoResponseData(todoOverview.data)\n+        } catch (error) {\n+            console.error(error)\n+        }\n+    }\n+\n+    const updateTodoResponseData = async (\n+        todoResponse: TodoOverviewResponse\n+    ) => {\n+        const tenant = 'https://onetooneroutinedev1.devtest.catalystone.dev'\n+        // participant ids for fetching user profile data.\n+        const participants = [\n+            ...new Set(\n+                todoResponse.todoOverviews.flatMap((todo) =>\n+                    todo.todoOverviewDetails.flatMap(\n+                        (detail) => detail.participants\n+                    )\n+                )\n+            )\n+        ]\n+        const fieldIds = [FIELD_NAME, FIELD_TITLE, FIELD_PHOTO]\n+        const url = prepareEmployeeDataUrl(participants, fieldIds, tenant)\n+\n+        try {\n+            const userProfile = await axios.get(url)\n+\n+            const userProfileFields: UserProfileField[] = userProfile.data\n+            const updatedTodos = todoResponse.todoOverviews.map(\n+                (todo: TodoOverviewData) => {\n+                    const owner = userProfileFields.find(\n+                        (user: UserProfileField) =>\n+                            user.employeeGUID === todo.ownerId\n+                    )\n+                    if (owner) {\n+                        const ownerNameField = owner.fields.find(\n+                            (field: Field) => field.id === FIELD_NAME\n+                        )\n+                        const ownerTitleField = owner.fields.find(\n+                            (field: Field) => field.id === FIELD_TITLE\n+                        )\n+                        const ownerAvatarField = owner.fields.find(\n+                            (field: Field) => field.id === FIELD_PHOTO\n+                        )\n+                        todo = getTodoWithOtherParticipantName(\n+                            todo,\n+                            userProfileFields\n+                        )\n+\n+                        let ownerName = ownerNameField\n+                            ? ownerNameField.data[0]\n+                            : ''\n+                        const ownerNameInitials = ownerName\n+                            .split(' ')\n+                            .map((name: string) => name[0])\n+                            .join('')\n+                        if (loggedInUser === todo.ownerId) {\n+                            ownerName = 'Myself'\n+                        }\n+                        const ownerAvatar = ownerAvatarField\n+                            ? ownerAvatarField.data[0]\n+                            : ''\n+                        const ownerTitle = ownerTitleField\n+                            ? ownerTitleField.data[0]\n+                            : ''\n+                        return {\n+                            ...todo,\n+                            ownerName,\n+                            ownerNameInitials,\n+                            ownerAvatar,\n+                            ownerTitle\n+                        }\n+                    }\n+                    return todo\n+                }\n+            )\n+\n+            setTodosResponse(updatedTodos)\n+            setTodosFetched(true)\n+        } catch (error) {\n+            console.error(error)\n+        }\n+    }\n+\n+    const getTodoWithOtherParticipantName = (\n+        todo: TodoOverviewData,\n+        userProfileFields: UserProfileField[]\n+    ): TodoOverviewData => {\n+        todo.todoOverviewDetails.forEach((todoDetail) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1607829295",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/todo-overview/todo-header/TodoHeader.scss",
//         "line": null,
//         "comment": "Please don't mix scss here. We us styled from material ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,54 @@\n+@mixin FontSize {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1607830990",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/todo-overview/todo-header/TodoHeader.tsx",
//         "line": null,
//         "comment": "Don;'t hard code texts ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,156 @@\n+import React, { FC } from 'react'\n+\n+import moment from 'moment'\n+\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Avatar,\n+    Box,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow\n+} from '@mui/material'\n+\n+import { DateFormatter } from '../../../../Components/DateFormatter/DateFormatter'\n+import {\n+    TodoOverviewData,\n+    TodoOverviewDetail\n+} from '../../../../types/todo.overview.response'\n+import './TodoHeader.scss'\n+\n+interface TodoHeaderProps {\n+    todos: TodoOverviewData[]\n+    todoRespSetter: any\n+    userDateFormat: string\n+}\n+\n+const TodoHeader: FC<TodoHeaderProps> = (props) => {\n+    const handleAccordionChange =\n+        (todo: TodoOverviewData) => (event: any, isExpanded: boolean) => {\n+            todo.expanded = isExpanded\n+            props.todoRespSetter([...props.todos])\n+        }\n+\n+    const getDeadline = (warning: boolean, date: string) => {\n+        return (\n+            <DateFormatter\n+                currentDate={date}\n+                userDateFormat={props.userDateFormat}\n+                warning={warning}\n+            />\n+        )\n+    }\n+\n+    return (\n+        <>\n+            {props.todos.map((todo: TodoOverviewData) => (\n+                <Box key={todo.ownerId}>\n+                    <Accordion\n+                        className='accordion'\n+                        sx={todo.expanded ? { backgroundColor: '#edf9fc' } : {}}\n+                        expanded={todo.expanded}\n+                        onChange={handleAccordionChange(todo)}\n+                    >\n+                        <AccordionSummary\n+                            className='summary'\n+                            expandIcon={\n+                                <ExpandMoreIcon className='expandIcon' />\n+                            }\n+                        >\n+                            <Box className='summaryContent'>\n+                                <Avatar\n+                                    sx={{\n+                                        border: '2px solid #d7d7d7',\n+                                        fontSize: '1rem'\n+                                    }}\n+                                    src={todo.ownerAvatar}\n+                                >\n+                                    {todo.ownerNameInitials}\n+                                </Avatar>\n+                                <Box className='ownerName'>\n+                                    {todo.ownerName}\n+                                </Box>\n+                                <Box className='ownerTitle'>\n+                                    {todo.ownerTitle && <>-</>}{' '}\n+                                    {todo.ownerTitle}\n+                                </Box>\n+                                <Box className='todoCount'>\n+                                    {todo.todoOverviewDetails.length} active\n+                                    to-dos\n+                                </Box>\n+                            </Box>\n+                        </AccordionSummary>\n+                        <AccordionDetails\n+                            sx={{ padding: '0px' }}\n+                            className='accordianDetails'\n+                        >\n+                            <TableContainer>\n+                                <Table>\n+                                    <TableHead className='tableHead'>\n+                                        <TableRow>\n+                                            <TableCell>TO-DO</TableCell>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1607834605",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/todo-overview/todo-header/TodoHeader.tsx",
//         "line": 90,
//         "comment": "You need to split the return in multiple smaller components.",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,156 @@\n+import React, { FC } from 'react'\n+\n+import moment from 'moment'\n+\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Avatar,\n+    Box,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow\n+} from '@mui/material'\n+\n+import { DateFormatter } from '../../../../Components/DateFormatter/DateFormatter'\n+import {\n+    TodoOverviewData,\n+    TodoOverviewDetail\n+} from '../../../../types/todo.overview.response'\n+import './TodoHeader.scss'\n+\n+interface TodoHeaderProps {\n+    todos: TodoOverviewData[]\n+    todoRespSetter: any\n+    userDateFormat: string\n+}\n+\n+const TodoHeader: FC<TodoHeaderProps> = (props) => {\n+    const handleAccordionChange =\n+        (todo: TodoOverviewData) => (event: any, isExpanded: boolean) => {\n+            todo.expanded = isExpanded\n+            props.todoRespSetter([...props.todos])\n+        }\n+\n+    const getDeadline = (warning: boolean, date: string) => {\n+        return (\n+            <DateFormatter\n+                currentDate={date}\n+                userDateFormat={props.userDateFormat}\n+                warning={warning}\n+            />\n+        )\n+    }\n+\n+    return (\n+        <>\n+            {props.todos.map((todo: TodoOverviewData) => (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1607836646",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/todo-overview/todo-header/TodoHeader.tsx",
//         "line": null,
//         "comment": "Unnecessary function? Just put component in the jsx?",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,156 @@\n+import React, { FC } from 'react'\n+\n+import moment from 'moment'\n+\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Avatar,\n+    Box,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow\n+} from '@mui/material'\n+\n+import { DateFormatter } from '../../../../Components/DateFormatter/DateFormatter'\n+import {\n+    TodoOverviewData,\n+    TodoOverviewDetail\n+} from '../../../../types/todo.overview.response'\n+import './TodoHeader.scss'\n+\n+interface TodoHeaderProps {\n+    todos: TodoOverviewData[]\n+    todoRespSetter: any\n+    userDateFormat: string\n+}\n+\n+const TodoHeader: FC<TodoHeaderProps> = (props) => {\n+    const handleAccordionChange =\n+        (todo: TodoOverviewData) => (event: any, isExpanded: boolean) => {\n+            todo.expanded = isExpanded\n+            props.todoRespSetter([...props.todos])\n+        }\n+\n+    const getDeadline = (warning: boolean, date: string) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1607839502",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/Card/styled.ts",
//         "line": 12,
//         "comment": "We stay to a standard of n%4=0 so it should be 232 or 236",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -6,19 +6,19 @@ export type WrapperProps = {\n     themeKey?: 'success' | 'primary' | 'warning' | 'error'\n }\n \n-export const Wrapper = styled(FlexBox)<WrapperProps>(({ theme, themeKey }) => ({\n+export const Wrapper = styled(FlexBox)<WrapperProps>(({ theme }) => ({\n     display: 'flex',\n     flexDirection: 'column',\n-    height: '200px',\n-    width: '312px',\n+    height: '235px',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607857299",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/App/config/jwtInterceptor.ts",
//         "line": null,
//         "comment": "This interceptor is not actually in use. Using the one from jwt.moq.ts",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -4,7 +4,7 @@ axios.interceptors.request.use((config) => {\n     if (import.meta.env.MODE !== 'development') return config\n \n     if (config.url?.includes('cdn')) return config\n-    config.headers['Authorization'] =\n+    config.headers.Authorization =",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607859035",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateAccordion.tsx",
//         "line": null,
//         "comment": "Co-pilot? :p ",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -0,0 +1,130 @@\n+import { useEffect, useState } from 'react'\n+\n+import {\n+    DeleteOutlineRounded as DeleteOutlineRoundedIcon,\n+    ExpandMore as ExpandMoreIcon,\n+    QuestionAnswerOutlined as QuestionAnswerOutlinedIcon\n+} from '@mui/icons-material/'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Box,\n+    Grid,\n+    Menu,\n+    MenuItem,\n+    Typography\n+} from '@mui/material'\n+\n+import { Template, WorkflowType } from '../../../services/template'\n+// Adjust import according to your file structure\n+import { Nullable } from '../../../types/general'\n+// Adjust import according to your file structure",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607859925",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateAccordion.tsx",
//         "line": null,
//         "comment": "type",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -0,0 +1,130 @@\n+import { useEffect, useState } from 'react'\n+\n+import {\n+    DeleteOutlineRounded as DeleteOutlineRoundedIcon,\n+    ExpandMore as ExpandMoreIcon,\n+    QuestionAnswerOutlined as QuestionAnswerOutlinedIcon\n+} from '@mui/icons-material/'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Box,\n+    Grid,\n+    Menu,\n+    MenuItem,\n+    Typography\n+} from '@mui/material'\n+\n+import { Template, WorkflowType } from '../../../services/template'\n+// Adjust import according to your file structure\n+import { Nullable } from '../../../types/general'\n+// Adjust import according to your file structure\n+import TemplateCard from './TemplateCard'\n+import { QuestionAnswerIconWrapper } from './TemplateCard/styled'\n+\n+// Adjust import according to your file structure\n+type Open = {\n+    anchorEl: HTMLElement\n+    templateId: string\n+}\n+\n+interface TemplateAccordionProps {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607860961",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateCard/TemplateCard.tsx",
//         "line": null,
//         "comment": "These were lower case because of translation key I think :) ",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -1,75 +1,105 @@\n-import React, { FC } from 'react'\n+import { FC, memo } from 'react'\n import { useTranslation } from 'react-i18next'\n \n-import dayjs from 'dayjs'\n-\n+import FileCopyOutlinedIcon from '@mui/icons-material/FileCopyOutlined'\n import MoreVertIcon from '@mui/icons-material/MoreVert'\n-import { Divider, IconButton, Typography } from '@mui/material'\n+import QuestionAnswerOutlinedIcon from '@mui/icons-material/QuestionAnswerOutlined'\n+import VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined'\n+import { Button, Chip, IconButton, Typography } from '@mui/material'\n \n import Card from '../../../../Components/Card'\n import FlexBox from '../../../../Components/FlexBox'\n import { Template } from '../../../../services/template'\n-import WorkflowLabel from './WorkflowLabel'\n-import { InnerCircle, OuterCircle } from './styled'\n+import '../../../feature.css'\n+import { QuestionAnswerIconWrapper } from './styled'\n \n type Props = Template & {\n     onClick: () => void\n-    onOpen: (event: React.MouseEvent<HTMLElement>) => void\n+    onOpen: void\n+    onPreview: () => void\n+    onDuplicate: () => void\n }\n \n const statusMap = {\n-    DRAFT: 'draft',\n-    PUBLISHED: 'active',\n-    INACTIVE: 'inactive'\n+    DRAFT: 'Draft',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607863275",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateCard/TemplateCard.tsx",
//         "line": null,
//         "comment": "ohhh I used them as a text value where first alphabet was in uppercase!!",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -1,75 +1,105 @@\n-import React, { FC } from 'react'\n+import { FC, memo } from 'react'\n import { useTranslation } from 'react-i18next'\n \n-import dayjs from 'dayjs'\n-\n+import FileCopyOutlinedIcon from '@mui/icons-material/FileCopyOutlined'\n import MoreVertIcon from '@mui/icons-material/MoreVert'\n-import { Divider, IconButton, Typography } from '@mui/material'\n+import QuestionAnswerOutlinedIcon from '@mui/icons-material/QuestionAnswerOutlined'\n+import VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined'\n+import { Button, Chip, IconButton, Typography } from '@mui/material'\n \n import Card from '../../../../Components/Card'\n import FlexBox from '../../../../Components/FlexBox'\n import { Template } from '../../../../services/template'\n-import WorkflowLabel from './WorkflowLabel'\n-import { InnerCircle, OuterCircle } from './styled'\n+import '../../../feature.css'\n+import { QuestionAnswerIconWrapper } from './styled'\n \n type Props = Template & {\n     onClick: () => void\n-    onOpen: (event: React.MouseEvent<HTMLElement>) => void\n+    onOpen: void\n+    onPreview: () => void\n+    onDuplicate: () => void\n }\n \n const statusMap = {\n-    DRAFT: 'draft',\n-    PUBLISHED: 'active',\n-    INACTIVE: 'inactive'\n+    DRAFT: 'Draft',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607894999",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/App/config/jwtInterceptor.ts",
//         "line": null,
//         "comment": "will be removing",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -4,7 +4,7 @@ axios.interceptors.request.use((config) => {\n     if (import.meta.env.MODE !== 'development') return config\n \n     if (config.url?.includes('cdn')) return config\n-    config.headers['Authorization'] =\n+    config.headers.Authorization =",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607896373",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/Components/Card/styled.ts",
//         "line": 12,
//         "comment": "okkaay :)",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -6,19 +6,19 @@ export type WrapperProps = {\n     themeKey?: 'success' | 'primary' | 'warning' | 'error'\n }\n \n-export const Wrapper = styled(FlexBox)<WrapperProps>(({ theme, themeKey }) => ({\n+export const Wrapper = styled(FlexBox)<WrapperProps>(({ theme }) => ({\n     display: 'flex',\n     flexDirection: 'column',\n-    height: '200px',\n-    width: '312px',\n+    height: '235px',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607896903",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": 46,
//         "comment": "This is pretty hacky. Why don't you just get the new template instead of this middle state hack? Or you can even just update the list of templates if you don't need the list from backend",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -43,55 +40,72 @@ const TemplateOverview: FC = () => {\n     }\n \n     const handleDuplicate = () => {\n-        console.log('duplicate')\n         setMenuState(null)\n     }\n \n     const handleDelete = () => {\n-        console.log('delete')\n+        if (menuState) {\n+            deleteTemplateById(menuState.templateId).then(() =>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607897869",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateAccordion.tsx",
//         "line": null,
//         "comment": "oops!! will be removing ",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -0,0 +1,130 @@\n+import { useEffect, useState } from 'react'\n+\n+import {\n+    DeleteOutlineRounded as DeleteOutlineRoundedIcon,\n+    ExpandMore as ExpandMoreIcon,\n+    QuestionAnswerOutlined as QuestionAnswerOutlinedIcon\n+} from '@mui/icons-material/'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Box,\n+    Grid,\n+    Menu,\n+    MenuItem,\n+    Typography\n+} from '@mui/material'\n+\n+import { Template, WorkflowType } from '../../../services/template'\n+// Adjust import according to your file structure\n+import { Nullable } from '../../../types/general'\n+// Adjust import according to your file structure",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607898816",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": 46,
//         "comment": "yeah I was thinking of the same, Will be more efficient if we update from ui only :)",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -43,55 +40,72 @@ const TemplateOverview: FC = () => {\n     }\n \n     const handleDuplicate = () => {\n-        console.log('duplicate')\n         setMenuState(null)\n     }\n \n     const handleDelete = () => {\n-        console.log('delete')\n+        if (menuState) {\n+            deleteTemplateById(menuState.templateId).then(() =>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607905080",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": null,
//         "comment": "Pretty messy with so many useEffects doing the same type operations. And maybe we could Record<WorkflowType, Template[]> instead here? This should also just be memoized and not a separate state. I suggest \r\n// Also move this to separate function :> \r\nconst templatesByWFType = useMemo(() => templates.reduce((acc, next) => {\r\n    const x = acc[next.workflowType]\r\n    return { ...acc, [next.workflowType]: [...x, next] }\r\n}, {} as TypeYouMake), [templates])\r\n\r\nJust writing in comment so can be wrong :p ",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -43,55 +40,72 @@ const TemplateOverview: FC = () => {\n     }\n \n     const handleDuplicate = () => {\n-        console.log('duplicate')\n         setMenuState(null)\n     }\n \n     const handleDelete = () => {\n-        console.log('delete')\n+        if (menuState) {\n+            deleteTemplateById(menuState.templateId).then(() =>\n+                setTemplateId(menuState.templateId)\n+            )\n+            setMenuState(null)\n+        }\n+    }\n+\n+    const handlePreview = () => {\n         setMenuState(null)\n     }\n \n     useEffect(() => {\n-        getTemplates()\n-            .then((ts) => ts.filter((t) => t.status !== 'DRAFT'))\n-            .then(setTemplates)\n-    }, [])\n-\n-    return (\n-        <Box>\n-            <Grid container spacing={2}>\n-                <Grid item>\n-                    <CreateTemplateCard onClick={() => handleClick()} />\n-                </Grid>\n+        getTemplates().then((res) => {\n+            setTemplates(res)\n+        })\n+    }, [templateId])\n \n-                {templates.map((template) => (\n-                    <Grid key={template.templateId} item>\n-                        <TemplateCard\n-                            {...template}\n-                            onClick={() => handleClick(template.templateId)}\n-                            onOpen={handleOpen(template.templateId)}\n-                        />\n-                    </Grid>\n-                ))}\n-            </Grid>\n-\n-            <Menu\n-                anchorEl={isOpen(menuState) ? menuState.anchorEl : null}\n-                open={isOpen(menuState)}\n-                onClose={() => setMenuState(null)}\n-            >\n-                <MenuItem onClick={handleDuplicate}>\n-                    <ContentCopyRoundedIcon />\n+    useEffect(() => {\n+        const tempPreparedTemplates: Template[] = []\n+        const tempOpenTemplates: Template[] = []\n+\n+        templates.forEach((template) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607907027",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": null,
//         "comment": "Then you change based on the useMemo to templateByWFType[WorkflowType.NonPrepared]",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -43,55 +40,72 @@ const TemplateOverview: FC = () => {\n     }\n \n     const handleDuplicate = () => {\n-        console.log('duplicate')\n         setMenuState(null)\n     }\n \n     const handleDelete = () => {\n-        console.log('delete')\n+        if (menuState) {\n+            deleteTemplateById(menuState.templateId).then(() =>\n+                setTemplateId(menuState.templateId)\n+            )\n+            setMenuState(null)\n+        }\n+    }\n+\n+    const handlePreview = () => {\n         setMenuState(null)\n     }\n \n     useEffect(() => {\n-        getTemplates()\n-            .then((ts) => ts.filter((t) => t.status !== 'DRAFT'))\n-            .then(setTemplates)\n-    }, [])\n-\n-    return (\n-        <Box>\n-            <Grid container spacing={2}>\n-                <Grid item>\n-                    <CreateTemplateCard onClick={() => handleClick()} />\n-                </Grid>\n+        getTemplates().then((res) => {\n+            setTemplates(res)\n+        })\n+    }, [templateId])\n \n-                {templates.map((template) => (\n-                    <Grid key={template.templateId} item>\n-                        <TemplateCard\n-                            {...template}\n-                            onClick={() => handleClick(template.templateId)}\n-                            onOpen={handleOpen(template.templateId)}\n-                        />\n-                    </Grid>\n-                ))}\n-            </Grid>\n-\n-            <Menu\n-                anchorEl={isOpen(menuState) ? menuState.anchorEl : null}\n-                open={isOpen(menuState)}\n-                onClose={() => setMenuState(null)}\n-            >\n-                <MenuItem onClick={handleDuplicate}>\n-                    <ContentCopyRoundedIcon />\n+    useEffect(() => {\n+        const tempPreparedTemplates: Template[] = []\n+        const tempOpenTemplates: Template[] = []\n+\n+        templates.forEach((template) => {\n+            if (template.workflowType === WorkflowType.Prepared) {\n+                tempPreparedTemplates.push(template)\n+            } else {\n+                tempOpenTemplates.push(template)\n+            }\n+        })\n+        setPreparedTemplates(tempPreparedTemplates)\n+        setOpenedTemplates(tempOpenTemplates)\n+    }, [templates])\n \n-                    <Typography ml={1}>{t('duplicate')}</Typography>\n-                </MenuItem>\n-                <MenuItem onClick={handleDelete}>\n-                    <DeleteOutlineRoundedIcon />\n-                    <Typography ml={1}>{t('delete')}</Typography>\n-                </MenuItem>\n-            </Menu>\n-        </Box>\n+    return (\n+        <>\n+            <TemplateAccordion\n+                title={t(`Meeting without preparations`)}\n+                workflowType={WorkflowType.NonPrepared}\n+                templates={openedTemplates}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607907648",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": null,
//         "comment": "No need to pass t. Can be created in component ",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -43,55 +40,72 @@ const TemplateOverview: FC = () => {\n     }\n \n     const handleDuplicate = () => {\n-        console.log('duplicate')\n         setMenuState(null)\n     }\n \n     const handleDelete = () => {\n-        console.log('delete')\n+        if (menuState) {\n+            deleteTemplateById(menuState.templateId).then(() =>\n+                setTemplateId(menuState.templateId)\n+            )\n+            setMenuState(null)\n+        }\n+    }\n+\n+    const handlePreview = () => {\n         setMenuState(null)\n     }\n \n     useEffect(() => {\n-        getTemplates()\n-            .then((ts) => ts.filter((t) => t.status !== 'DRAFT'))\n-            .then(setTemplates)\n-    }, [])\n-\n-    return (\n-        <Box>\n-            <Grid container spacing={2}>\n-                <Grid item>\n-                    <CreateTemplateCard onClick={() => handleClick()} />\n-                </Grid>\n+        getTemplates().then((res) => {\n+            setTemplates(res)\n+        })\n+    }, [templateId])\n \n-                {templates.map((template) => (\n-                    <Grid key={template.templateId} item>\n-                        <TemplateCard\n-                            {...template}\n-                            onClick={() => handleClick(template.templateId)}\n-                            onOpen={handleOpen(template.templateId)}\n-                        />\n-                    </Grid>\n-                ))}\n-            </Grid>\n-\n-            <Menu\n-                anchorEl={isOpen(menuState) ? menuState.anchorEl : null}\n-                open={isOpen(menuState)}\n-                onClose={() => setMenuState(null)}\n-            >\n-                <MenuItem onClick={handleDuplicate}>\n-                    <ContentCopyRoundedIcon />\n+    useEffect(() => {\n+        const tempPreparedTemplates: Template[] = []\n+        const tempOpenTemplates: Template[] = []\n+\n+        templates.forEach((template) => {\n+            if (template.workflowType === WorkflowType.Prepared) {\n+                tempPreparedTemplates.push(template)\n+            } else {\n+                tempOpenTemplates.push(template)\n+            }\n+        })\n+        setPreparedTemplates(tempPreparedTemplates)\n+        setOpenedTemplates(tempOpenTemplates)\n+    }, [templates])\n \n-                    <Typography ml={1}>{t('duplicate')}</Typography>\n-                </MenuItem>\n-                <MenuItem onClick={handleDelete}>\n-                    <DeleteOutlineRoundedIcon />\n-                    <Typography ml={1}>{t('delete')}</Typography>\n-                </MenuItem>\n-            </Menu>\n-        </Box>\n+    return (\n+        <>\n+            <TemplateAccordion\n+                title={t(`Meeting without preparations`)}\n+                workflowType={WorkflowType.NonPrepared}\n+                templates={openedTemplates}\n+                handleClick={handleClick}\n+                handleOpen={handleOpen}\n+                menuState={menuState}\n+                setMenuState={setMenuState}\n+                handleDuplicate={handleDuplicate}\n+                handleDelete={handleDelete}\n+                handlePreview={handlePreview}\n+                t={t}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607908002",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/feature.css",
//         "line": null,
//         "comment": "Nooooo css :) We use styled from material ",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -0,0 +1,9 @@\n+.multiline-ellipsis {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1607908351",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/todo-overview/TodoOverview.tsx",
//         "line": 33,
//         "comment": " __state.getSnapshot().user   (state is global object for microfrontends contains info about logged in user).\r\nThis object is not available locally, so I used hard coded this will be removing this later :)",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,163 @@\n+import { FC, useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+\n+import { Box } from '@mui/material'\n+\n+import {\n+    TodoOverviewData,\n+    TodoOverviewResponse\n+} from '../../../types/todo.overview.response'\n+import { Field, UserProfileField } from '../../../types/user.profile.field'\n+import {\n+    FIELD_NAME,\n+    FIELD_PHOTO,\n+    FIELD_TITLE\n+} from '../../../types/user.profile.fields'\n+import { prepareEmployeeDataUrl } from '../../../utils/monolith/EmployeeData'\n+import TodoHeader from '../todo-overview/todo-header/TodoHeader'\n+\n+interface TodoOverviewProps {}\n+\n+const TodoOverview: FC<TodoOverviewProps> = () => {\n+    useEffect(() => {\n+        fetchTodoOverviewData()\n+    }, [])\n+\n+    /*\n+     Replace the two lines below with the following lines.\n+     - const loggedInUser = __state.getSnapshot().user.uuid;\n+     - const loggedInUserDateFormat = __state.getSnapshot().user.dateFormatString;\n+      as __state is a global variable and is not available locally.\n+     */\n+    const loggedInUser = 'fd3966ba-0e24-4285-8521-41d427fcc398'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1608014340",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/overview.tsx",
//         "line": 29,
//         "comment": "Yes, made the todo overview similar to old one. All the data is prepared will be changing UI according to the new designs. ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,34 @@\n+import React, { useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Layout } from '@catalystone/react-core-ui'\n+import { Tab } from '@catalystone/react-core-ui/dist/@catalystone/components/Layout/TabsLayout'\n+\n+import OneToOneOverview from './onetoone-overview/onetooneOverview'\n+import TodoOverview from './todo-overview/TodoOverview'\n+\n+const Overview: React.FC = () => {\n+    const { t } = useTranslation('Overview')\n+    const [selected, setSelected] = useState(0)\n+    const tabs: Tab[] = useMemo(\n+        () => [{ name: t('One to ones') }, { name: t('To-dos') }],\n+        []\n+    )\n+\n+    return (\n+        <Layout\n+            title={t('One to One')}\n+            layoutProps={{\n+                type: 'tabs',\n+                activeTab: selected,\n+                onClickTab: setSelected,\n+                tabs\n+            }}\n+        >\n+            {selected === 0 && <OneToOneOverview />}\n+            {selected === 1 && <TodoOverview />}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1608026394",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateCard/TemplateCard.tsx",
//         "line": null,
//         "comment": "I think we have to add # also.. The # is configged so extract script doesnt remove it afterwards ",
//         "commitId": "1a88046cefe2e1ac05e34dee31c7c9d3ed052804",
//         "codeSnippet": "@@ -1,75 +1,105 @@\n-import React, { FC } from 'react'\n+import { FC, memo } from 'react'\n import { useTranslation } from 'react-i18next'\n \n-import dayjs from 'dayjs'\n-\n+import FileCopyOutlinedIcon from '@mui/icons-material/FileCopyOutlined'\n import MoreVertIcon from '@mui/icons-material/MoreVert'\n-import { Divider, IconButton, Typography } from '@mui/material'\n+import QuestionAnswerOutlinedIcon from '@mui/icons-material/QuestionAnswerOutlined'\n+import VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined'\n+import { Button, Chip, IconButton, Typography } from '@mui/material'\n \n import Card from '../../../../Components/Card'\n import FlexBox from '../../../../Components/FlexBox'\n import { Template } from '../../../../services/template'\n-import WorkflowLabel from './WorkflowLabel'\n-import { InnerCircle, OuterCircle } from './styled'\n+import '../../../feature.css'\n+import { QuestionAnswerIconWrapper } from './styled'\n \n type Props = Template & {\n     onClick: () => void\n-    onOpen: (event: React.MouseEvent<HTMLElement>) => void\n+    onOpen: void\n+    onPreview: () => void\n+    onDuplicate: () => void\n }\n \n const statusMap = {\n-    DRAFT: 'draft',\n-    PUBLISHED: 'active',\n-    INACTIVE: 'inactive'\n+    DRAFT: 'Draft',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/3#discussion_r1608033704",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,41 @@\n+import React, { FC } from 'react'\n+\n+import { Box } from '@mui/material'\n+\n+interface DateFormatterProps {\n+    userDateFormat: string\n+    currentDate: string\n+    warning: boolean\n+}\n+\n+/**\n+ * Converts date to logged in user's date format.\n+ *\n+ * @param props DateFormatterProps\n+ * @returns date in user's date format as string.\n+ */\n+export const DateFormatter: FC<DateFormatterProps> = (props) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1608264122",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,41 @@\n+import React, { FC } from 'react'\n+\n+import { Box } from '@mui/material'\n+\n+interface DateFormatterProps {\n+    userDateFormat: string\n+    currentDate: string\n+    warning: boolean\n+}\n+\n+/**\n+ * Converts date to logged in user's date format.\n+ *\n+ * @param props DateFormatterProps\n+ * @returns date in user's date format as string.\n+ */\n+export const DateFormatter: FC<DateFormatterProps> = (props) => {\n+    const warning = props.warning ? 'warning' : ''\n+    const convertDateInUserFormat = (): string => {\n+        const pad = (num: number) => (num < 10 ? `0${num}` : num)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1608264467",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/todo-overview/todo-header/TodoHeader.scss",
//         "line": null,
//         "comment": "done",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,54 @@\n+@mixin FontSize {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1608264702",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/todo-overview/todo-header/TodoHeader.tsx",
//         "line": null,
//         "comment": "changed",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,156 @@\n+import React, { FC } from 'react'\n+\n+import moment from 'moment'\n+\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Avatar,\n+    Box,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow\n+} from '@mui/material'\n+\n+import { DateFormatter } from '../../../../Components/DateFormatter/DateFormatter'\n+import {\n+    TodoOverviewData,\n+    TodoOverviewDetail\n+} from '../../../../types/todo.overview.response'\n+import './TodoHeader.scss'\n+\n+interface TodoHeaderProps {\n+    todos: TodoOverviewData[]\n+    todoRespSetter: any\n+    userDateFormat: string\n+}\n+\n+const TodoHeader: FC<TodoHeaderProps> = (props) => {\n+    const handleAccordionChange =\n+        (todo: TodoOverviewData) => (event: any, isExpanded: boolean) => {\n+            todo.expanded = isExpanded\n+            props.todoRespSetter([...props.todos])\n+        }\n+\n+    const getDeadline = (warning: boolean, date: string) => {\n+        return (\n+            <DateFormatter\n+                currentDate={date}\n+                userDateFormat={props.userDateFormat}\n+                warning={warning}\n+            />\n+        )\n+    }\n+\n+    return (\n+        <>\n+            {props.todos.map((todo: TodoOverviewData) => (\n+                <Box key={todo.ownerId}>\n+                    <Accordion\n+                        className='accordion'\n+                        sx={todo.expanded ? { backgroundColor: '#edf9fc' } : {}}\n+                        expanded={todo.expanded}\n+                        onChange={handleAccordionChange(todo)}\n+                    >\n+                        <AccordionSummary\n+                            className='summary'\n+                            expandIcon={\n+                                <ExpandMoreIcon className='expandIcon' />\n+                            }\n+                        >\n+                            <Box className='summaryContent'>\n+                                <Avatar\n+                                    sx={{\n+                                        border: '2px solid #d7d7d7',\n+                                        fontSize: '1rem'\n+                                    }}\n+                                    src={todo.ownerAvatar}\n+                                >\n+                                    {todo.ownerNameInitials}\n+                                </Avatar>\n+                                <Box className='ownerName'>\n+                                    {todo.ownerName}\n+                                </Box>\n+                                <Box className='ownerTitle'>\n+                                    {todo.ownerTitle && <>-</>}{' '}\n+                                    {todo.ownerTitle}\n+                                </Box>\n+                                <Box className='todoCount'>\n+                                    {todo.todoOverviewDetails.length} active\n+                                    to-dos\n+                                </Box>\n+                            </Box>\n+                        </AccordionSummary>\n+                        <AccordionDetails\n+                            sx={{ padding: '0px' }}\n+                            className='accordianDetails'\n+                        >\n+                            <TableContainer>\n+                                <Table>\n+                                    <TableHead className='tableHead'>\n+                                        <TableRow>\n+                                            <TableCell>TO-DO</TableCell>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1608265064",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/todo-overview/todo-header/TodoHeader.tsx",
//         "line": null,
//         "comment": "added code directly to jsx",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,156 @@\n+import React, { FC } from 'react'\n+\n+import moment from 'moment'\n+\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Avatar,\n+    Box,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow\n+} from '@mui/material'\n+\n+import { DateFormatter } from '../../../../Components/DateFormatter/DateFormatter'\n+import {\n+    TodoOverviewData,\n+    TodoOverviewDetail\n+} from '../../../../types/todo.overview.response'\n+import './TodoHeader.scss'\n+\n+interface TodoHeaderProps {\n+    todos: TodoOverviewData[]\n+    todoRespSetter: any\n+    userDateFormat: string\n+}\n+\n+const TodoHeader: FC<TodoHeaderProps> = (props) => {\n+    const handleAccordionChange =\n+        (todo: TodoOverviewData) => (event: any, isExpanded: boolean) => {\n+            todo.expanded = isExpanded\n+            props.todoRespSetter([...props.todos])\n+        }\n+\n+    const getDeadline = (warning: boolean, date: string) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1608265480",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/overview.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,34 @@\n+import React, { useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Layout } from '@catalystone/react-core-ui'\n+import { Tab } from '@catalystone/react-core-ui/dist/@catalystone/components/Layout/TabsLayout'\n+\n+import OneToOneOverview from './onetoone-overview/onetooneOverview'\n+import TodoOverview from './todo-overview/TodoOverview'\n+\n+const Overview: React.FC = () => {\n+    const { t } = useTranslation('Overview')\n+    const [selected, setSelected] = useState(0)\n+    const tabs: Tab[] = useMemo(\n+        () => [{ name: t('One to ones') }, { name: t('To-dos') }],\n+        []\n+    )\n+\n+    return (\n+        <Layout\n+            title={t('One to One')}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1608265957",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/todo-overview/todo-header/TodoHeader.tsx",
//         "line": 90,
//         "comment": "done",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,156 @@\n+import React, { FC } from 'react'\n+\n+import moment from 'moment'\n+\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Avatar,\n+    Box,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow\n+} from '@mui/material'\n+\n+import { DateFormatter } from '../../../../Components/DateFormatter/DateFormatter'\n+import {\n+    TodoOverviewData,\n+    TodoOverviewDetail\n+} from '../../../../types/todo.overview.response'\n+import './TodoHeader.scss'\n+\n+interface TodoHeaderProps {\n+    todos: TodoOverviewData[]\n+    todoRespSetter: any\n+    userDateFormat: string\n+}\n+\n+const TodoHeader: FC<TodoHeaderProps> = (props) => {\n+    const handleAccordionChange =\n+        (todo: TodoOverviewData) => (event: any, isExpanded: boolean) => {\n+            todo.expanded = isExpanded\n+            props.todoRespSetter([...props.todos])\n+        }\n+\n+    const getDeadline = (warning: boolean, date: string) => {\n+        return (\n+            <DateFormatter\n+                currentDate={date}\n+                userDateFormat={props.userDateFormat}\n+                warning={warning}\n+            />\n+        )\n+    }\n+\n+    return (\n+        <>\n+            {props.todos.map((todo: TodoOverviewData) => (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1608306857",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/todo-overview/TodoOverview.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,163 @@\n+import { FC, useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+\n+import { Box } from '@mui/material'\n+\n+import {\n+    TodoOverviewData,\n+    TodoOverviewResponse\n+} from '../../../types/todo.overview.response'\n+import { Field, UserProfileField } from '../../../types/user.profile.field'\n+import {\n+    FIELD_NAME,\n+    FIELD_PHOTO,\n+    FIELD_TITLE\n+} from '../../../types/user.profile.fields'\n+import { prepareEmployeeDataUrl } from '../../../utils/monolith/EmployeeData'\n+import TodoHeader from '../todo-overview/todo-header/TodoHeader'\n+\n+interface TodoOverviewProps {}\n+\n+const TodoOverview: FC<TodoOverviewProps> = () => {\n+    useEffect(() => {\n+        fetchTodoOverviewData()\n+    }, [])\n+\n+    /*\n+     Replace the two lines below with the following lines.\n+     - const loggedInUser = __state.getSnapshot().user.uuid;\n+     - const loggedInUserDateFormat = __state.getSnapshot().user.dateFormatString;\n+      as __state is a global variable and is not available locally.\n+     */\n+    const loggedInUser = 'fd3966ba-0e24-4285-8521-41d427fcc398'\n+\n+    const loggedInUserDateFormat = 'dd/MM/yyyy'\n+\n+    const [todosResponse, setTodosResponse] = useState<TodoOverviewData[]>()\n+\n+    const [todosFetched, setTodosFetched] = useState<boolean>()\n+\n+    const fetchTodoOverviewData = async () => {\n+        try {\n+            const todoOverview = await axios.get(\n+                'https://api.devtest.catalystone.dev/onetooneservice/v2/todos'\n+            )\n+            updateTodoResponseData(todoOverview.data)\n+        } catch (error) {\n+            console.error(error)\n+        }\n+    }\n+\n+    const updateTodoResponseData = async (\n+        todoResponse: TodoOverviewResponse\n+    ) => {\n+        const tenant = 'https://onetooneroutinedev1.devtest.catalystone.dev'\n+        // participant ids for fetching user profile data.\n+        const participants = [\n+            ...new Set(\n+                todoResponse.todoOverviews.flatMap((todo) =>\n+                    todo.todoOverviewDetails.flatMap(\n+                        (detail) => detail.participants\n+                    )\n+                )\n+            )\n+        ]\n+        const fieldIds = [FIELD_NAME, FIELD_TITLE, FIELD_PHOTO]\n+        const url = prepareEmployeeDataUrl(participants, fieldIds, tenant)\n+\n+        try {\n+            const userProfile = await axios.get(url)\n+\n+            const userProfileFields: UserProfileField[] = userProfile.data\n+            const updatedTodos = todoResponse.todoOverviews.map(\n+                (todo: TodoOverviewData) => {\n+                    const owner = userProfileFields.find(\n+                        (user: UserProfileField) =>\n+                            user.employeeGUID === todo.ownerId\n+                    )\n+                    if (owner) {\n+                        const ownerNameField = owner.fields.find(\n+                            (field: Field) => field.id === FIELD_NAME\n+                        )\n+                        const ownerTitleField = owner.fields.find(\n+                            (field: Field) => field.id === FIELD_TITLE\n+                        )\n+                        const ownerAvatarField = owner.fields.find(\n+                            (field: Field) => field.id === FIELD_PHOTO\n+                        )\n+                        todo = getTodoWithOtherParticipantName(\n+                            todo,\n+                            userProfileFields\n+                        )\n+\n+                        let ownerName = ownerNameField\n+                            ? ownerNameField.data[0]\n+                            : ''\n+                        const ownerNameInitials = ownerName\n+                            .split(' ')\n+                            .map((name: string) => name[0])\n+                            .join('')\n+                        if (loggedInUser === todo.ownerId) {\n+                            ownerName = 'Myself'\n+                        }\n+                        const ownerAvatar = ownerAvatarField\n+                            ? ownerAvatarField.data[0]\n+                            : ''\n+                        const ownerTitle = ownerTitleField\n+                            ? ownerTitleField.data[0]\n+                            : ''\n+                        return {\n+                            ...todo,\n+                            ownerName,\n+                            ownerNameInitials,\n+                            ownerAvatar,\n+                            ownerTitle\n+                        }\n+                    }\n+                    return todo\n+                }\n+            )\n+\n+            setTodosResponse(updatedTodos)\n+            setTodosFetched(true)\n+        } catch (error) {\n+            console.error(error)\n+        }\n+    }\n+\n+    const getTodoWithOtherParticipantName = (\n+        todo: TodoOverviewData,\n+        userProfileFields: UserProfileField[]\n+    ): TodoOverviewData => {\n+        todo.todoOverviewDetails.forEach((todoDetail) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1609244943",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": 24,
//         "comment": "According to your props this cannot be falsy. Either remove or redefine props to ? or Nullable, which ever is the actual case ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,49 @@\n+import React, { FC } from 'react'\n+\n+import { Box } from '@mui/material'\n+\n+interface DateFormatterProps {\n+    userDateFormat: string\n+    currentDate: string\n+    warning: boolean\n+}\n+\n+/**\n+ * Converts date to logged-in user's date format.\n+ *\n+ * @param userDateFormat string The format of the date for the logged-in user\n+ * @param currentDate string The date to be formatted\n+ * @param warning boolean Indicates whether to show a warning\n+ * @returns JSX.Element Date in the user's date format as a string\n+ */\n+const DateFormatter: FC<DateFormatterProps> = ({\n+    userDateFormat,\n+    currentDate,\n+    warning\n+}) => {\n+    if (!currentDate) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1609462455",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": 27,
//         "comment": "Move outside component ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,49 @@\n+import React, { FC } from 'react'\n+\n+import { Box } from '@mui/material'\n+\n+interface DateFormatterProps {\n+    userDateFormat: string\n+    currentDate: string\n+    warning: boolean\n+}\n+\n+/**\n+ * Converts date to logged-in user's date format.\n+ *\n+ * @param userDateFormat string The format of the date for the logged-in user\n+ * @param currentDate string The date to be formatted\n+ * @param warning boolean Indicates whether to show a warning\n+ * @returns JSX.Element Date in the user's date format as a string\n+ */\n+const DateFormatter: FC<DateFormatterProps> = ({\n+    userDateFormat,\n+    currentDate,\n+    warning\n+}) => {\n+    if (!currentDate) {\n+        return <Box />\n+    }\n+    const convertDateInUserFormat = (): string => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1609462777",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": 1,
//         "comment": "Create index.ts file in folder that exports this \r\nexport { default } from './DateFormatter' \r\n\r\n",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,49 @@\n+import React, { FC } from 'react'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1609463774",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": 5,
//         "comment": "Stick to type as we do for rest of application. ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,49 @@\n+import React, { FC } from 'react'\n+\n+import { Box } from '@mui/material'\n+\n+interface DateFormatterProps {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1609467840",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/todo-overview/todo-body/TodoBody.tsx",
//         "line": 16,
//         "comment": "Don't do this in component. I have created a component FlexBox btw. I use it all the time for this purpose exactly :) ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,57 @@\n+import { FC } from 'react'\n+\n+import moment from 'moment'\n+\n+import { Box, TableCell, TableRow, styled } from '@mui/material'\n+\n+import DateFormatter from '../../../../Components/DateFormatter/DateFormatter'\n+import { TodoOverviewDetail } from '../../../../types/todo.overview.response'\n+\n+interface TodoBodyProps {\n+    todoOverviewDetails: TodoOverviewDetail[]\n+    dateFormat: string\n+}\n+\n+const TodoBody: FC<TodoBodyProps> = ({ todoOverviewDetails, dateFormat }) => {\n+    const StyledCreatedIn = styled(Box)({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1609473804",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/todo-overview/todo-body/TodoBody.tsx",
//         "line": 21,
//         "comment": "No need to define type inside .map. It is inferred ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,57 @@\n+import { FC } from 'react'\n+\n+import moment from 'moment'\n+\n+import { Box, TableCell, TableRow, styled } from '@mui/material'\n+\n+import DateFormatter from '../../../../Components/DateFormatter/DateFormatter'\n+import { TodoOverviewDetail } from '../../../../types/todo.overview.response'\n+\n+interface TodoBodyProps {\n+    todoOverviewDetails: TodoOverviewDetail[]\n+    dateFormat: string\n+}\n+\n+const TodoBody: FC<TodoBodyProps> = ({ todoOverviewDetails, dateFormat }) => {\n+    const StyledCreatedIn = styled(Box)({\n+        display: 'flex'\n+    })\n+    return (\n+        <>\n+            {todoOverviewDetails.map((todoDetail: TodoOverviewDetail) => (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1609474276",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/todo-overview/todo-body/TodoBody.tsx",
//         "line": 28,
//         "comment": "Please don't hard code texts. It will just be a lot of after work..",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,57 @@\n+import { FC } from 'react'\n+\n+import moment from 'moment'\n+\n+import { Box, TableCell, TableRow, styled } from '@mui/material'\n+\n+import DateFormatter from '../../../../Components/DateFormatter/DateFormatter'\n+import { TodoOverviewDetail } from '../../../../types/todo.overview.response'\n+\n+interface TodoBodyProps {\n+    todoOverviewDetails: TodoOverviewDetail[]\n+    dateFormat: string\n+}\n+\n+const TodoBody: FC<TodoBodyProps> = ({ todoOverviewDetails, dateFormat }) => {\n+    const StyledCreatedIn = styled(Box)({\n+        display: 'flex'\n+    })\n+    return (\n+        <>\n+            {todoOverviewDetails.map((todoDetail: TodoOverviewDetail) => (\n+                <TableRow key={todoDetail.id}>\n+                    <TableCell>{todoDetail.title}</TableCell>\n+                    <TableCell>\n+                        <StyledCreatedIn>\n+                            1:1&nbsp;\n+                            <Box className='expandIcon'>\n+                                with {todoDetail.otherParticipantName}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1609474855",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/todo-overview/todo-header/TodoHeader.tsx",
//         "line": 25,
//         "comment": "Is d7d7d7 an official color we have? Can check storybook if it is. If we have it you can do\r\nstyled(Accordion(({ theme }) => ({ borderBottom: theme.colorYouWant })) for accessing theme ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,155 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Avatar,\n+    Box,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow\n+} from '@mui/material'\n+import { styled } from '@mui/system'\n+\n+import { TodoOverviewData } from '../../../../types/todo.overview.response'\n+import TodoBody from '../todo-body/TodoBody'\n+\n+// Styled components\n+const StyledAccordion = styled(Accordion)({\n+    borderBottom: '0.1rem solid #d7d7d7'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1609476696",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/overview/todo-overview/todo-header/TodoHeader.tsx",
//         "line": 41,
//         "comment": "Use FlexBox for these cases. You can also just add them directly to component when there so few props ",
//         "commitId": "a02bcb2bc1f6412d9fc61409690575a47f5181ec",
//         "codeSnippet": "@@ -0,0 +1,155 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Avatar,\n+    Box,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow\n+} from '@mui/material'\n+import { styled } from '@mui/system'\n+\n+import { TodoOverviewData } from '../../../../types/todo.overview.response'\n+import TodoBody from '../todo-body/TodoBody'\n+\n+// Styled components\n+const StyledAccordion = styled(Accordion)({\n+    borderBottom: '0.1rem solid #d7d7d7'\n+})\n+\n+const StyledSummary = styled(AccordionSummary)({\n+    maxHeight: '60px'\n+})\n+const StyledAccordionDetails = styled(AccordionDetails)({\n+    backgroundColor: '#fff',\n+    padding: '0'\n+})\n+\n+const StyledExpandIcon = styled(ExpandMoreIcon)({\n+    color: '#005f78'\n+})\n+\n+const StyledSummaryContent = styled(Box)({\n+    display: 'flex',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/4#discussion_r1609477616",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/HrInsights.tsx",
//         "line": null,
//         "comment": "Hi! Can you please stick with same pattern as other service calls? :) I have created service folder with respective areas inside. Also with axios you don't need if (response.data) cause it will be there. Please have a look at the other files :) ",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,120 @@\n+import * as React from 'react'\n+import { useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+import moment from 'moment'\n+\n+import { Box, styled } from '@mui/system'\n+\n+import { InsightsResponse } from '../../../types/insights.response'\n+import {\n+    LAST_YEAR,\n+    SIX_MONTHS,\n+    THIS_YEAR,\n+    THREE_MONTHS,\n+    TWELVE_MONTHS\n+} from '../../../types/period'\n+import InsightsGraph from './insights-graph/InsightsGraph'\n+import InsightsHeader from './insights-header/InsightsHeader'\n+import Overlay from './overlay/Overlay'\n+import { HeaderWidth } from './styled'\n+\n+const HrInsights: React.FC = () => {\n+    const [selectedPeriod, setSelectedPeriod] = useState<number>(SIX_MONTHS)\n+\n+    const [insightsResponse, setInsightsResponse] = useState<InsightsResponse>()\n+\n+    useEffect(() => {\n+        fetchHrInsightsData()\n+    }, [selectedPeriod])\n+\n+    /**\n+     * Fetch the HR insights data from the API based on the selected period.\n+     */\n+    const fetchHrInsightsData = async () => {\n+        const period = getDateForFetchingInsightsData()\n+        try {\n+            const response = await axios.get<InsightsResponse>(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618322089",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/HrInsights.tsx",
//         "line": null,
//         "comment": "This should not be necessary unless the API is weird ",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,120 @@\n+import * as React from 'react'\n+import { useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+import moment from 'moment'\n+\n+import { Box, styled } from '@mui/system'\n+\n+import { InsightsResponse } from '../../../types/insights.response'\n+import {\n+    LAST_YEAR,\n+    SIX_MONTHS,\n+    THIS_YEAR,\n+    THREE_MONTHS,\n+    TWELVE_MONTHS\n+} from '../../../types/period'\n+import InsightsGraph from './insights-graph/InsightsGraph'\n+import InsightsHeader from './insights-header/InsightsHeader'\n+import Overlay from './overlay/Overlay'\n+import { HeaderWidth } from './styled'\n+\n+const HrInsights: React.FC = () => {\n+    const [selectedPeriod, setSelectedPeriod] = useState<number>(SIX_MONTHS)\n+\n+    const [insightsResponse, setInsightsResponse] = useState<InsightsResponse>()\n+\n+    useEffect(() => {\n+        fetchHrInsightsData()\n+    }, [selectedPeriod])\n+\n+    /**\n+     * Fetch the HR insights data from the API based on the selected period.\n+     */\n+    const fetchHrInsightsData = async () => {\n+        const period = getDateForFetchingInsightsData()\n+        try {\n+            const response = await axios.get<InsightsResponse>(\n+                'https://api.devtest.catalystone.dev/onetooneservice/v2/onetoonemetrics',\n+                {\n+                    params: {\n+                        startDate: period.formattedStartDate,\n+                        endDate: period.formattedEndDate\n+                    },\n+                    headers: {\n+                        'Content-Type': 'application/json'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618322544",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/HrInsights.tsx",
//         "line": null,
//         "comment": "Move all logical function outside to a utils file :) ",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,120 @@\n+import * as React from 'react'\n+import { useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+import moment from 'moment'\n+\n+import { Box, styled } from '@mui/system'\n+\n+import { InsightsResponse } from '../../../types/insights.response'\n+import {\n+    LAST_YEAR,\n+    SIX_MONTHS,\n+    THIS_YEAR,\n+    THREE_MONTHS,\n+    TWELVE_MONTHS\n+} from '../../../types/period'\n+import InsightsGraph from './insights-graph/InsightsGraph'\n+import InsightsHeader from './insights-header/InsightsHeader'\n+import Overlay from './overlay/Overlay'\n+import { HeaderWidth } from './styled'\n+\n+const HrInsights: React.FC = () => {\n+    const [selectedPeriod, setSelectedPeriod] = useState<number>(SIX_MONTHS)\n+\n+    const [insightsResponse, setInsightsResponse] = useState<InsightsResponse>()\n+\n+    useEffect(() => {\n+        fetchHrInsightsData()\n+    }, [selectedPeriod])\n+\n+    /**\n+     * Fetch the HR insights data from the API based on the selected period.\n+     */\n+    const fetchHrInsightsData = async () => {\n+        const period = getDateForFetchingInsightsData()\n+        try {\n+            const response = await axios.get<InsightsResponse>(\n+                'https://api.devtest.catalystone.dev/onetooneservice/v2/onetoonemetrics',\n+                {\n+                    params: {\n+                        startDate: period.formattedStartDate,\n+                        endDate: period.formattedEndDate\n+                    },\n+                    headers: {\n+                        'Content-Type': 'application/json'\n+                    },\n+                    /* Temporary fix as Content-Type is not being set in the request.\n+                        https://github.com/axios/axios/issues/86\n+                    */\n+                    data: {}\n+                }\n+            )\n+            if (response.data) {\n+                setInsightsResponse(response.data)\n+            }\n+        } catch (error) {\n+            console.error(error)\n+        }\n+    }\n+\n+    /**\n+     * Get the formatted start and end date for fetching insights data\n+     * based on the selected period.\n+     *\n+     * @returns formatted start and end date for fetching insights data.\n+     */\n+    const getDateForFetchingInsightsData = () => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618322962",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/HrInsights.tsx",
//         "line": null,
//         "comment": "HeaderWidth was a strange name. Could you rename so it's clear what it is? :)",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,120 @@\n+import * as React from 'react'\n+import { useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+import moment from 'moment'\n+\n+import { Box, styled } from '@mui/system'\n+\n+import { InsightsResponse } from '../../../types/insights.response'\n+import {\n+    LAST_YEAR,\n+    SIX_MONTHS,\n+    THIS_YEAR,\n+    THREE_MONTHS,\n+    TWELVE_MONTHS\n+} from '../../../types/period'\n+import InsightsGraph from './insights-graph/InsightsGraph'\n+import InsightsHeader from './insights-header/InsightsHeader'\n+import Overlay from './overlay/Overlay'\n+import { HeaderWidth } from './styled'\n+\n+const HrInsights: React.FC = () => {\n+    const [selectedPeriod, setSelectedPeriod] = useState<number>(SIX_MONTHS)\n+\n+    const [insightsResponse, setInsightsResponse] = useState<InsightsResponse>()\n+\n+    useEffect(() => {\n+        fetchHrInsightsData()\n+    }, [selectedPeriod])\n+\n+    /**\n+     * Fetch the HR insights data from the API based on the selected period.\n+     */\n+    const fetchHrInsightsData = async () => {\n+        const period = getDateForFetchingInsightsData()\n+        try {\n+            const response = await axios.get<InsightsResponse>(\n+                'https://api.devtest.catalystone.dev/onetooneservice/v2/onetoonemetrics',\n+                {\n+                    params: {\n+                        startDate: period.formattedStartDate,\n+                        endDate: period.formattedEndDate\n+                    },\n+                    headers: {\n+                        'Content-Type': 'application/json'\n+                    },\n+                    /* Temporary fix as Content-Type is not being set in the request.\n+                        https://github.com/axios/axios/issues/86\n+                    */\n+                    data: {}\n+                }\n+            )\n+            if (response.data) {\n+                setInsightsResponse(response.data)\n+            }\n+        } catch (error) {\n+            console.error(error)\n+        }\n+    }\n+\n+    /**\n+     * Get the formatted start and end date for fetching insights data\n+     * based on the selected period.\n+     *\n+     * @returns formatted start and end date for fetching insights data.\n+     */\n+    const getDateForFetchingInsightsData = () => {\n+        const today = moment()\n+        const startDate = moment(today)\n+        const endDate = moment(today)\n+\n+        switch (selectedPeriod) {\n+            case THREE_MONTHS:\n+                startDate.subtract(2, 'months')\n+                break\n+            case SIX_MONTHS:\n+                startDate.subtract(5, 'months')\n+                break\n+            case TWELVE_MONTHS:\n+                startDate.subtract(11, 'months')\n+                break\n+            case THIS_YEAR:\n+                startDate.startOf('year')\n+                endDate.endOf('year')\n+                break\n+            case LAST_YEAR:\n+                startDate.subtract(1, 'years').startOf('year')\n+                endDate.subtract(1, 'years').endOf('year')\n+                break\n+            default:\n+                startDate.subtract(5, 'months')\n+                break\n+        }\n+        return {\n+            formattedStartDate: startDate.format('YYYY-MM-DD'),\n+            formattedEndDate: endDate.format('YYYY-MM-DD')\n+        }\n+    }\n+\n+    return (\n+        <Box>\n+            {insightsResponse ? (\n+                <>\n+                    <HeaderWidth>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618323720",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/insights-graph/InsightsGraph.tsx",
//         "line": null,
//         "comment": "For internal only props use just Props as name.",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,126 @@\n+import { useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { BarChart, axisClasses } from '@mui/x-charts'\n+\n+import {\n+    CountPerMonth,\n+    Data,\n+    InsightsResponse,\n+    Series\n+} from '../../../../types/insights.response'\n+import { hrManager, manager, others, stroke, subordinate } from './styled'\n+\n+type GraphProps = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618324250",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/insights-graph/InsightsGraph.tsx",
//         "line": null,
//         "comment": "Also move all logic to outside component :) ",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,126 @@\n+import { useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { BarChart, axisClasses } from '@mui/x-charts'\n+\n+import {\n+    CountPerMonth,\n+    Data,\n+    InsightsResponse,\n+    Series\n+} from '../../../../types/insights.response'\n+import { hrManager, manager, others, stroke, subordinate } from './styled'\n+\n+type GraphProps = {\n+    insightsResponse: InsightsResponse\n+}\n+\n+const InsightsGraph: React.FC<GraphProps> = ({ insightsResponse }) => {\n+    const [selectedPeriodData, setSelectedPeriodData] = useState<string[]>()\n+    const [initiatedBy, setInitiatedBy] = useState<Series[]>()\n+    const { t } = useTranslation('hr-insights')\n+\n+    useEffect(() => {\n+        setDataForInsightsGraph()\n+    }, [insightsResponse])\n+\n+    /**\n+     * Set the data for the insights graph.\n+     */\n+    const setDataForInsightsGraph = () => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618328814",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/insights-header/InsightsHeader.tsx",
//         "line": null,
//         "comment": "Probably ChangeEvent<HTMLInputElement> or some other element :) ",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,57 @@\n+import { useTranslation } from 'react-i18next'\n+\n+import { Box, FormControl, InputLabel, MenuItem, Select } from '@mui/material'\n+\n+import {\n+    LAST_YEAR,\n+    SIX_MONTHS,\n+    THIS_YEAR,\n+    THREE_MONTHS,\n+    TWELVE_MONTHS\n+} from '../../../../types/period'\n+import { HeaderAlign, TextAlign, TextColor } from './styled'\n+\n+type InsightsHeader = {\n+    isGlobalHr: boolean\n+    selectedPeriod: number\n+    setSelectedPeriod: React.Dispatch<React.SetStateAction<number>>\n+}\n+\n+const InsightsHeader: React.FC<InsightsHeader> = ({\n+    isGlobalHr,\n+    selectedPeriod,\n+    setSelectedPeriod\n+}) => {\n+    const { t } = useTranslation('hr-insights')\n+\n+    const handlePeriodChange = (event: any) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618335427",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/overlay/Overlay.tsx",
//         "line": null,
//         "comment": "translate ",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,80 @@\n+import moment from 'moment'\n+\n+import Stack from '@mui/material/Stack'\n+import { axisClasses } from '@mui/x-charts'\n+import { BarChart } from '@mui/x-charts/BarChart'\n+import { useDrawingArea, useXScale, useYScale } from '@mui/x-charts/hooks'\n+\n+import { LoadingReact, LoadingText } from './styled'\n+\n+const ratios = [0.2, 0.8, 0.6, 0.5]\n+\n+const getLastSixMonths = () => {\n+    const months = []\n+    let currentDate = moment()\n+    for (let i = 0; i < 6; i += 1) {\n+        months.unshift(currentDate.format('MMMM'))\n+        currentDate = currentDate.subtract(1, 'month')\n+    }\n+    return months\n+}\n+\n+const defaultMonths = getLastSixMonths()\n+\n+const LoadingOverlay = () => {\n+    const xScale = useXScale<'band'>()\n+    const yScale = useYScale()\n+    const { left, width, height } = useDrawingArea()\n+\n+    const bandWidth = xScale.bandwidth()\n+\n+    const [bottom, top] = yScale.range()\n+\n+    return (\n+        <g>\n+            {xScale.domain().map((item: any, index: number) => {\n+                const ratio = ratios[index % ratios.length]\n+                const barHeight = ratio * (bottom - top)\n+\n+                return (\n+                    <LoadingReact\n+                        key={item}\n+                        x={xScale(item)}\n+                        width={bandWidth}\n+                        y={bottom - barHeight}\n+                        height={height}\n+                    />\n+                )\n+            })}\n+            <LoadingText x={left + width / 2} y={top + height / 2}>\n+                Loading data ...",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618346289",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/styled.ts",
//         "line": 4,
//         "comment": "No need to extract just for this. Box has width prop in them :) ",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,6 @@\n+import Box from '@mui/material/Box'\n+import styled from '@mui/system/styled'\n+\n+export const HeaderWidth = styled(Box)({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618347191",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/types/period.ts",
//         "line": null,
//         "comment": "Does need to be so high in folder hierarchy? Used multiple places? ",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,5 @@\n+export const THREE_MONTHS = 1",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618351199",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/HrInsights.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,120 @@\n+import * as React from 'react'\n+import { useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+import moment from 'moment'\n+\n+import { Box, styled } from '@mui/system'\n+\n+import { InsightsResponse } from '../../../types/insights.response'\n+import {\n+    LAST_YEAR,\n+    SIX_MONTHS,\n+    THIS_YEAR,\n+    THREE_MONTHS,\n+    TWELVE_MONTHS\n+} from '../../../types/period'\n+import InsightsGraph from './insights-graph/InsightsGraph'\n+import InsightsHeader from './insights-header/InsightsHeader'\n+import Overlay from './overlay/Overlay'\n+import { HeaderWidth } from './styled'\n+\n+const HrInsights: React.FC = () => {\n+    const [selectedPeriod, setSelectedPeriod] = useState<number>(SIX_MONTHS)\n+\n+    const [insightsResponse, setInsightsResponse] = useState<InsightsResponse>()\n+\n+    useEffect(() => {\n+        fetchHrInsightsData()\n+    }, [selectedPeriod])\n+\n+    /**\n+     * Fetch the HR insights data from the API based on the selected period.\n+     */\n+    const fetchHrInsightsData = async () => {\n+        const period = getDateForFetchingInsightsData()\n+        try {\n+            const response = await axios.get<InsightsResponse>(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618757339",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/HrInsights.tsx",
//         "line": null,
//         "comment": "removed",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,120 @@\n+import * as React from 'react'\n+import { useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+import moment from 'moment'\n+\n+import { Box, styled } from '@mui/system'\n+\n+import { InsightsResponse } from '../../../types/insights.response'\n+import {\n+    LAST_YEAR,\n+    SIX_MONTHS,\n+    THIS_YEAR,\n+    THREE_MONTHS,\n+    TWELVE_MONTHS\n+} from '../../../types/period'\n+import InsightsGraph from './insights-graph/InsightsGraph'\n+import InsightsHeader from './insights-header/InsightsHeader'\n+import Overlay from './overlay/Overlay'\n+import { HeaderWidth } from './styled'\n+\n+const HrInsights: React.FC = () => {\n+    const [selectedPeriod, setSelectedPeriod] = useState<number>(SIX_MONTHS)\n+\n+    const [insightsResponse, setInsightsResponse] = useState<InsightsResponse>()\n+\n+    useEffect(() => {\n+        fetchHrInsightsData()\n+    }, [selectedPeriod])\n+\n+    /**\n+     * Fetch the HR insights data from the API based on the selected period.\n+     */\n+    const fetchHrInsightsData = async () => {\n+        const period = getDateForFetchingInsightsData()\n+        try {\n+            const response = await axios.get<InsightsResponse>(\n+                'https://api.devtest.catalystone.dev/onetooneservice/v2/onetoonemetrics',\n+                {\n+                    params: {\n+                        startDate: period.formattedStartDate,\n+                        endDate: period.formattedEndDate\n+                    },\n+                    headers: {\n+                        'Content-Type': 'application/json'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618757590",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/insights-graph/InsightsGraph.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,126 @@\n+import { useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { BarChart, axisClasses } from '@mui/x-charts'\n+\n+import {\n+    CountPerMonth,\n+    Data,\n+    InsightsResponse,\n+    Series\n+} from '../../../../types/insights.response'\n+import { hrManager, manager, others, stroke, subordinate } from './styled'\n+\n+type GraphProps = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618758024",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/overlay/Overlay.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,80 @@\n+import moment from 'moment'\n+\n+import Stack from '@mui/material/Stack'\n+import { axisClasses } from '@mui/x-charts'\n+import { BarChart } from '@mui/x-charts/BarChart'\n+import { useDrawingArea, useXScale, useYScale } from '@mui/x-charts/hooks'\n+\n+import { LoadingReact, LoadingText } from './styled'\n+\n+const ratios = [0.2, 0.8, 0.6, 0.5]\n+\n+const getLastSixMonths = () => {\n+    const months = []\n+    let currentDate = moment()\n+    for (let i = 0; i < 6; i += 1) {\n+        months.unshift(currentDate.format('MMMM'))\n+        currentDate = currentDate.subtract(1, 'month')\n+    }\n+    return months\n+}\n+\n+const defaultMonths = getLastSixMonths()\n+\n+const LoadingOverlay = () => {\n+    const xScale = useXScale<'band'>()\n+    const yScale = useYScale()\n+    const { left, width, height } = useDrawingArea()\n+\n+    const bandWidth = xScale.bandwidth()\n+\n+    const [bottom, top] = yScale.range()\n+\n+    return (\n+        <g>\n+            {xScale.domain().map((item: any, index: number) => {\n+                const ratio = ratios[index % ratios.length]\n+                const barHeight = ratio * (bottom - top)\n+\n+                return (\n+                    <LoadingReact\n+                        key={item}\n+                        x={xScale(item)}\n+                        width={bandWidth}\n+                        y={bottom - barHeight}\n+                        height={height}\n+                    />\n+                )\n+            })}\n+            <LoadingText x={left + width / 2} y={top + height / 2}>\n+                Loading data ...",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618758186",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/HrInsights.tsx",
//         "line": null,
//         "comment": "Move this inside useEffect ",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,58 @@\n+import * as React from 'react'\n+import { useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+\n+import { Box } from '@mui/system'\n+\n+import { getInsightsData } from '../../../services/insights/service'\n+import { getDateForFetchingInsightsData } from './Utils'\n+import InsightsGraph from './insights-graph/InsightsGraph'\n+import InsightsHeader from './insights-header/InsightsHeader'\n+import Overlay from './overlay/Overlay'\n+import { InsightsResponse } from './types/insights.response'\n+import { SIX_MONTHS } from './types/period'\n+\n+const HrInsights: React.FC = () => {\n+    const [selectedPeriod, setSelectedPeriod] = useState<number>(SIX_MONTHS)\n+\n+    const [insightsResponse, setInsightsResponse] = useState<InsightsResponse>()\n+\n+    useEffect(() => {\n+        fetchHrInsightsData()\n+    }, [selectedPeriod])\n+\n+    /**\n+     * Fetch the HR insights data from the API based on the selected period.\n+     */\n+    const fetchHrInsightsData = () => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618790124",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/HrInsights.tsx",
//         "line": null,
//         "comment": "No upper case for ts files. Only Components ",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,58 @@\n+import * as React from 'react'\n+import { useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+\n+import { Box } from '@mui/system'\n+\n+import { getInsightsData } from '../../../services/insights/service'\n+import { getDateForFetchingInsightsData } from './Utils'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618790575",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/HrInsights.tsx",
//         "line": null,
//         "comment": "No need for (response) => ... just .then(setInsightsResponse) and also concider renaming to insights. Response is unnecessary wording",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,58 @@\n+import * as React from 'react'\n+import { useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+\n+import { Box } from '@mui/system'\n+\n+import { getInsightsData } from '../../../services/insights/service'\n+import { getDateForFetchingInsightsData } from './Utils'\n+import InsightsGraph from './insights-graph/InsightsGraph'\n+import InsightsHeader from './insights-header/InsightsHeader'\n+import Overlay from './overlay/Overlay'\n+import { InsightsResponse } from './types/insights.response'\n+import { SIX_MONTHS } from './types/period'\n+\n+const HrInsights: React.FC = () => {\n+    const [selectedPeriod, setSelectedPeriod] = useState<number>(SIX_MONTHS)\n+\n+    const [insightsResponse, setInsightsResponse] = useState<InsightsResponse>()\n+\n+    useEffect(() => {\n+        fetchHrInsightsData()\n+    }, [selectedPeriod])\n+\n+    /**\n+     * Fetch the HR insights data from the API based on the selected period.\n+     */\n+    const fetchHrInsightsData = () => {\n+        const { formattedStartDate, formattedEndDate } =\n+            getDateForFetchingInsightsData(selectedPeriod)\n+        getInsightsData(formattedStartDate, formattedEndDate).then(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618791639",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/Utils.ts",
//         "line": 65,
//         "comment": "Do you have to translate in this function? Can't you just do the translation in the component? ",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,110 @@\n+import { TFunction } from 'i18next'\n+import moment from 'moment'\n+\n+import {\n+    hrManager,\n+    manager,\n+    others,\n+    subordinate\n+} from './insights-graph/styled'\n+import {\n+    CountPerMonth,\n+    Data,\n+    InsightsResponse\n+} from './types/insights.response'\n+import {\n+    LAST_YEAR,\n+    SIX_MONTHS,\n+    THIS_YEAR,\n+    THREE_MONTHS,\n+    TWELVE_MONTHS\n+} from './types/period'\n+\n+/**\n+ * Get the formatted start and end date for fetching insights data\n+ * based on the selected period.\n+ *\n+ * @returns formatted start and end date for fetching insights data.\n+ */\n+export const getDateForFetchingInsightsData = (selectedPeriod: number) => {\n+    const today = moment()\n+    const startDate = moment(today)\n+    const endDate = moment(today)\n+\n+    switch (selectedPeriod) {\n+        case THREE_MONTHS:\n+            startDate.subtract(2, 'months')\n+            break\n+        case SIX_MONTHS:\n+            startDate.subtract(5, 'months')\n+            break\n+        case TWELVE_MONTHS:\n+            startDate.subtract(11, 'months')\n+            break\n+        case THIS_YEAR:\n+            startDate.startOf('year')\n+            endDate.endOf('year')\n+            break\n+        case LAST_YEAR:\n+            startDate.subtract(1, 'years').startOf('year')\n+            endDate.subtract(1, 'years').endOf('year')\n+            break\n+        default:\n+            startDate.subtract(5, 'months')\n+            break\n+    }\n+    return {\n+        formattedStartDate: startDate.format('YYYY-MM-DD'),\n+        formattedEndDate: endDate.format('YYYY-MM-DD')\n+    }\n+}\n+\n+/**\n+ * Prepare and provide the series data for the bar chart based on the meetings\n+ * initiated by different roles on different periods.\n+ *\n+ * @returns series array and months array.\n+ */\n+export const prepareDataForBarChart = (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618792563",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/Utils.ts",
//         "line": 65,
//         "comment": "We cannot use it inside this function as it is not a React's functional component.",
//         "commitId": "3a17c0e9ec5e0cd7c8de1f910c24ab90c1edb78e",
//         "codeSnippet": "@@ -0,0 +1,110 @@\n+import { TFunction } from 'i18next'\n+import moment from 'moment'\n+\n+import {\n+    hrManager,\n+    manager,\n+    others,\n+    subordinate\n+} from './insights-graph/styled'\n+import {\n+    CountPerMonth,\n+    Data,\n+    InsightsResponse\n+} from './types/insights.response'\n+import {\n+    LAST_YEAR,\n+    SIX_MONTHS,\n+    THIS_YEAR,\n+    THREE_MONTHS,\n+    TWELVE_MONTHS\n+} from './types/period'\n+\n+/**\n+ * Get the formatted start and end date for fetching insights data\n+ * based on the selected period.\n+ *\n+ * @returns formatted start and end date for fetching insights data.\n+ */\n+export const getDateForFetchingInsightsData = (selectedPeriod: number) => {\n+    const today = moment()\n+    const startDate = moment(today)\n+    const endDate = moment(today)\n+\n+    switch (selectedPeriod) {\n+        case THREE_MONTHS:\n+            startDate.subtract(2, 'months')\n+            break\n+        case SIX_MONTHS:\n+            startDate.subtract(5, 'months')\n+            break\n+        case TWELVE_MONTHS:\n+            startDate.subtract(11, 'months')\n+            break\n+        case THIS_YEAR:\n+            startDate.startOf('year')\n+            endDate.endOf('year')\n+            break\n+        case LAST_YEAR:\n+            startDate.subtract(1, 'years').startOf('year')\n+            endDate.subtract(1, 'years').endOf('year')\n+            break\n+        default:\n+            startDate.subtract(5, 'months')\n+            break\n+    }\n+    return {\n+        formattedStartDate: startDate.format('YYYY-MM-DD'),\n+        formattedEndDate: endDate.format('YYYY-MM-DD')\n+    }\n+}\n+\n+/**\n+ * Prepare and provide the series data for the bar chart based on the meetings\n+ * initiated by different roles on different periods.\n+ *\n+ * @returns series array and months array.\n+ */\n+export const prepareDataForBarChart = (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/5#discussion_r1618801574",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/Components/AlertDialog/AlertDialog.tsx",
//         "line": null,
//         "comment": "I suggest you make this generic so we can reuse it for all deletions.",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -0,0 +1,59 @@\n+import { useTranslation } from 'react-i18next'\n+\n+import { Typography } from '@mui/material'\n+import Button from '@mui/material/Button'\n+import Dialog from '@mui/material/Dialog'\n+import DialogActions from '@mui/material/DialogActions'\n+import DialogContent from '@mui/material/DialogContent'\n+import DialogContentText from '@mui/material/DialogContentText'\n+import DialogTitle from '@mui/material/DialogTitle'\n+\n+type AlertProps = {\n+    deleteDialogState: boolean\n+    onUseraction: (action: boolean) => void\n+}\n+\n+const AlertDialog: React.FC<AlertProps> = ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1620543731",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/AlertDialog/AlertDialog.tsx",
//         "line": null,
//         "comment": "Rename internal props to Props",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -0,0 +1,59 @@\n+import { useTranslation } from 'react-i18next'\n+\n+import { Typography } from '@mui/material'\n+import Button from '@mui/material/Button'\n+import Dialog from '@mui/material/Dialog'\n+import DialogActions from '@mui/material/DialogActions'\n+import DialogContent from '@mui/material/DialogContent'\n+import DialogContentText from '@mui/material/DialogContentText'\n+import DialogTitle from '@mui/material/DialogTitle'\n+\n+type AlertProps = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1620543933",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/AlertDialog/AlertDialog.tsx",
//         "line": null,
//         "comment": "I suggest you use more \"normal\" props here\r\n\r\nonSubmit\r\nonCancel\r\n\r\nand I suggest for reuseability you pass translations OR make it super generic by i.g\r\n\r\nconst { t } = useTranslation('cancel-alert')\r\n\r\nAnd then texts that just say the basics. Like are you sure you wanna delete cancel|yes \r\n\r\nSomething like that ",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -0,0 +1,59 @@\n+import { useTranslation } from 'react-i18next'\n+\n+import { Typography } from '@mui/material'\n+import Button from '@mui/material/Button'\n+import Dialog from '@mui/material/Dialog'\n+import DialogActions from '@mui/material/DialogActions'\n+import DialogContent from '@mui/material/DialogContent'\n+import DialogContentText from '@mui/material/DialogContentText'\n+import DialogTitle from '@mui/material/DialogTitle'\n+\n+type AlertProps = {\n+    deleteDialogState: boolean\n+    onUseraction: (action: boolean) => void\n+}\n+\n+const AlertDialog: React.FC<AlertProps> = ({\n+    deleteDialogState,\n+    onUseraction\n+}) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1620548264",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/AlertDialog/AlertDialog.tsx",
//         "line": null,
//         "comment": "Fix translations right away please. Snake cased texts and use extract script from pkg.json",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -0,0 +1,59 @@\n+import { useTranslation } from 'react-i18next'\n+\n+import { Typography } from '@mui/material'\n+import Button from '@mui/material/Button'\n+import Dialog from '@mui/material/Dialog'\n+import DialogActions from '@mui/material/DialogActions'\n+import DialogContent from '@mui/material/DialogContent'\n+import DialogContentText from '@mui/material/DialogContentText'\n+import DialogTitle from '@mui/material/DialogTitle'\n+\n+type AlertProps = {\n+    deleteDialogState: boolean\n+    onUseraction: (action: boolean) => void\n+}\n+\n+const AlertDialog: React.FC<AlertProps> = ({\n+    deleteDialogState,\n+    onUseraction\n+}) => {\n+    const { t } = useTranslation('template-overview')\n+\n+    const handleConfirmDelete = () => {\n+        onUseraction(true) // delete confirms\n+    }\n+\n+    const handleClose = () => {\n+        onUseraction(false) // Cancels the dialog\n+    }\n+\n+    return (\n+        <Dialog\n+            open={deleteDialogState}\n+            onClose={handleClose}\n+            aria-labelledby='alert-dialog-title'\n+            aria-describedby='alert-dialog-description'\n+        >\n+            <DialogTitle id='alert-dialog-title'>\n+                <Typography fontSize={20}>{t('Delete Template')}</Typography>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1620549002",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "Snake cased translation. It was already there, just reuse t('create')",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -15,16 +16,16 @@ const AdministrationLandingPage: React.FC = () => {\n         []\n     )\n \n-    const handleNew = () => {}\n+    const createNewTemplateButton = {\n+        label: t('Create new'),",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1620550154",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "Also, why a separate const? ",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -15,16 +16,16 @@ const AdministrationLandingPage: React.FC = () => {\n         []\n     )\n \n-    const handleNew = () => {}\n+    const createNewTemplateButton = {\n+        label: t('Create new'),",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1620550754",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateAccordion.tsx",
//         "line": null,
//         "comment": "No <div> ",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -73,10 +77,23 @@ const TemplateAccordion: React.FC<TemplateAccordionProps> = ({\n     return (\n         <Accordion expanded={expanded} onChange={handleExpansion}>\n             <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n-                <QuestionAnswerIconWrapper type={workflowType}>\n-                    <QuestionAnswerOutlinedIcon fontSize='medium' />\n-                </QuestionAnswerIconWrapper>\n-                {title}\n+                <AccordionSummaryContentWrapper>\n+                    {+workflowType === WorkflowType.NonPrepared ? (\n+                        <QuestionAnswerIconWrapper type={+workflowType}>\n+                            <QuestionAnswerOutlinedIcon fontSize='medium' />\n+                        </QuestionAnswerIconWrapper>\n+                    ) : (\n+                        <QuestionAnswerIconWrapper type={workflowType}>\n+                            <WithPrepLogo />\n+                        </QuestionAnswerIconWrapper>\n+                    )}\n+                    <div>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1620551129",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateCard/styled.ts",
//         "line": null,
//         "comment": "Styled Box ",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -58,3 +56,15 @@ export const TextWrapper = styled('div')(() => ({\n     display: '-webkit-box',\n     height: 'fit-content'\n }))\n+\n+export const AccordionSummaryContentWrapper = styled('div')(() => ({\n+    display: 'flex',\n+    alignItems: 'center',\n+    cursor: 'pointer'\n+}))\n+\n+export const EmptyBoxContainer = styled('div')(() => ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1620554345",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": 170,
//         "comment": "You probably don't need to render this AlertDialog for every type :) ",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -75,32 +114,56 @@ const TemplateOverview: FC = () => {\n         }, {} as TemplatesByWFType)\n     }, [templates])\n \n+    if (showEmptyView) {\n+        return <EmpltyTemplateOverview />\n+    }\n+\n     return (\n         <>\n-            <TemplateAccordion\n-                title={t(`Meeting without preparations`)}\n-                workflowType={WorkflowType.NonPrepared}\n-                templates={templatesByWFType[WorkflowType.NonPrepared]}\n-                handleClick={handleClick}\n-                handleOpen={handleOpen}\n-                menuState={menuState}\n-                setMenuState={setMenuState}\n-                handleDuplicate={handleDuplicate}\n-                handleDelete={handleDelete}\n-                handlePreview={handlePreview}\n-            />\n-            <TemplateAccordion\n-                title={t(`Meeting with preparations`)}\n-                workflowType={WorkflowType.Prepared}\n-                templates={templatesByWFType[WorkflowType.Prepared]}\n-                handleClick={handleClick}\n-                handleOpen={handleOpen}\n-                menuState={menuState}\n-                setMenuState={setMenuState}\n-                handleDuplicate={handleDuplicate}\n-                handleDelete={handleDelete}\n-                handlePreview={handlePreview}\n+            {Object.entries(templatesByWFType).map(([type, value]) => (\n+                <TemplateAccordion\n+                    key={type}\n+                    title={\n+                        +type === WorkflowType.NonPrepared\n+                            ? t('Meeting without preparation')\n+                            : t('Meeting with preparation')\n+                    }\n+                    workflowType={+type}\n+                    templates={value}\n+                    handleClick={handleClick}\n+                    handleOpen={handleOpen}\n+                    menuState={menuState}\n+                    setMenuState={setMenuState}\n+                    handleDuplicate={handleDuplicate}\n+                    handleDelete={handleDelete}\n+                    handlePreview={handlePreview}\n+                />\n+            ))}\n+            <AlertDialog",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1620556468",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": null,
//         "comment": "Please use the SnackbarProvider from our CO react library :) ",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -75,32 +114,56 @@ const TemplateOverview: FC = () => {\n         }, {} as TemplatesByWFType)\n     }, [templates])\n \n+    if (showEmptyView) {\n+        return <EmpltyTemplateOverview />\n+    }\n+\n     return (\n         <>\n-            <TemplateAccordion\n-                title={t(`Meeting without preparations`)}\n-                workflowType={WorkflowType.NonPrepared}\n-                templates={templatesByWFType[WorkflowType.NonPrepared]}\n-                handleClick={handleClick}\n-                handleOpen={handleOpen}\n-                menuState={menuState}\n-                setMenuState={setMenuState}\n-                handleDuplicate={handleDuplicate}\n-                handleDelete={handleDelete}\n-                handlePreview={handlePreview}\n-            />\n-            <TemplateAccordion\n-                title={t(`Meeting with preparations`)}\n-                workflowType={WorkflowType.Prepared}\n-                templates={templatesByWFType[WorkflowType.Prepared]}\n-                handleClick={handleClick}\n-                handleOpen={handleOpen}\n-                menuState={menuState}\n-                setMenuState={setMenuState}\n-                handleDuplicate={handleDuplicate}\n-                handleDelete={handleDelete}\n-                handlePreview={handlePreview}\n+            {Object.entries(templatesByWFType).map(([type, value]) => (\n+                <TemplateAccordion\n+                    key={type}\n+                    title={\n+                        +type === WorkflowType.NonPrepared\n+                            ? t('Meeting without preparation')\n+                            : t('Meeting with preparation')\n+                    }\n+                    workflowType={+type}\n+                    templates={value}\n+                    handleClick={handleClick}\n+                    handleOpen={handleOpen}\n+                    menuState={menuState}\n+                    setMenuState={setMenuState}\n+                    handleDuplicate={handleDuplicate}\n+                    handleDelete={handleDelete}\n+                    handlePreview={handlePreview}\n+                />\n+            ))}\n+            <AlertDialog\n+                deleteDialogState={deleteDialogOpen}\n+                onUseraction={handleConfirmDelete}\n             />\n+            <Snackbar",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1620558460",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "separate const used to make it look cleaner :)",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -15,16 +16,16 @@ const AdministrationLandingPage: React.FC = () => {\n         []\n     )\n \n-    const handleNew = () => {}\n+    const createNewTemplateButton = {\n+        label: t('Create new'),",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1621744048",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateAccordion.tsx",
//         "line": null,
//         "comment": "didn't get it?",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -73,10 +77,23 @@ const TemplateAccordion: React.FC<TemplateAccordionProps> = ({\n     return (\n         <Accordion expanded={expanded} onChange={handleExpansion}>\n             <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n-                <QuestionAnswerIconWrapper type={workflowType}>\n-                    <QuestionAnswerOutlinedIcon fontSize='medium' />\n-                </QuestionAnswerIconWrapper>\n-                {title}\n+                <AccordionSummaryContentWrapper>\n+                    {+workflowType === WorkflowType.NonPrepared ? (\n+                        <QuestionAnswerIconWrapper type={+workflowType}>\n+                            <QuestionAnswerOutlinedIcon fontSize='medium' />\n+                        </QuestionAnswerIconWrapper>\n+                    ) : (\n+                        <QuestionAnswerIconWrapper type={workflowType}>\n+                            <WithPrepLogo />\n+                        </QuestionAnswerIconWrapper>\n+                    )}\n+                    <div>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1621748662",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": 170,
//         "comment": "it is rendered only once, outside of loop. Is this what you meant?\r\n",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -75,32 +114,56 @@ const TemplateOverview: FC = () => {\n         }, {} as TemplatesByWFType)\n     }, [templates])\n \n+    if (showEmptyView) {\n+        return <EmpltyTemplateOverview />\n+    }\n+\n     return (\n         <>\n-            <TemplateAccordion\n-                title={t(`Meeting without preparations`)}\n-                workflowType={WorkflowType.NonPrepared}\n-                templates={templatesByWFType[WorkflowType.NonPrepared]}\n-                handleClick={handleClick}\n-                handleOpen={handleOpen}\n-                menuState={menuState}\n-                setMenuState={setMenuState}\n-                handleDuplicate={handleDuplicate}\n-                handleDelete={handleDelete}\n-                handlePreview={handlePreview}\n-            />\n-            <TemplateAccordion\n-                title={t(`Meeting with preparations`)}\n-                workflowType={WorkflowType.Prepared}\n-                templates={templatesByWFType[WorkflowType.Prepared]}\n-                handleClick={handleClick}\n-                handleOpen={handleOpen}\n-                menuState={menuState}\n-                setMenuState={setMenuState}\n-                handleDuplicate={handleDuplicate}\n-                handleDelete={handleDelete}\n-                handlePreview={handlePreview}\n+            {Object.entries(templatesByWFType).map(([type, value]) => (\n+                <TemplateAccordion\n+                    key={type}\n+                    title={\n+                        +type === WorkflowType.NonPrepared\n+                            ? t('Meeting without preparation')\n+                            : t('Meeting with preparation')\n+                    }\n+                    workflowType={+type}\n+                    templates={value}\n+                    handleClick={handleClick}\n+                    handleOpen={handleOpen}\n+                    menuState={menuState}\n+                    setMenuState={setMenuState}\n+                    handleDuplicate={handleDuplicate}\n+                    handleDelete={handleDelete}\n+                    handlePreview={handlePreview}\n+                />\n+            ))}\n+            <AlertDialog",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1621749020",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "public/locales/en/cancel-alert.json",
//         "line": null,
//         "comment": "lower case keys! ",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -0,0 +1,5 @@\n+{\n+  \"delete-template\": \"Delete Template\",\n+  \"delete-confirm-txt\": \"Are you sure you want to delete this template?\",\n+  \"Cancel\": \"Cancel\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1632679415",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "public/locales/en/template-overview.json",
//         "line": null,
//         "comment": "lower case",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -1,16 +1,27 @@\n {\n   \"templates\": \"Templates\",\n   \"insights\": \"Insights\",\n+  \"create-new-btn\": \"Create new\",\n   \"title\": \"1-1 templates\",\n-  \"create\": \"create\",\n+  \"no-templates-text\": \"No templates found\",\n+  \"create-new-txt\": \"To add a template, click on “Create new”\",\n   \"new\": \"+ New template\",\n   \"delete\": \"Delete\",\n-  \"Preview\": \"\",\n+  \"duplicate\": \"Copy\",\n+  \"delete-success\": \"Template deleted\",\n+  \"delete-failed\": \"Error deleting the template\",\n+  \"meeting-without-prep\": \"Meeting without preparations\",\n+  \"meeting-with-prep\": \"Meeting with preparations\",\n+  \"delete-template\": \"Delete Template\",\n+  \"Cancel\": \"Cancel\",\n+  \"delete-header\": \"Delete a Template\",\n+  \"delete-confirm-txt\": \"Are you sure you want to delete this template?\",\n+  \"create\": \"create\",\n+  \"Preview\": \"Copy\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1632679928",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/AlertDialog/AlertDialog.tsx",
//         "line": null,
//         "comment": "Just open or isOpen. It is usually just called open in regards to material stuff ",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -0,0 +1,59 @@\n+import { useTranslation } from 'react-i18next'\n+\n+import { Typography } from '@mui/material'\n+import Button from '@mui/material/Button'\n+import Dialog from '@mui/material/Dialog'\n+import DialogActions from '@mui/material/DialogActions'\n+import DialogContent from '@mui/material/DialogContent'\n+import DialogContentText from '@mui/material/DialogContentText'\n+import DialogTitle from '@mui/material/DialogTitle'\n+\n+type Props = {\n+    openState: boolean",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1632681204",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/AlertDialog/AlertDialog.tsx",
//         "line": null,
//         "comment": "Why do you pass true false here? onSubmit () => {} and onCancel () => {} is enough no ? :p ",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -0,0 +1,59 @@\n+import { useTranslation } from 'react-i18next'\n+\n+import { Typography } from '@mui/material'\n+import Button from '@mui/material/Button'\n+import Dialog from '@mui/material/Dialog'\n+import DialogActions from '@mui/material/DialogActions'\n+import DialogContent from '@mui/material/DialogContent'\n+import DialogContentText from '@mui/material/DialogContentText'\n+import DialogTitle from '@mui/material/DialogTitle'\n+\n+type Props = {\n+    openState: boolean\n+    actionBtnTxt: string\n+    cancelBtnTxt: string\n+    message: string\n+    header: string\n+    onSubmit: (action: boolean) => void\n+    onCancel: (action: boolean) => void\n+}\n+\n+const AlertDialog: React.FC<Props> = ({\n+    openState,\n+    actionBtnTxt,\n+    cancelBtnTxt,\n+    header,\n+    message,\n+    onSubmit,\n+    onCancel\n+}) => {\n+    const handleConfirmDelete = () => {\n+        onSubmit(true) // delete confirms\n+    }\n+    const handleClose = () => {\n+        onCancel(false) // Cancels the dialog",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1632682607",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": null,
//         "comment": "Uhm? :D If templates are empty then .lengt - 1 === -1 :P But I think we can just remove this empty view state. It's enough to have isEmpty = useMemo(() => isEmpty(templates), [templates])",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -22,46 +27,91 @@ const TemplateOverview: FC = () => {\n     const navigate = useNavigate()\n     const [menuState, setMenuState] = useState<Nullable<Open>>(null)\n     const [templates, setTemplates] = useState<Template[]>([])\n+    const [showEmptyView, setShowEmptyView] = useState(false)\n+    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)\n \n-    const handleClick = (templateId?: string) => {\n-        navigate(['templates', templateId].filter(Boolean).join('/'))\n-    }\n+    const { createSnack } = useSnackbar()\n+    const handleClick = useCallback(\n+        (templateId?: string) => {\n+            navigate(['templates', templateId].filter(Boolean).join('/'))\n+        },\n+        [navigate]\n+    )\n \n-    const handleOpen = (templateId: string) => {\n-        return (event: React.MouseEvent<HTMLElement>) => {\n+    const handleOpen = useCallback(\n+        (templateId: string) => (event: React.MouseEvent<HTMLElement>) => {\n             event.stopPropagation()\n             setMenuState({\n                 anchorEl: event.currentTarget,\n                 templateId\n             })\n-        }\n-    }\n+        },\n+        []\n+    )\n \n-    const handleDuplicate = () => {\n-        setMenuState(null)\n-    }\n+    const handleDuplicate = useCallback(\n+        (event: React.MouseEvent<HTMLElement>) => {\n+            event.stopPropagation()\n+            setMenuState(null)\n+        },\n+        []\n+    )\n \n     const handleDelete = useCallback(() => {\n-        if (menuState) {\n-            deleteTemplateById(menuState.templateId).then(() =>\n-                setTemplates((prevTemplates) => {\n-                    return prevTemplates.filter(\n-                        (template) =>\n-                            template.templateId !== menuState.templateId\n-                    )\n+        setDeleteDialogOpen(true)\n+    }, [])\n+\n+    const handleConfirmDelete = (action: boolean) => {\n+        if (action && menuState) {\n+            const backupTemplates = [...templates]\n+            setTemplates((prevTemplates) => {\n+                setMenuState(null)\n+                // If there is only one template, show empty view quickly\n+                if (templates.length - 1 === 0) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1632686718",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": null,
//         "comment": "I think menuState should out of async fn. Weird for the user that the element disappear but not this, though I guess it disappears when the anchor is removed, unless it flies to some other place? Anyways, better off maybe first in the fn",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -22,46 +27,91 @@ const TemplateOverview: FC = () => {\n     const navigate = useNavigate()\n     const [menuState, setMenuState] = useState<Nullable<Open>>(null)\n     const [templates, setTemplates] = useState<Template[]>([])\n+    const [showEmptyView, setShowEmptyView] = useState(false)\n+    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)\n \n-    const handleClick = (templateId?: string) => {\n-        navigate(['templates', templateId].filter(Boolean).join('/'))\n-    }\n+    const { createSnack } = useSnackbar()\n+    const handleClick = useCallback(\n+        (templateId?: string) => {\n+            navigate(['templates', templateId].filter(Boolean).join('/'))\n+        },\n+        [navigate]\n+    )\n \n-    const handleOpen = (templateId: string) => {\n-        return (event: React.MouseEvent<HTMLElement>) => {\n+    const handleOpen = useCallback(\n+        (templateId: string) => (event: React.MouseEvent<HTMLElement>) => {\n             event.stopPropagation()\n             setMenuState({\n                 anchorEl: event.currentTarget,\n                 templateId\n             })\n-        }\n-    }\n+        },\n+        []\n+    )\n \n-    const handleDuplicate = () => {\n-        setMenuState(null)\n-    }\n+    const handleDuplicate = useCallback(\n+        (event: React.MouseEvent<HTMLElement>) => {\n+            event.stopPropagation()\n+            setMenuState(null)\n+        },\n+        []\n+    )\n \n     const handleDelete = useCallback(() => {\n-        if (menuState) {\n-            deleteTemplateById(menuState.templateId).then(() =>\n-                setTemplates((prevTemplates) => {\n-                    return prevTemplates.filter(\n-                        (template) =>\n-                            template.templateId !== menuState.templateId\n-                    )\n+        setDeleteDialogOpen(true)\n+    }, [])\n+\n+    const handleConfirmDelete = (action: boolean) => {\n+        if (action && menuState) {\n+            const backupTemplates = [...templates]\n+            setTemplates((prevTemplates) => {\n+                setMenuState(null)\n+                // If there is only one template, show empty view quickly\n+                if (templates.length - 1 === 0) {\n+                    setShowEmptyView(true)\n+                }\n+                return prevTemplates.filter(\n+                    (template) => template.templateId !== menuState.templateId\n+                )\n+            })\n+            deleteTemplateById(menuState.templateId)\n+                .then(() =>\n+                    createSnack({\n+                        autoHideDuration: 3000,\n+                        alert: {\n+                            severity: 'success'\n+                        },\n+                        showCloseIcon: true\n+                    })(t('delete-success'))\n+                )\n+                .catch(() => {\n+                    setMenuState(null)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1632688336",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": null,
//         "comment": "Remove as mentioned ",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -22,46 +27,91 @@ const TemplateOverview: FC = () => {\n     const navigate = useNavigate()\n     const [menuState, setMenuState] = useState<Nullable<Open>>(null)\n     const [templates, setTemplates] = useState<Template[]>([])\n+    const [showEmptyView, setShowEmptyView] = useState(false)\n+    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)\n \n-    const handleClick = (templateId?: string) => {\n-        navigate(['templates', templateId].filter(Boolean).join('/'))\n-    }\n+    const { createSnack } = useSnackbar()\n+    const handleClick = useCallback(\n+        (templateId?: string) => {\n+            navigate(['templates', templateId].filter(Boolean).join('/'))\n+        },\n+        [navigate]\n+    )\n \n-    const handleOpen = (templateId: string) => {\n-        return (event: React.MouseEvent<HTMLElement>) => {\n+    const handleOpen = useCallback(\n+        (templateId: string) => (event: React.MouseEvent<HTMLElement>) => {\n             event.stopPropagation()\n             setMenuState({\n                 anchorEl: event.currentTarget,\n                 templateId\n             })\n-        }\n-    }\n+        },\n+        []\n+    )\n \n-    const handleDuplicate = () => {\n-        setMenuState(null)\n-    }\n+    const handleDuplicate = useCallback(\n+        (event: React.MouseEvent<HTMLElement>) => {\n+            event.stopPropagation()\n+            setMenuState(null)\n+        },\n+        []\n+    )\n \n     const handleDelete = useCallback(() => {\n-        if (menuState) {\n-            deleteTemplateById(menuState.templateId).then(() =>\n-                setTemplates((prevTemplates) => {\n-                    return prevTemplates.filter(\n-                        (template) =>\n-                            template.templateId !== menuState.templateId\n-                    )\n+        setDeleteDialogOpen(true)\n+    }, [])\n+\n+    const handleConfirmDelete = (action: boolean) => {\n+        if (action && menuState) {\n+            const backupTemplates = [...templates]\n+            setTemplates((prevTemplates) => {\n+                setMenuState(null)\n+                // If there is only one template, show empty view quickly\n+                if (templates.length - 1 === 0) {\n+                    setShowEmptyView(true)\n+                }\n+                return prevTemplates.filter(\n+                    (template) => template.templateId !== menuState.templateId\n+                )\n+            })\n+            deleteTemplateById(menuState.templateId)\n+                .then(() =>\n+                    createSnack({\n+                        autoHideDuration: 3000,\n+                        alert: {\n+                            severity: 'success'\n+                        },\n+                        showCloseIcon: true\n+                    })(t('delete-success'))\n+                )\n+                .catch(() => {\n+                    setMenuState(null)\n+                    setShowEmptyView(false) // If deletion fails, show the templates again",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1632688501",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": null,
//         "comment": "Try never to use else clause. It makes code ugly and slightly harder to follow. If there are conditions that cause for an early escape, but them on top :) ",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -22,46 +27,91 @@ const TemplateOverview: FC = () => {\n     const navigate = useNavigate()\n     const [menuState, setMenuState] = useState<Nullable<Open>>(null)\n     const [templates, setTemplates] = useState<Template[]>([])\n+    const [showEmptyView, setShowEmptyView] = useState(false)\n+    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)\n \n-    const handleClick = (templateId?: string) => {\n-        navigate(['templates', templateId].filter(Boolean).join('/'))\n-    }\n+    const { createSnack } = useSnackbar()\n+    const handleClick = useCallback(\n+        (templateId?: string) => {\n+            navigate(['templates', templateId].filter(Boolean).join('/'))\n+        },\n+        [navigate]\n+    )\n \n-    const handleOpen = (templateId: string) => {\n-        return (event: React.MouseEvent<HTMLElement>) => {\n+    const handleOpen = useCallback(\n+        (templateId: string) => (event: React.MouseEvent<HTMLElement>) => {\n             event.stopPropagation()\n             setMenuState({\n                 anchorEl: event.currentTarget,\n                 templateId\n             })\n-        }\n-    }\n+        },\n+        []\n+    )\n \n-    const handleDuplicate = () => {\n-        setMenuState(null)\n-    }\n+    const handleDuplicate = useCallback(\n+        (event: React.MouseEvent<HTMLElement>) => {\n+            event.stopPropagation()\n+            setMenuState(null)\n+        },\n+        []\n+    )\n \n     const handleDelete = useCallback(() => {\n-        if (menuState) {\n-            deleteTemplateById(menuState.templateId).then(() =>\n-                setTemplates((prevTemplates) => {\n-                    return prevTemplates.filter(\n-                        (template) =>\n-                            template.templateId !== menuState.templateId\n-                    )\n+        setDeleteDialogOpen(true)\n+    }, [])\n+\n+    const handleConfirmDelete = (action: boolean) => {\n+        if (action && menuState) {\n+            const backupTemplates = [...templates]\n+            setTemplates((prevTemplates) => {\n+                setMenuState(null)\n+                // If there is only one template, show empty view quickly\n+                if (templates.length - 1 === 0) {\n+                    setShowEmptyView(true)\n+                }\n+                return prevTemplates.filter(\n+                    (template) => template.templateId !== menuState.templateId\n+                )\n+            })\n+            deleteTemplateById(menuState.templateId)\n+                .then(() =>\n+                    createSnack({\n+                        autoHideDuration: 3000,\n+                        alert: {\n+                            severity: 'success'\n+                        },\n+                        showCloseIcon: true\n+                    })(t('delete-success'))\n+                )\n+                .catch(() => {\n+                    setMenuState(null)\n+                    setShowEmptyView(false) // If deletion fails, show the templates again\n+                    setTemplates(backupTemplates)\n+                    createSnack({\n+                        autoHideDuration: 3000,\n+                        alert: {\n+                            severity: 'error'\n+                        },\n+                        showCloseIcon: true\n+                    })(t('delete-failed'))\n                 })\n-            )\n+        } else {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1632689329",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": null,
//         "comment": "Remove",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -22,46 +27,91 @@ const TemplateOverview: FC = () => {\n     const navigate = useNavigate()\n     const [menuState, setMenuState] = useState<Nullable<Open>>(null)\n     const [templates, setTemplates] = useState<Template[]>([])\n+    const [showEmptyView, setShowEmptyView] = useState(false)\n+    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)\n \n-    const handleClick = (templateId?: string) => {\n-        navigate(['templates', templateId].filter(Boolean).join('/'))\n-    }\n+    const { createSnack } = useSnackbar()\n+    const handleClick = useCallback(\n+        (templateId?: string) => {\n+            navigate(['templates', templateId].filter(Boolean).join('/'))\n+        },\n+        [navigate]\n+    )\n \n-    const handleOpen = (templateId: string) => {\n-        return (event: React.MouseEvent<HTMLElement>) => {\n+    const handleOpen = useCallback(\n+        (templateId: string) => (event: React.MouseEvent<HTMLElement>) => {\n             event.stopPropagation()\n             setMenuState({\n                 anchorEl: event.currentTarget,\n                 templateId\n             })\n-        }\n-    }\n+        },\n+        []\n+    )\n \n-    const handleDuplicate = () => {\n-        setMenuState(null)\n-    }\n+    const handleDuplicate = useCallback(\n+        (event: React.MouseEvent<HTMLElement>) => {\n+            event.stopPropagation()\n+            setMenuState(null)\n+        },\n+        []\n+    )\n \n     const handleDelete = useCallback(() => {\n-        if (menuState) {\n-            deleteTemplateById(menuState.templateId).then(() =>\n-                setTemplates((prevTemplates) => {\n-                    return prevTemplates.filter(\n-                        (template) =>\n-                            template.templateId !== menuState.templateId\n-                    )\n+        setDeleteDialogOpen(true)\n+    }, [])\n+\n+    const handleConfirmDelete = (action: boolean) => {\n+        if (action && menuState) {\n+            const backupTemplates = [...templates]\n+            setTemplates((prevTemplates) => {\n+                setMenuState(null)\n+                // If there is only one template, show empty view quickly\n+                if (templates.length - 1 === 0) {\n+                    setShowEmptyView(true)\n+                }\n+                return prevTemplates.filter(\n+                    (template) => template.templateId !== menuState.templateId\n+                )\n+            })\n+            deleteTemplateById(menuState.templateId)\n+                .then(() =>\n+                    createSnack({\n+                        autoHideDuration: 3000,\n+                        alert: {\n+                            severity: 'success'\n+                        },\n+                        showCloseIcon: true\n+                    })(t('delete-success'))\n+                )\n+                .catch(() => {\n+                    setMenuState(null)\n+                    setShowEmptyView(false) // If deletion fails, show the templates again\n+                    setTemplates(backupTemplates)\n+                    createSnack({\n+                        autoHideDuration: 3000,\n+                        alert: {\n+                            severity: 'error'\n+                        },\n+                        showCloseIcon: true\n+                    })(t('delete-failed'))\n                 })\n-            )\n+        } else {\n             setMenuState(null)\n         }\n-    }, [menuState])\n+        setDeleteDialogOpen(false)\n+    }\n \n-    const handlePreview = () => {\n+    const handlePreview = useCallback(() => {\n         setMenuState(null)\n-    }\n+    }, [])\n \n     useEffect(() => {\n         getTemplates().then((res) => {\n             setTemplates(res)\n+            if (res?.length === 0) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1632689725",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "package.json",
//         "line": null,
//         "comment": "What is this? :o ",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -76,5 +76,6 @@\n             \"eslint\",\n             \"prettier --check\"\n         ]\n-    }\n+    },\n+    \"packageManager\": \"pnpm@9.0.6+sha1.648f6014eb363abb36618f2ba59282a9eeb3e879\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632691657",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "public/assets/Group.svg",
//         "line": 1,
//         "comment": "Assets should go in src/assets. Vite will make them public when it is built :D ",
//         "commitId": "993f80d7e4b8b00a42966af9066921cc673fea58",
//         "codeSnippet": "",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632692187",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/ErrorMessage/InsightsError.tsx",
//         "line": 27,
//         "comment": "This doesn't do anything :D I'm guessing you wanna pass onRetry to this and trigger the getInsightsData().then(setInsightsData) in the other file ",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -0,0 +1,48 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Button } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { getInsightsData } from '../../services/insights'\n+import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n+\n+type Props = {\n+    errorMessage1: string\n+    errorMessage2: string\n+    selectedPeriod: number\n+    setError: (error: boolean) => void\n+}\n+\n+const InsightsError: FC<Props> = ({\n+    errorMessage1,\n+    errorMessage2,\n+    selectedPeriod,\n+    setError\n+}) => {\n+    const { t } = useTranslation('hr-insights')\n+\n+    const retry = () => {\n+        getInsightsData(selectedPeriod, setError)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632699539",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/ErrorMessage/InsightsError.tsx",
//         "line": 18,
//         "comment": "Don't put specific components in Components folder. Components folder are for more general stuff",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -0,0 +1,48 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Button } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { getInsightsData } from '../../services/insights'\n+import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n+\n+type Props = {\n+    errorMessage1: string\n+    errorMessage2: string\n+    selectedPeriod: number\n+    setError: (error: boolean) => void\n+}\n+\n+const InsightsError: FC<Props> = ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632700295",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/ErrorMessage/InsightsError.tsx",
//         "line": null,
//         "comment": "Should add alt. Translate it also",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -0,0 +1,48 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Button } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { getInsightsData } from '../../services/insights'\n+import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n+\n+type Props = {\n+    errorMessage1: string\n+    errorMessage2: string\n+    selectedPeriod: number\n+    setError: (error: boolean) => void\n+}\n+\n+const InsightsError: FC<Props> = ({\n+    errorMessage1,\n+    errorMessage2,\n+    selectedPeriod,\n+    setError\n+}) => {\n+    const { t } = useTranslation('hr-insights')\n+\n+    const retry = () => {\n+        getInsightsData(selectedPeriod, setError)\n+    }\n+\n+    return (\n+        <AlignCenter>\n+            <Box>\n+                <img\n+                    height='234px'\n+                    width='234px'\n+                    src='/public/assets/Group.svg'\n+                    alt=''",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632700945",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/ErrorMessage/InsightsError.tsx",
//         "line": null,
//         "comment": "Should be /assets/Group.svg after you fix location. Will be updated during build. But I think also it's more correct to import. import Group from '../../assets/Group.svg' and then src={Group}. Vite will handle it correctly ",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -0,0 +1,48 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Button } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { getInsightsData } from '../../services/insights'\n+import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n+\n+type Props = {\n+    errorMessage1: string\n+    errorMessage2: string\n+    selectedPeriod: number\n+    setError: (error: boolean) => void\n+}\n+\n+const InsightsError: FC<Props> = ({\n+    errorMessage1,\n+    errorMessage2,\n+    selectedPeriod,\n+    setError\n+}) => {\n+    const { t } = useTranslation('hr-insights')\n+\n+    const retry = () => {\n+        getInsightsData(selectedPeriod, setError)\n+    }\n+\n+    return (\n+        <AlignCenter>\n+            <Box>\n+                <img\n+                    height='234px'\n+                    width='234px'\n+                    src='/public/assets/Group.svg'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632701778",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/ErrorMessage/InsightsError.tsx",
//         "line": 18,
//         "comment": "I made a general error message component when any request failed.\r\nwe can pass different error message to it.",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -0,0 +1,48 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Button } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { getInsightsData } from '../../services/insights'\n+import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n+\n+type Props = {\n+    errorMessage1: string\n+    errorMessage2: string\n+    selectedPeriod: number\n+    setError: (error: boolean) => void\n+}\n+\n+const InsightsError: FC<Props> = ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632702552",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/HrInsights.tsx",
//         "line": null,
//         "comment": "Would look better if you put this in separate if statements I think. Nested ternaries inside jsx returns are so ... hard ",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -12,28 +14,42 @@ import { SIX_MONTHS } from './types/period'\n \n const HrInsights: React.FC = () => {\n     const [selectedPeriod, setSelectedPeriod] = useState<number>(SIX_MONTHS)\n-\n     const [insightsResponse, setInsightsResponse] = useState<InsightsResponse>()\n+    const [error, setError] = useState<boolean>(false)\n+    const { t } = useTranslation('hr-insights')\n \n     useEffect(() => {\n-        getInsightsData(selectedPeriod).then(setInsightsResponse)\n+        getInsightsData(selectedPeriod, setError).then(setInsightsResponse)\n     }, [selectedPeriod])\n \n     return (\n         <Box>\n-            {insightsResponse ? (\n-                <>\n-                    <Box width='100%'>\n-                        <InsightsHeader\n-                            isGlobalHr={insightsResponse.isGlobalHr}\n-                            selectedPeriod={selectedPeriod}\n-                            setSelectedPeriod={setSelectedPeriod}\n-                        />\n-                    </Box>\n-                    <InsightsGraph insightsResponse={insightsResponse} />\n-                </>\n+            {error ? (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632703540",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/Utils.ts",
//         "line": 13,
//         "comment": "don't use this . separated file style per favore :D ",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -8,7 +8,8 @@ import {\n     others,\n     subordinate\n } from './insights-graph/styled'\n-import { CountPerMonth, Data } from './types/insights.response'\n+import { MANAGER, HR_MANAGER, SUBORDINATE, OTHERS } from './types/initiated.by'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632703970",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/Utils.ts",
//         "line": null,
//         "comment": "You can put this map outside the function scope",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -105,3 +98,60 @@ export const prepareDataForBarChart = (\n         months\n     }\n }\n+\n+/**\n+ * Updates the state of the checkbox based on the value.\n+ *\n+ * @param value number (1 to 4) based on the which checkbox is (checked/unchecked).\n+ * @param checked boolean(checked or unchecked).\n+ * @param selectedFilter current filter state.\n+ * @returns\n+ */\n+export const handleCheckBoxStates = (\n+    value: number,\n+    checked: boolean,\n+    selectedFilter: Filter\n+): Filter => {\n+    const filterToUpdate: { [key: number]: string } = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632704510",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/Utils.ts",
//         "line": null,
//         "comment": "And this ",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -105,3 +98,60 @@ export const prepareDataForBarChart = (\n         months\n     }\n }\n+\n+/**\n+ * Updates the state of the checkbox based on the value.\n+ *\n+ * @param value number (1 to 4) based on the which checkbox is (checked/unchecked).\n+ * @param checked boolean(checked or unchecked).\n+ * @param selectedFilter current filter state.\n+ * @returns\n+ */\n+export const handleCheckBoxStates = (\n+    value: number,\n+    checked: boolean,\n+    selectedFilter: Filter\n+): Filter => {\n+    const filterToUpdate: { [key: number]: string } = {\n+        [MANAGER]: 'manager',\n+        [HR_MANAGER]: 'hrManager',\n+        [SUBORDINATE]: 'subordinate',\n+        [OTHERS]: 'others'\n+    }\n+\n+    const fieldToUpdate = filterToUpdate[value]\n+    if (!fieldToUpdate) {\n+        return selectedFilter\n+    }\n+\n+    return {\n+        ...selectedFilter,\n+        [fieldToUpdate]: { checked, value }\n+    }\n+}\n+\n+/**\n+ * Filters the insights data based on the roles selected.\n+ *\n+ * @param initiatedBy meeting initiated by different roles in different months and their label color.\n+ * @param roles provides value for which roles to be filtered.\n+ * @returns updated filter view.\n+ */\n+export const filterInsightsByRole = (\n+    initiatedBy: Series[],\n+    roles: Filter\n+): Series[] => {\n+    const roleColors: { [key: string]: boolean } = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632704965",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/ErrorMessage/InsightsError.tsx",
//         "line": null,
//         "comment": "\"Something went wrong. Please try to reload the page and check filter settings.\"\r\n\r\nthis message is already there even if image does not load. But lint was forcing to add this tag. \r\n",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -0,0 +1,48 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Button } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { getInsightsData } from '../../services/insights'\n+import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n+\n+type Props = {\n+    errorMessage1: string\n+    errorMessage2: string\n+    selectedPeriod: number\n+    setError: (error: boolean) => void\n+}\n+\n+const InsightsError: FC<Props> = ({\n+    errorMessage1,\n+    errorMessage2,\n+    selectedPeriod,\n+    setError\n+}) => {\n+    const { t } = useTranslation('hr-insights')\n+\n+    const retry = () => {\n+        getInsightsData(selectedPeriod, setError)\n+    }\n+\n+    return (\n+        <AlignCenter>\n+            <Box>\n+                <img\n+                    height='234px'\n+                    width='234px'\n+                    src='/public/assets/Group.svg'\n+                    alt=''",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632705514",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/form-label/FormLabel.tsx",
//         "line": null,
//         "comment": "As a rule I always put useEffects as the last thing before returns. Reasons are that we don't mess up orders and other weirdness. It also makes no sense that you do this once and then initiate checked with false :p Just set useState(true) on checked ",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -0,0 +1,64 @@\n+import { FC, useEffect, useState } from 'react'\n+\n+import { FormControlLabel } from '@mui/material'\n+import Checkbox from '@mui/material/Checkbox'\n+\n+import { handleCheckBoxStates } from '../utils'\n+\n+type Props = {\n+    label: string\n+    color: string\n+    initiatedBy: number\n+    selectedFilter: Filter\n+    setSelectedFilter: (value: Filter) => void\n+}\n+\n+const FormLabel: FC<Props> = ({\n+    label,\n+    color,\n+    initiatedBy,\n+    selectedFilter,\n+    setSelectedFilter\n+}) => {\n+    useEffect(() => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632706989",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/form-label/FormLabel.tsx",
//         "line": null,
//         "comment": "When dealing with states previous values it is more correct to use \r\n\r\nsetSelectedFilter((prev) =>     handleCheckBoxStates(\r\n                Number(target.value),\r\n                target.checked,\r\n                prev\r\n            ))",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -0,0 +1,64 @@\n+import { FC, useEffect, useState } from 'react'\n+\n+import { FormControlLabel } from '@mui/material'\n+import Checkbox from '@mui/material/Checkbox'\n+\n+import { handleCheckBoxStates } from '../utils'\n+\n+type Props = {\n+    label: string\n+    color: string\n+    initiatedBy: number\n+    selectedFilter: Filter\n+    setSelectedFilter: (value: Filter) => void\n+}\n+\n+const FormLabel: FC<Props> = ({\n+    label,\n+    color,\n+    initiatedBy,\n+    selectedFilter,\n+    setSelectedFilter\n+}) => {\n+    useEffect(() => {\n+        // Default value\n+        setChecked(true)\n+    }, [])\n+\n+    const [checked, setChecked] = useState(false)\n+\n+    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n+        const { target } = event\n+        setChecked(target.checked)\n+        setSelectedFilter(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632709502",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/insights-filter/InsightsFilter.tsx",
//         "line": null,
//         "comment": "Could move this outside and take t as param ",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -0,0 +1,79 @@\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { FormControl, RadioGroup } from '@mui/material'\n+import { display } from '@mui/system'\n+\n+import FormLabel from '../form-label/FormLabel'\n+import {\n+    hrManager,\n+    manager,\n+    others,\n+    subordinate\n+} from '../insights-graph/styled'\n+import { HR_MANAGER, MANAGER, OTHERS, SUBORDINATE } from '../types/initiated.by'\n+import { Series } from '../types/insights.response'\n+import { filterInsightsByRole } from '../utils'\n+import { CenterLabels } from './styled'\n+\n+type Props = {\n+    setFilteredView: (value: Series[]) => void\n+    initiatedBy: Series[]\n+}\n+\n+const defaultFilter: Filter = {\n+    manager: { value: MANAGER, checked: true },\n+    hrManager: { value: HR_MANAGER, checked: true },\n+    subordinate: { value: SUBORDINATE, checked: true },\n+    others: { value: OTHERS, checked: true }\n+}\n+\n+const InsightsFilter: FC<Props> = ({ setFilteredView, initiatedBy }) => {\n+    const [selectedFilter, setSelectedFilter] = useState<Filter>(defaultFilter)\n+    const { t } = useTranslation('hr-insights')\n+\n+    useEffect(() => {\n+        setFilteredView(filterInsightsByRole(initiatedBy, selectedFilter))\n+    }, [selectedFilter])\n+\n+    const filterLabels: FilterLabels[] = [",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1632710601",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "public/locales/en/cancel-alert.json",
//         "line": null,
//         "comment": "this file no more needed",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -0,0 +1,5 @@\n+{\n+  \"delete-template\": \"Delete Template\",\n+  \"delete-confirm-txt\": \"Are you sure you want to delete this template?\",\n+  \"Cancel\": \"Cancel\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1632733550",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/Components/ErrorMessage/InsightsError.tsx",
//         "line": 27,
//         "comment": "This is for the Reload button that comes when any request fails.\r\n\r\n <Button onClick={retry} variant='contained'>\r\n ",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -0,0 +1,48 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Button } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { getInsightsData } from '../../services/insights'\n+import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n+\n+type Props = {\n+    errorMessage1: string\n+    errorMessage2: string\n+    selectedPeriod: number\n+    setError: (error: boolean) => void\n+}\n+\n+const InsightsError: FC<Props> = ({\n+    errorMessage1,\n+    errorMessage2,\n+    selectedPeriod,\n+    setError\n+}) => {\n+    const { t } = useTranslation('hr-insights')\n+\n+    const retry = () => {\n+        getInsightsData(selectedPeriod, setError)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1633001087",
//         "author": "u-arora"
//     },
//     {
//         "file": "package.json",
//         "line": null,
//         "comment": "removed",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -76,5 +76,6 @@\n             \"eslint\",\n             \"prettier --check\"\n         ]\n-    }\n+    },\n+    \"packageManager\": \"pnpm@9.0.6+sha1.648f6014eb363abb36618f2ba59282a9eeb3e879\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1633019515",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/Utils.ts",
//         "line": null,
//         "comment": "done",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -105,3 +98,60 @@ export const prepareDataForBarChart = (\n         months\n     }\n }\n+\n+/**\n+ * Updates the state of the checkbox based on the value.\n+ *\n+ * @param value number (1 to 4) based on the which checkbox is (checked/unchecked).\n+ * @param checked boolean(checked or unchecked).\n+ * @param selectedFilter current filter state.\n+ * @returns\n+ */\n+export const handleCheckBoxStates = (\n+    value: number,\n+    checked: boolean,\n+    selectedFilter: Filter\n+): Filter => {\n+    const filterToUpdate: { [key: number]: string } = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1634289621",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/insights-filter/InsightsFilter.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -0,0 +1,79 @@\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { FormControl, RadioGroup } from '@mui/material'\n+import { display } from '@mui/system'\n+\n+import FormLabel from '../form-label/FormLabel'\n+import {\n+    hrManager,\n+    manager,\n+    others,\n+    subordinate\n+} from '../insights-graph/styled'\n+import { HR_MANAGER, MANAGER, OTHERS, SUBORDINATE } from '../types/initiated.by'\n+import { Series } from '../types/insights.response'\n+import { filterInsightsByRole } from '../utils'\n+import { CenterLabels } from './styled'\n+\n+type Props = {\n+    setFilteredView: (value: Series[]) => void\n+    initiatedBy: Series[]\n+}\n+\n+const defaultFilter: Filter = {\n+    manager: { value: MANAGER, checked: true },\n+    hrManager: { value: HR_MANAGER, checked: true },\n+    subordinate: { value: SUBORDINATE, checked: true },\n+    others: { value: OTHERS, checked: true }\n+}\n+\n+const InsightsFilter: FC<Props> = ({ setFilteredView, initiatedBy }) => {\n+    const [selectedFilter, setSelectedFilter] = useState<Filter>(defaultFilter)\n+    const { t } = useTranslation('hr-insights')\n+\n+    useEffect(() => {\n+        setFilteredView(filterInsightsByRole(initiatedBy, selectedFilter))\n+    }, [selectedFilter])\n+\n+    const filterLabels: FilterLabels[] = [",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1634333627",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/Utils.ts",
//         "line": null,
//         "comment": "done",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -105,3 +98,60 @@ export const prepareDataForBarChart = (\n         months\n     }\n }\n+\n+/**\n+ * Updates the state of the checkbox based on the value.\n+ *\n+ * @param value number (1 to 4) based on the which checkbox is (checked/unchecked).\n+ * @param checked boolean(checked or unchecked).\n+ * @param selectedFilter current filter state.\n+ * @returns\n+ */\n+export const handleCheckBoxStates = (\n+    value: number,\n+    checked: boolean,\n+    selectedFilter: Filter\n+): Filter => {\n+    const filterToUpdate: { [key: number]: string } = {\n+        [MANAGER]: 'manager',\n+        [HR_MANAGER]: 'hrManager',\n+        [SUBORDINATE]: 'subordinate',\n+        [OTHERS]: 'others'\n+    }\n+\n+    const fieldToUpdate = filterToUpdate[value]\n+    if (!fieldToUpdate) {\n+        return selectedFilter\n+    }\n+\n+    return {\n+        ...selectedFilter,\n+        [fieldToUpdate]: { checked, value }\n+    }\n+}\n+\n+/**\n+ * Filters the insights data based on the roles selected.\n+ *\n+ * @param initiatedBy meeting initiated by different roles in different months and their label color.\n+ * @param roles provides value for which roles to be filtered.\n+ * @returns updated filter view.\n+ */\n+export const filterInsightsByRole = (\n+    initiatedBy: Series[],\n+    roles: Filter\n+): Series[] => {\n+    const roleColors: { [key: string]: boolean } = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1634362839",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/form-label/FormLabel.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "a8716ce8424867de9a8a62f0565b12a39fdc7c13",
//         "codeSnippet": "@@ -0,0 +1,64 @@\n+import { FC, useEffect, useState } from 'react'\n+\n+import { FormControlLabel } from '@mui/material'\n+import Checkbox from '@mui/material/Checkbox'\n+\n+import { handleCheckBoxStates } from '../utils'\n+\n+type Props = {\n+    label: string\n+    color: string\n+    initiatedBy: number\n+    selectedFilter: Filter\n+    setSelectedFilter: (value: Filter) => void\n+}\n+\n+const FormLabel: FC<Props> = ({\n+    label,\n+    color,\n+    initiatedBy,\n+    selectedFilter,\n+    setSelectedFilter\n+}) => {\n+    useEffect(() => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/9#discussion_r1634533860",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "228327c3f109f5acb4442b24f0b4c1fb6320d97c",
//         "codeSnippet": "@@ -22,46 +27,91 @@ const TemplateOverview: FC = () => {\n     const navigate = useNavigate()\n     const [menuState, setMenuState] = useState<Nullable<Open>>(null)\n     const [templates, setTemplates] = useState<Template[]>([])\n+    const [showEmptyView, setShowEmptyView] = useState(false)\n+    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)\n \n-    const handleClick = (templateId?: string) => {\n-        navigate(['templates', templateId].filter(Boolean).join('/'))\n-    }\n+    const { createSnack } = useSnackbar()\n+    const handleClick = useCallback(\n+        (templateId?: string) => {\n+            navigate(['templates', templateId].filter(Boolean).join('/'))\n+        },\n+        [navigate]\n+    )\n \n-    const handleOpen = (templateId: string) => {\n-        return (event: React.MouseEvent<HTMLElement>) => {\n+    const handleOpen = useCallback(\n+        (templateId: string) => (event: React.MouseEvent<HTMLElement>) => {\n             event.stopPropagation()\n             setMenuState({\n                 anchorEl: event.currentTarget,\n                 templateId\n             })\n-        }\n-    }\n+        },\n+        []\n+    )\n \n-    const handleDuplicate = () => {\n-        setMenuState(null)\n-    }\n+    const handleDuplicate = useCallback(\n+        (event: React.MouseEvent<HTMLElement>) => {\n+            event.stopPropagation()\n+            setMenuState(null)\n+        },\n+        []\n+    )\n \n     const handleDelete = useCallback(() => {\n-        if (menuState) {\n-            deleteTemplateById(menuState.templateId).then(() =>\n-                setTemplates((prevTemplates) => {\n-                    return prevTemplates.filter(\n-                        (template) =>\n-                            template.templateId !== menuState.templateId\n-                    )\n+        setDeleteDialogOpen(true)\n+    }, [])\n+\n+    const handleConfirmDelete = (action: boolean) => {\n+        if (action && menuState) {\n+            const backupTemplates = [...templates]\n+            setTemplates((prevTemplates) => {\n+                setMenuState(null)\n+                // If there is only one template, show empty view quickly\n+                if (templates.length - 1 === 0) {\n+                    setShowEmptyView(true)\n+                }\n+                return prevTemplates.filter(\n+                    (template) => template.templateId !== menuState.templateId\n+                )\n+            })\n+            deleteTemplateById(menuState.templateId)\n+                .then(() =>\n+                    createSnack({\n+                        autoHideDuration: 3000,\n+                        alert: {\n+                            severity: 'success'\n+                        },\n+                        showCloseIcon: true\n+                    })(t('delete-success'))\n+                )\n+                .catch(() => {\n+                    setMenuState(null)\n+                    setShowEmptyView(false) // If deletion fails, show the templates again",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/6#discussion_r1634556640",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "azure-pipelines.yml",
//         "line": 4,
//         "comment": "I think we have `main` 👀",
//         "commitId": "5dd20bf7b89e135aec389b9810b498925f766635",
//         "codeSnippet": "@@ -0,0 +1,42 @@\n+trigger:\n+  paths:\n+    include:\n+    - master ",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/10#discussion_r1634585139",
//         "author": "amalpotra"
//     },
//     {
//         "file": "azure-pipelines.yml",
//         "line": 4,
//         "comment": "I know I am changing it",
//         "commitId": "5dd20bf7b89e135aec389b9810b498925f766635",
//         "codeSnippet": "@@ -0,0 +1,42 @@\n+trigger:\n+  paths:\n+    include:\n+    - master ",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/10#discussion_r1635905939",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/insights-graph/InsightsGraph.tsx",
//         "line": 22,
//         "comment": "not able to move it outside. causing some error",
//         "commitId": "e0de93db41faad23ede57c88575a889429f3866e",
//         "codeSnippet": "@@ -14,11 +14,19 @@ type Props = {\n }\n \n const InsightsGraph: React.FC<Props> = ({ insightsResponse }) => {\n-    const [selectedPeriodData, setSelectedPeriodData] = useState<string[]>()\n+    const [selectedPeriodData, setSelectedPeriodData] = useState<string[]>([])\n     const [initiatedBy, setInitiatedBy] = useState<Series[]>()\n     const [filteredView, setFilteredView] = useState<Series[]>()\n     const { t } = useTranslation('hr-insights')\n \n+    const xAxisConfig: AxisConfig<'band'> = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/14#discussion_r1637744193",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/Components/ErrorMessage/InsightsError.tsx",
//         "line": null,
//         "comment": "You should pass the entire onRetry method instead :D ",
//         "commitId": "e0de93db41faad23ede57c88575a889429f3866e",
//         "codeSnippet": "@@ -5,26 +5,30 @@ import { Button } from '@mui/material'\n import { Box } from '@mui/system'\n \n import Group from '../../assets/Group.svg'\n-import { getInsightsData } from '../../services/insights'\n+import { InsightsResponse, getInsightsData } from '../../services/insights'\n import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n \n type Props = {\n     errorMessage1: string\n     errorMessage2: string\n     selectedPeriod: number\n     setError: (error: boolean) => void\n+    setInsightsResponse: (insightsResponse: InsightsResponse) => void\n }\n \n const InsightsError: FC<Props> = ({\n     errorMessage1,\n     errorMessage2,\n     selectedPeriod,\n-    setError\n+    setError,\n+    setInsightsResponse\n }) => {\n     const { t } = useTranslation('hr-insights')\n \n     const retry = () => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/14#discussion_r1637790454",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/ErrorMessage/InsightsError.tsx",
//         "line": null,
//         "comment": "Oh, I didnt notice. Passing setError callback to a service is BAAAAAD :D You have to deal with this in the component. .catch((err) => yeah",
//         "commitId": "e0de93db41faad23ede57c88575a889429f3866e",
//         "codeSnippet": "@@ -5,26 +5,30 @@ import { Button } from '@mui/material'\n import { Box } from '@mui/system'\n \n import Group from '../../assets/Group.svg'\n-import { getInsightsData } from '../../services/insights'\n+import { InsightsResponse, getInsightsData } from '../../services/insights'\n import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n \n type Props = {\n     errorMessage1: string\n     errorMessage2: string\n     selectedPeriod: number\n     setError: (error: boolean) => void\n+    setInsightsResponse: (insightsResponse: InsightsResponse) => void\n }\n \n const InsightsError: FC<Props> = ({\n     errorMessage1,\n     errorMessage2,\n     selectedPeriod,\n-    setError\n+    setError,\n+    setInsightsResponse\n }) => {\n     const { t } = useTranslation('hr-insights')\n \n     const retry = () => {\n-        getInsightsData(selectedPeriod, setError)\n+        getInsightsData(selectedPeriod, setError).then(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/14#discussion_r1637792283",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/ErrorMessage/InsightsError.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "e0de93db41faad23ede57c88575a889429f3866e",
//         "codeSnippet": "@@ -5,26 +5,30 @@ import { Button } from '@mui/material'\n import { Box } from '@mui/system'\n \n import Group from '../../assets/Group.svg'\n-import { getInsightsData } from '../../services/insights'\n+import { InsightsResponse, getInsightsData } from '../../services/insights'\n import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n \n type Props = {\n     errorMessage1: string\n     errorMessage2: string\n     selectedPeriod: number\n     setError: (error: boolean) => void\n+    setInsightsResponse: (insightsResponse: InsightsResponse) => void\n }\n \n const InsightsError: FC<Props> = ({\n     errorMessage1,\n     errorMessage2,\n     selectedPeriod,\n-    setError\n+    setError,\n+    setInsightsResponse\n }) => {\n     const { t } = useTranslation('hr-insights')\n \n     const retry = () => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/14#discussion_r1637969033",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1.tsx",
//         "line": null,
//         "comment": "specific type should be used :)",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -24,51 +32,151 @@ type Props = {\n \n const Step1: FC<Props> = ({ state }) => {\n     const { t } = useTranslation('template-details')\n-    const { handleChange } = useTemplate()\n+    const { handleChange, roles } = useTemplate()\n     const debounced = useCallback(debounce(handleChange, 500), [])\n     const hc = (key: keyof TemplateRequest) => {\n         return (e: ChangeEvent<HTMLInputElement>) => {\n             debounced(key, e.target.value)\n         }\n     }\n \n+    const handleChangeRole = (e: unknown, role: Nullable<Role>) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638002368",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1.tsx",
//         "line": null,
//         "comment": "we can use a const for this as it is used multiple times.\r\nstate.template.availableForRoles.filter((id) => id !== role.roleId)\r\n                    \r\n                    ",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -24,51 +32,151 @@ type Props = {\n \n const Step1: FC<Props> = ({ state }) => {\n     const { t } = useTranslation('template-details')\n-    const { handleChange } = useTemplate()\n+    const { handleChange, roles } = useTemplate()\n     const debounced = useCallback(debounce(handleChange, 500), [])\n     const hc = (key: keyof TemplateRequest) => {\n         return (e: ChangeEvent<HTMLInputElement>) => {\n             debounced(key, e.target.value)\n         }\n     }\n \n+    const handleChangeRole = (e: unknown, role: Nullable<Role>) => {\n+        if (!role) return\n+        if (role.customRole) {\n+            handleChange('availableForCustomRoles', [\n+                ...state.template.availableForCustomRoles,\n+                role.roleId\n+            ])\n+\n+            return\n+        }\n+\n+        handleChange('availableForRoles', [\n+            ...state.template.availableForRoles,\n+            role.roleId\n+        ])\n+    }\n+\n+    const handleDeleteRole = (role: Role) => {\n+        if (role.customRole) {\n+            handleChange(\n+                'availableForCustomRoles',\n+                state.template.availableForCustomRoles.filter(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638005588",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1.tsx",
//         "line": null,
//         "comment": "unknown is actually \"specific\" in cases you dont need the param :-D Cause the compiler will not let you do anything with it making it very safe to use ",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -24,51 +32,151 @@ type Props = {\n \n const Step1: FC<Props> = ({ state }) => {\n     const { t } = useTranslation('template-details')\n-    const { handleChange } = useTemplate()\n+    const { handleChange, roles } = useTemplate()\n     const debounced = useCallback(debounce(handleChange, 500), [])\n     const hc = (key: keyof TemplateRequest) => {\n         return (e: ChangeEvent<HTMLInputElement>) => {\n             debounced(key, e.target.value)\n         }\n     }\n \n+    const handleChangeRole = (e: unknown, role: Nullable<Role>) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638007407",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1.tsx",
//         "line": null,
//         "comment": "Its not really, its availableForCustomRoles and availableForRoles :P ",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -24,51 +32,151 @@ type Props = {\n \n const Step1: FC<Props> = ({ state }) => {\n     const { t } = useTranslation('template-details')\n-    const { handleChange } = useTemplate()\n+    const { handleChange, roles } = useTemplate()\n     const debounced = useCallback(debounce(handleChange, 500), [])\n     const hc = (key: keyof TemplateRequest) => {\n         return (e: ChangeEvent<HTMLInputElement>) => {\n             debounced(key, e.target.value)\n         }\n     }\n \n+    const handleChangeRole = (e: unknown, role: Nullable<Role>) => {\n+        if (!role) return\n+        if (role.customRole) {\n+            handleChange('availableForCustomRoles', [\n+                ...state.template.availableForCustomRoles,\n+                role.roleId\n+            ])\n+\n+            return\n+        }\n+\n+        handleChange('availableForRoles', [\n+            ...state.template.availableForRoles,\n+            role.roleId\n+        ])\n+    }\n+\n+    const handleDeleteRole = (role: Role) => {\n+        if (role.customRole) {\n+            handleChange(\n+                'availableForCustomRoles',\n+                state.template.availableForCustomRoles.filter(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638010220",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1.tsx",
//         "line": null,
//         "comment": "can we do it like this for not using filter again and again? :) \r\n\r\nconst selectedRoles = useMemo(() => {\r\n    const customRoles = roles.filter(role => \r\n        role.customRole && state.template.availableForCustomRoles.includes(role.roleId)\r\n    );\r\n    const predefinedRoles = roles.filter(role => \r\n        !role.customRole && state.template.availableForRoles.includes(role.roleId)\r\n    );\r\n    return [...customRoles, ...predefinedRoles];\r\n}, [roles, state.template.availableForCustomRoles, state.template.availableForRoles]);\r\n",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -24,51 +32,151 @@ type Props = {\n \n const Step1: FC<Props> = ({ state }) => {\n     const { t } = useTranslation('template-details')\n-    const { handleChange } = useTemplate()\n+    const { handleChange, roles } = useTemplate()\n     const debounced = useCallback(debounce(handleChange, 500), [])\n     const hc = (key: keyof TemplateRequest) => {\n         return (e: ChangeEvent<HTMLInputElement>) => {\n             debounced(key, e.target.value)\n         }\n     }\n \n+    const handleChangeRole = (e: unknown, role: Nullable<Role>) => {\n+        if (!role) return\n+        if (role.customRole) {\n+            handleChange('availableForCustomRoles', [\n+                ...state.template.availableForCustomRoles,\n+                role.roleId\n+            ])\n+\n+            return\n+        }\n+\n+        handleChange('availableForRoles', [\n+            ...state.template.availableForRoles,\n+            role.roleId\n+        ])\n+    }\n+\n+    const handleDeleteRole = (role: Role) => {\n+        if (role.customRole) {\n+            handleChange(\n+                'availableForCustomRoles',\n+                state.template.availableForCustomRoles.filter(\n+                    (id) => id !== role.roleId\n+                )\n+            )\n+\n+            return\n+        }\n+\n+        handleChange(\n+            'availableForRoles',\n+            state.template.availableForRoles.filter((id) => id !== role.roleId)\n+        )\n+    }\n+\n+    const selectedRoles = useMemo(\n+        () => [\n+            ...roles\n+                .filter((role) => role.customRole)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638011567",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/useTemplate.ts",
//         "line": 70,
//         "comment": " console.log(key, value)\r\n \r\n remove this ?? XD",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -56,8 +62,45 @@ const useTemplate = () => {\n             }\n         })\n     }\n-\n     const handleChangeSection = (sectionId: string) => {\n+        return <K extends keyof TopicById, V extends TopicById[K]>(\n+            key: K,\n+            value: V\n+        ) => {\n+            console.log(key, value)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638017283",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1.tsx",
//         "line": null,
//         "comment": "I see your point. I can do it ",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -24,51 +32,151 @@ type Props = {\n \n const Step1: FC<Props> = ({ state }) => {\n     const { t } = useTranslation('template-details')\n-    const { handleChange } = useTemplate()\n+    const { handleChange, roles } = useTemplate()\n     const debounced = useCallback(debounce(handleChange, 500), [])\n     const hc = (key: keyof TemplateRequest) => {\n         return (e: ChangeEvent<HTMLInputElement>) => {\n             debounced(key, e.target.value)\n         }\n     }\n \n+    const handleChangeRole = (e: unknown, role: Nullable<Role>) => {\n+        if (!role) return\n+        if (role.customRole) {\n+            handleChange('availableForCustomRoles', [\n+                ...state.template.availableForCustomRoles,\n+                role.roleId\n+            ])\n+\n+            return\n+        }\n+\n+        handleChange('availableForRoles', [\n+            ...state.template.availableForRoles,\n+            role.roleId\n+        ])\n+    }\n+\n+    const handleDeleteRole = (role: Role) => {\n+        if (role.customRole) {\n+            handleChange(\n+                'availableForCustomRoles',\n+                state.template.availableForCustomRoles.filter(\n+                    (id) => id !== role.roleId\n+                )\n+            )\n+\n+            return\n+        }\n+\n+        handleChange(\n+            'availableForRoles',\n+            state.template.availableForRoles.filter((id) => id !== role.roleId)\n+        )\n+    }\n+\n+    const selectedRoles = useMemo(\n+        () => [\n+            ...roles\n+                .filter((role) => role.customRole)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638021085",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/services/template/service.ts",
//         "line": 14,
//         "comment": "Should we handle error here only? Because with this we need to handle failed request everywhere we call it.",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -4,17 +4,25 @@ import { getData } from '../../utils/axios'\n import patchMapping from './patchMapping'\n import { Template, TemplateById, TemplateRequest } from './types'\n \n-const createTemplate = (templateData: Template) => {\n-    return new Promise((resolve, reject) => {\n-        axios\n-            .post('/onetooneservice/v2/onetoonetemplates', templateData)\n-            .then((response) => {\n-                resolve(response.data)\n-            })\n-            .catch((error) => {\n-                reject(error)\n-            })\n+const createTemplate = (templateData: Partial<Template>) => {\n+    return axios\n+        .post<TemplateById>(\n+            '/onetooneservice/v2/onetoonetemplates',\n+            templateData\n+        )\n+        .then(getData)\n+}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638021866",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/useTemplate.ts",
//         "line": 70,
//         "comment": "Wops",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -56,8 +62,45 @@ const useTemplate = () => {\n             }\n         })\n     }\n-\n     const handleChangeSection = (sectionId: string) => {\n+        return <K extends keyof TopicById, V extends TopicById[K]>(\n+            key: K,\n+            value: V\n+        ) => {\n+            console.log(key, value)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638022955",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/services/template/service.ts",
//         "line": 14,
//         "comment": "Nono, never in service files ",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -4,17 +4,25 @@ import { getData } from '../../utils/axios'\n import patchMapping from './patchMapping'\n import { Template, TemplateById, TemplateRequest } from './types'\n \n-const createTemplate = (templateData: Template) => {\n-    return new Promise((resolve, reject) => {\n-        axios\n-            .post('/onetooneservice/v2/onetoonetemplates', templateData)\n-            .then((response) => {\n-                resolve(response.data)\n-            })\n-            .catch((error) => {\n-                reject(error)\n-            })\n+const createTemplate = (templateData: Partial<Template>) => {\n+    return axios\n+        .post<TemplateById>(\n+            '/onetooneservice/v2/onetoonetemplates',\n+            templateData\n+        )\n+        .then(getData)\n+}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638023507",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1.tsx",
//         "line": null,
//         "comment": "OOPS",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -24,51 +32,151 @@ type Props = {\n \n const Step1: FC<Props> = ({ state }) => {\n     const { t } = useTranslation('template-details')\n-    const { handleChange } = useTemplate()\n+    const { handleChange, roles } = useTemplate()\n     const debounced = useCallback(debounce(handleChange, 500), [])\n     const hc = (key: keyof TemplateRequest) => {\n         return (e: ChangeEvent<HTMLInputElement>) => {\n             debounced(key, e.target.value)\n         }\n     }\n \n+    const handleChangeRole = (e: unknown, role: Nullable<Role>) => {\n+        if (!role) return\n+        if (role.customRole) {\n+            handleChange('availableForCustomRoles', [\n+                ...state.template.availableForCustomRoles,\n+                role.roleId\n+            ])\n+\n+            return\n+        }\n+\n+        handleChange('availableForRoles', [\n+            ...state.template.availableForRoles,\n+            role.roleId\n+        ])\n+    }\n+\n+    const handleDeleteRole = (role: Role) => {\n+        if (role.customRole) {\n+            handleChange(\n+                'availableForCustomRoles',\n+                state.template.availableForCustomRoles.filter(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638026260",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1.tsx",
//         "line": null,
//         "comment": "Generally we use  _ for the variable we are not using.",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -24,51 +32,151 @@ type Props = {\n \n const Step1: FC<Props> = ({ state }) => {\n     const { t } = useTranslation('template-details')\n-    const { handleChange } = useTemplate()\n+    const { handleChange, roles } = useTemplate()\n     const debounced = useCallback(debounce(handleChange, 500), [])\n     const hc = (key: keyof TemplateRequest) => {\n         return (e: ChangeEvent<HTMLInputElement>) => {\n             debounced(key, e.target.value)\n         }\n     }\n \n+    const handleChangeRole = (e: unknown, role: Nullable<Role>) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638040524",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": 23,
//         "comment": "we should add error handling for this :-}",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -1,31 +1,36 @@\n import React, { useMemo, useState } from 'react'\n import { useTranslation } from 'react-i18next'\n+import { useNavigate } from 'react-router-dom'\n \n import { Layout } from '@catalystone/react-core-ui'\n-import { Tab } from '@catalystone/react-core-ui/dist/Layout/TabsLayout'\n-import { ButtonProps } from '@catalystone/react-core-ui/dist/Layout/TopSection/Buttons'\n \n+import { createTemplate } from '../../services/template'\n import HrInsights from './hr-insights/HrInsights'\n import TemplateOverview from './template-overview/TemplateOverview'\n \n const AdministrationLandingPage: React.FC = () => {\n     const { t } = useTranslation('template-overview')\n+    const navigate = useNavigate()\n     const [selected, setSelected] = useState(0)\n-    const tabs: Tab[] = useMemo(\n+    const tabs = useMemo(\n         () => [{ name: t('templates') }, { name: t('insights') }],\n         []\n     )\n \n     const createNewTemplateButton = {\n-        label: t('create-new-btn'),\n-        onClick: () => {},\n-        variant: 'contained'\n-    } as ButtonProps\n+        label: t('create-new-btn') as string,\n+        onClick: () => {\n+            createTemplate({ templateName: 'Untitled template' }).then(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638044229",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1.tsx",
//         "line": null,
//         "comment": "Can do that. Often eslint people put in illegal _ :P ",
//         "commitId": "b6862f45e0155edb8c77b25ccc1fd951e52e9201",
//         "codeSnippet": "@@ -24,51 +32,151 @@ type Props = {\n \n const Step1: FC<Props> = ({ state }) => {\n     const { t } = useTranslation('template-details')\n-    const { handleChange } = useTemplate()\n+    const { handleChange, roles } = useTemplate()\n     const debounced = useCallback(debounce(handleChange, 500), [])\n     const hc = (key: keyof TemplateRequest) => {\n         return (e: ChangeEvent<HTMLInputElement>) => {\n             debounced(key, e.target.value)\n         }\n     }\n \n+    const handleChangeRole = (e: unknown, role: Nullable<Role>) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/15#discussion_r1638072441",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/ErrorMessage/InsightsError.tsx",
//         "line": 19,
//         "comment": "Just call it retry? :P That way we know what its being used for :P Its also a on function cause it doesnt actually do anything directly ",
//         "commitId": "e0de93db41faad23ede57c88575a889429f3866e",
//         "codeSnippet": "@@ -5,40 +5,29 @@ import { Button } from '@mui/material'\n import { Box } from '@mui/system'\n \n import Group from '../../assets/Group.svg'\n-import { InsightsResponse, getInsightsData } from '../../services/insights'\n import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n \n type Props = {\n     errorMessage1: string\n     errorMessage2: string\n-    selectedPeriod: number\n-    setError: (error: boolean) => void\n-    setInsightsResponse: (insightsResponse: InsightsResponse) => void\n+    fetchInsightsData: () => void\n }\n \n const InsightsError: FC<Props> = ({\n     errorMessage1,\n     errorMessage2,\n-    selectedPeriod,\n-    setError,\n-    setInsightsResponse\n+    fetchInsightsData",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/14#discussion_r1639942656",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/ErrorMessage/InsightsError.tsx",
//         "line": 19,
//         "comment": "will change",
//         "commitId": "e0de93db41faad23ede57c88575a889429f3866e",
//         "codeSnippet": "@@ -5,40 +5,29 @@ import { Button } from '@mui/material'\n import { Box } from '@mui/system'\n \n import Group from '../../assets/Group.svg'\n-import { InsightsResponse, getInsightsData } from '../../services/insights'\n import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n \n type Props = {\n     errorMessage1: string\n     errorMessage2: string\n-    selectedPeriod: number\n-    setError: (error: boolean) => void\n-    setInsightsResponse: (insightsResponse: InsightsResponse) => void\n+    fetchInsightsData: () => void\n }\n \n const InsightsError: FC<Props> = ({\n     errorMessage1,\n     errorMessage2,\n-    selectedPeriod,\n-    setError,\n-    setInsightsResponse\n+    fetchInsightsData",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/14#discussion_r1642209501",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/myself-landing-page/MyselfLandingPage.tsx",
//         "line": null,
//         "comment": "pls remove this.",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,37 @@\n+import React, { useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Layout } from '@catalystone/react-core-ui'\n+\n+import HrInsights from '../administration-landing-page/hr-insights/HrInsights'\n+import OneToOne from './one-to-one/OneToOne'\n+\n+const MyselfLandingPage: React.FC = () => {\n+    console.log('MySelfLandingPage.tsx')",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1642713905",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/myself-landing-page/MyselfLandingPage.tsx",
//         "line": null,
//         "comment": "use separate JSON file for translations :)",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,37 @@\n+import React, { useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Layout } from '@catalystone/react-core-ui'\n+\n+import HrInsights from '../administration-landing-page/hr-insights/HrInsights'\n+import OneToOne from './one-to-one/OneToOne'\n+\n+const MyselfLandingPage: React.FC = () => {\n+    console.log('MySelfLandingPage.tsx')\n+    const { t } = useTranslation('template-overview')",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1642715453",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/myself-landing-page/MyselfLandingPage.tsx",
//         "line": null,
//         "comment": "never write future code.",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,37 @@\n+import React, { useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Layout } from '@catalystone/react-core-ui'\n+\n+import HrInsights from '../administration-landing-page/hr-insights/HrInsights'\n+import OneToOne from './one-to-one/OneToOne'\n+\n+const MyselfLandingPage: React.FC = () => {\n+    console.log('MySelfLandingPage.tsx')\n+    const { t } = useTranslation('template-overview')\n+    const [selected, setSelected] = useState(0)\n+    const tabs = useMemo(\n+        () => [{ name: t('One to ones') }, { name: t('To-dos') }],\n+        []\n+    )\n+\n+    const handleNew = () => {}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1642716376",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/myself-landing-page/one-to-one/MeetingsTable.tsx",
//         "line": null,
//         "comment": "All the css should be in styled file.",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,71 @@\n+// src/components/UserTable.tsx\n+import React from 'react'\n+\n+import {\n+    Box,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Typography,\n+    Avatar,\n+    Checkbox\n+} from '@mui/material'\n+\n+import { users } from './MockData'\n+\n+const MeetingsTable: React.FC = () => {\n+    return (\n+        <TableContainer\n+            sx={{\n+                boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n+                border: '1px solid #ccc'\n+            }}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1642718006",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/myself-landing-page/one-to-one/MeetingsTable.tsx",
//         "line": null,
//         "comment": "- we use Box in mui no divs \r\n- add classes to styled file \r\n- component can be separated into multiple small components :)",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,71 @@\n+// src/components/UserTable.tsx\n+import React from 'react'\n+\n+import {\n+    Box,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Typography,\n+    Avatar,\n+    Checkbox\n+} from '@mui/material'\n+\n+import { users } from './MockData'\n+\n+const MeetingsTable: React.FC = () => {\n+    return (\n+        <TableContainer\n+            sx={{\n+                boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n+                border: '1px solid #ccc'\n+            }}\n+        >\n+            <Table>\n+                <TableHead>\n+                    <TableRow>\n+                        <TableCell padding='checkbox'>\n+                            <Checkbox />\n+                        </TableCell>\n+                        <TableCell>Start 1:1 With</TableCell>\n+                        <TableCell>Latest Completed</TableCell>\n+                        <TableCell>Status</TableCell>\n+                    </TableRow>\n+                </TableHead>\n+                <TableBody>\n+                    {users.map((user) => (\n+                        <TableRow key={user.name}>\n+                            <TableCell padding='checkbox'>\n+                                <Checkbox />\n+                            </TableCell>\n+                            <TableCell>\n+                                <Box display='flex' alignItems='center'>\n+                                    <Avatar>{user.initials}</Avatar>\n+                                    <Typography ml={2}>{user.name}</Typography>\n+                                </Box>\n+                            </TableCell>\n+                            <TableCell>{user.latestCompleted}</TableCell>\n+                            <TableCell>\n+                                <div\n+                                    style={{\n+                                        backgroundColor: 'lightblue',\n+                                        borderRadius: '25px',\n+                                        padding: '5px',\n+                                        textAlign: 'center' // Add this line to align the content in the center\n+                                    }}\n+                                >\n+                                    {user.status}\n+                                </div>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1642719955",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/Router/Router.tsx",
//         "line": null,
//         "comment": "Structure for this dashboard is like \r\n\r\n                          Overview (parent)\r\nOneToOneOverview (child 1)  TodoOverview  (child 2)\r\n\r\nyou can use the following naming for components",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -8,12 +8,14 @@ const AdministrationLandingPage = lazy(\n     () => import('../features/administration-landing-page')\n )\n const TemplateDetails = lazy(() => import('../features/template-details'))\n+const MyselfLandingPage = lazy(() => import('../features/myself-landing-page'))\n \n const routes = [\n     { path: '/', Component: AdministrationLandingPage },\n     { path: '/hr-overview', Component: AdministrationLandingPage },\n     { path: '/templates/:id?', Component: TemplateDetails },\n-    { path: '*', Component: Navigate }\n+    { path: '*', Component: Navigate },\n+    { path: '/myself', Component: MyselfLandingPage }",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1642727169",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/myself-landing-page/MyselfLandingPage.tsx",
//         "line": null,
//         "comment": "Remove the insights component as todo component will be there.",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,37 @@\n+import React, { useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Layout } from '@catalystone/react-core-ui'\n+\n+import HrInsights from '../administration-landing-page/hr-insights/HrInsights'\n+import OneToOne from './one-to-one/OneToOne'\n+\n+const MyselfLandingPage: React.FC = () => {\n+    console.log('MySelfLandingPage.tsx')\n+    const { t } = useTranslation('template-overview')\n+    const [selected, setSelected] = useState(0)\n+    const tabs = useMemo(\n+        () => [{ name: t('One to ones') }, { name: t('To-dos') }],\n+        []\n+    )\n+\n+    const handleNew = () => {}\n+\n+    return (\n+        <Layout\n+            title={t('One to One')}\n+            actions={[{ label: t('Start New'), onClick: handleNew }]}\n+            layoutProps={{\n+                type: 'tabs',\n+                activeTab: selected,\n+                onClickTab: setSelected,\n+                tabs\n+            }}\n+        >\n+            {selected === 0 && <OneToOne />}\n+            {selected === 1 && <HrInsights />}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1642731603",
//         "author": "u-arora"
//     },
//     {
//         "file": "package-lock.json",
//         "line": 1,
//         "comment": "dont push this file. we are now using pnpm",
//         "commitId": "c7c1dce5fbaf69205a8d8f6898e949c5c9c17d5c",
//         "codeSnippet": "",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1653926934",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/insights-header/InsightsHeader.tsx",
//         "line": null,
//         "comment": "write meaningful comment if needed here",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -41,7 +41,7 @@ const InsightsHeader: FC<Props> = ({\n             <FormControl>\n                 <InputLabel>{t('period')}</InputLabel>\n                 <Select\n-                    data-test-dd-id='metrics-time-span-selector'\n+                    data-test-dd-id='metrics-time-span-selector' //???",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1653928760",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/Overview.tsx",
//         "line": null,
//         "comment": "is there any need for useMemo here as it is static and will not change",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,34 @@\n+import React, { useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Layout } from '@catalystone/react-core-ui'\n+\n+import OneToOneOverview from './onetoone-overview/OneToOneOverview'\n+import ToDoOverview from './todo-overview/ToDoOverview'\n+\n+const Overview: React.FC = () => {\n+    const { t } = useTranslation('overview')\n+    const [selected, setSelected] = useState(0)\n+    const tabs = useMemo(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1653937453",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/FilterPanel.tsx",
//         "line": null,
//         "comment": "write with translation syntax t('apply') if it has any!",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,155 @@\n+import { FC, useState } from 'react'\n+\n+import FilterListIcon from '@mui/icons-material/FilterList'\n+import {\n+    Box,\n+    FormControl,\n+    FormGroup,\n+    FormControlLabel,\n+    Typography\n+} from '@mui/material'\n+\n+import {\n+    StyledButton,\n+    StyledIconButton,\n+    StyledCheckbox,\n+    StyledAccordionSummary,\n+    StyledAccordion,\n+    StyledArrowForwardIosSharpIcon,\n+    StyledAccordionDetails,\n+    StyledFormGroupBox\n+} from './styled'\n+import { RoleAndResponsibility } from './types'\n+\n+type Props = {\n+    roleAndResponsibility: RoleAndResponsibility\n+    setFilter: React.Dispatch<React.SetStateAction<string[]>>\n+    setIsFilterApplied: React.Dispatch<React.SetStateAction<boolean>>\n+}\n+\n+const filterOptions = [\n+    { label: 'My manager', value: 'manager' },\n+    { label: 'My employees', value: 'employee' },\n+    { label: 'My HR manager', value: 'hrManager' },\n+    { label: 'My HR employees', value: 'hrEmployees' },\n+    { label: 'Others', value: 'others' }\n+]\n+\n+const FilterPanel: FC<Props> = ({\n+    roleAndResponsibility,\n+    setFilter,\n+    setIsFilterApplied\n+}) => {\n+    const [tempFilter, setTempFilter] = useState<string[]>([])\n+    const [isApplyButtonDisabled, setIsApplyButtonDisabled] =\n+        useState<boolean>(true)\n+\n+    const [isApplyAndResetButtonVisible, setIsApplyAndResetButtonVisible] =\n+        useState<boolean>(false)\n+\n+    const handleCheckboxChange = (value: string) => {\n+        setTempFilter((prev) =>\n+            prev.includes(value)\n+                ? prev.filter((item) => item !== value)\n+                : [...prev, value]\n+        )\n+        setIsApplyAndResetButtonVisible(true)\n+        setIsApplyButtonDisabled(false)\n+    }\n+\n+    const handleApply = () => {\n+        const sudo: string[] = []\n+        if (tempFilter.length === 0) {\n+            setFilter([])\n+            setIsFilterApplied(false)\n+            setIsApplyButtonDisabled(true)\n+            return\n+        }\n+        tempFilter.forEach((key) => {\n+            if (roleAndResponsibility[key]) {\n+                sudo.push(...roleAndResponsibility[key])\n+            }\n+        })\n+        setFilter(sudo)\n+        setIsFilterApplied(true)\n+        setIsApplyButtonDisabled(true)\n+    }\n+\n+    const handleReset = () => {\n+        setTempFilter([])\n+        setFilter([])\n+        setIsFilterApplied(false)\n+        setIsApplyButtonDisabled(true)\n+        setIsApplyAndResetButtonVisible(false)\n+    }\n+\n+    return (\n+        <StyledAccordion defaultExpanded>\n+            <StyledAccordionSummary\n+                expandIcon={<StyledArrowForwardIosSharpIcon />}\n+            >\n+                <Typography variant='h6'>Meetings with</Typography>\n+            </StyledAccordionSummary>\n+            <StyledAccordionDetails>\n+                <FormControl component='fieldset' fullWidth>\n+                    <StyledFormGroupBox>\n+                        <FormGroup>\n+                            {filterOptions.map((option) => (\n+                                <FormControlLabel\n+                                    key={option.value}\n+                                    control={\n+                                        <StyledCheckbox\n+                                            disableRipple\n+                                            checked={tempFilter.includes(\n+                                                option.value\n+                                            )}\n+                                            onChange={() =>\n+                                                handleCheckboxChange(\n+                                                    option.value\n+                                                )\n+                                            }\n+                                        />\n+                                    }\n+                                    label={option.label}\n+                                />\n+                            ))}\n+                        </FormGroup>\n+                        {isApplyAndResetButtonVisible && (\n+                            <Box\n+                                mt={2}\n+                                display='flex'\n+                                justifyContent='center'\n+                                alignItems='center'\n+                                flexDirection='column'\n+                            >\n+                                <StyledIconButton\n+                                    onClick={handleApply}\n+                                    disabled={isApplyButtonDisabled}\n+                                >\n+                                    <Box\n+                                        display='flex'\n+                                        justifyContent='center'\n+                                        alignItems='center'\n+                                        flexDirection='column'\n+                                    >\n+                                        <FilterListIcon />\n+                                        <Typography>Apply</Typography>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1653973216",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/FilterPanel.tsx",
//         "line": null,
//         "comment": "check for any translation here if needed!",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,155 @@\n+import { FC, useState } from 'react'\n+\n+import FilterListIcon from '@mui/icons-material/FilterList'\n+import {\n+    Box,\n+    FormControl,\n+    FormGroup,\n+    FormControlLabel,\n+    Typography\n+} from '@mui/material'\n+\n+import {\n+    StyledButton,\n+    StyledIconButton,\n+    StyledCheckbox,\n+    StyledAccordionSummary,\n+    StyledAccordion,\n+    StyledArrowForwardIosSharpIcon,\n+    StyledAccordionDetails,\n+    StyledFormGroupBox\n+} from './styled'\n+import { RoleAndResponsibility } from './types'\n+\n+type Props = {\n+    roleAndResponsibility: RoleAndResponsibility\n+    setFilter: React.Dispatch<React.SetStateAction<string[]>>\n+    setIsFilterApplied: React.Dispatch<React.SetStateAction<boolean>>\n+}\n+\n+const filterOptions = [\n+    { label: 'My manager', value: 'manager' },\n+    { label: 'My employees', value: 'employee' },\n+    { label: 'My HR manager', value: 'hrManager' },\n+    { label: 'My HR employees', value: 'hrEmployees' },\n+    { label: 'Others', value: 'others' }\n+]\n+\n+const FilterPanel: FC<Props> = ({\n+    roleAndResponsibility,\n+    setFilter,\n+    setIsFilterApplied\n+}) => {\n+    const [tempFilter, setTempFilter] = useState<string[]>([])\n+    const [isApplyButtonDisabled, setIsApplyButtonDisabled] =\n+        useState<boolean>(true)\n+\n+    const [isApplyAndResetButtonVisible, setIsApplyAndResetButtonVisible] =\n+        useState<boolean>(false)\n+\n+    const handleCheckboxChange = (value: string) => {\n+        setTempFilter((prev) =>\n+            prev.includes(value)\n+                ? prev.filter((item) => item !== value)\n+                : [...prev, value]\n+        )\n+        setIsApplyAndResetButtonVisible(true)\n+        setIsApplyButtonDisabled(false)\n+    }\n+\n+    const handleApply = () => {\n+        const sudo: string[] = []\n+        if (tempFilter.length === 0) {\n+            setFilter([])\n+            setIsFilterApplied(false)\n+            setIsApplyButtonDisabled(true)\n+            return\n+        }\n+        tempFilter.forEach((key) => {\n+            if (roleAndResponsibility[key]) {\n+                sudo.push(...roleAndResponsibility[key])\n+            }\n+        })\n+        setFilter(sudo)\n+        setIsFilterApplied(true)\n+        setIsApplyButtonDisabled(true)\n+    }\n+\n+    const handleReset = () => {\n+        setTempFilter([])\n+        setFilter([])\n+        setIsFilterApplied(false)\n+        setIsApplyButtonDisabled(true)\n+        setIsApplyAndResetButtonVisible(false)\n+    }\n+\n+    return (\n+        <StyledAccordion defaultExpanded>\n+            <StyledAccordionSummary\n+                expandIcon={<StyledArrowForwardIosSharpIcon />}\n+            >\n+                <Typography variant='h6'>Meetings with</Typography>\n+            </StyledAccordionSummary>\n+            <StyledAccordionDetails>\n+                <FormControl component='fieldset' fullWidth>\n+                    <StyledFormGroupBox>\n+                        <FormGroup>\n+                            {filterOptions.map((option) => (\n+                                <FormControlLabel\n+                                    key={option.value}\n+                                    control={\n+                                        <StyledCheckbox\n+                                            disableRipple\n+                                            checked={tempFilter.includes(\n+                                                option.value\n+                                            )}\n+                                            onChange={() =>\n+                                                handleCheckboxChange(\n+                                                    option.value\n+                                                )\n+                                            }\n+                                        />\n+                                    }\n+                                    label={option.label}\n+                                />\n+                            ))}\n+                        </FormGroup>\n+                        {isApplyAndResetButtonVisible && (\n+                            <Box\n+                                mt={2}\n+                                display='flex'\n+                                justifyContent='center'\n+                                alignItems='center'\n+                                flexDirection='column'\n+                            >\n+                                <StyledIconButton\n+                                    onClick={handleApply}\n+                                    disabled={isApplyButtonDisabled}\n+                                >\n+                                    <Box\n+                                        display='flex'\n+                                        justifyContent='center'\n+                                        alignItems='center'\n+                                        flexDirection='column'\n+                                    >\n+                                        <FilterListIcon />\n+                                        <Typography>Apply</Typography>\n+                                    </Box>\n+                                </StyledIconButton>\n+                                <StyledButton\n+                                    variant='outlined'\n+                                    color='secondary'\n+                                    onClick={handleReset}\n+                                >\n+                                    Reset",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1653976223",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/MeetingsTable.tsx",
//         "line": 1,
//         "comment": "is this reusable component? will be good if we can make it so. In future we also have template overview which will look like onetoone overview :)",
//         "commitId": "c7c1dce5fbaf69205a8d8f6898e949c5c9c17d5c",
//         "codeSnippet": "",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1653990287",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/styled.ts",
//         "line": 1,
//         "comment": "I can see some hexcode for colors. Can we try to pick colors from catalystone color pallet and if not then from mui :) ",
//         "commitId": "c7c1dce5fbaf69205a8d8f6898e949c5c9c17d5c",
//         "codeSnippet": "",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1653999723",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/styled.ts",
//         "line": null,
//         "comment": "do check for colors! :)",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,102 @@\n+import ArrowForwardIosSharpIcon from '@mui/icons-material/ArrowForwardIosSharp'\n+import {\n+    TableContainer,\n+    Button,\n+    Checkbox,\n+    Box,\n+    Accordion,\n+    AccordionDetails\n+} from '@mui/material'\n+import MuiAccordionSummary from '@mui/material/AccordionSummary'\n+import styled from '@mui/system/styled'\n+\n+export const StyledTableContainer = styled(TableContainer)({\n+    boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n+    border: '1px solid #ccc'\n+})\n+\n+export const UserStatusStyle = styled(Box)({\n+    backgroundColor: 'lightblue',\n+    borderRadius: '25px',\n+    padding: '5px',\n+    textAlign: 'center'\n+})\n+\n+export const NameAlign = styled(Box)({\n+    display: 'flex',\n+    alignItems: 'center'\n+})\n+\n+export const StyledButton = styled(Button)(({ theme }) => ({\n+    borderRadius: '20px',\n+    padding: '8px 16px',\n+    backgroundColor: '#fff',\n+    color: 'black',\n+    border: '1px solid #ccc',\n+    '&:hover': {\n+        backgroundColor: '#d3d3d3'\n+    },\n+    boxShadow: '0 3px 3px rgba(0, 0, 0, 0.4)'\n+}))\n+\n+export const StyledIconButton = styled(Box)<{ disabled: boolean }>(\n+    ({ theme, disabled }) => ({\n+        backgroundColor: disabled ? '#d3d3d3' : theme.palette.primary.main,\n+        color: disabled ? 'black' : 'white',\n+        '&:hover': {\n+            backgroundColor: disabled ? '#d3d3d3' : theme.palette.primary.dark",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1654000711",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/FilterPanel.tsx",
//         "line": 177,
//         "comment": "can use memo here for avoiding re rendering :)",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,155 @@\n+import { FC, useState } from 'react'\n+\n+import FilterListIcon from '@mui/icons-material/FilterList'\n+import {\n+    Box,\n+    FormControl,\n+    FormGroup,\n+    FormControlLabel,\n+    Typography\n+} from '@mui/material'\n+\n+import {\n+    StyledButton,\n+    StyledIconButton,\n+    StyledCheckbox,\n+    StyledAccordionSummary,\n+    StyledAccordion,\n+    StyledArrowForwardIosSharpIcon,\n+    StyledAccordionDetails,\n+    StyledFormGroupBox\n+} from './styled'\n+import { RoleAndResponsibility } from './types'\n+\n+type Props = {\n+    roleAndResponsibility: RoleAndResponsibility\n+    setFilter: React.Dispatch<React.SetStateAction<string[]>>\n+    setIsFilterApplied: React.Dispatch<React.SetStateAction<boolean>>\n+}\n+\n+const filterOptions = [\n+    { label: 'My manager', value: 'manager' },\n+    { label: 'My employees', value: 'employee' },\n+    { label: 'My HR manager', value: 'hrManager' },\n+    { label: 'My HR employees', value: 'hrEmployees' },\n+    { label: 'Others', value: 'others' }\n+]\n+\n+const FilterPanel: FC<Props> = ({\n+    roleAndResponsibility,\n+    setFilter,\n+    setIsFilterApplied\n+}) => {\n+    const [tempFilter, setTempFilter] = useState<string[]>([])\n+    const [isApplyButtonDisabled, setIsApplyButtonDisabled] =\n+        useState<boolean>(true)\n+\n+    const [isApplyAndResetButtonVisible, setIsApplyAndResetButtonVisible] =\n+        useState<boolean>(false)\n+\n+    const handleCheckboxChange = (value: string) => {\n+        setTempFilter((prev) =>\n+            prev.includes(value)\n+                ? prev.filter((item) => item !== value)\n+                : [...prev, value]\n+        )\n+        setIsApplyAndResetButtonVisible(true)\n+        setIsApplyButtonDisabled(false)\n+    }\n+\n+    const handleApply = () => {\n+        const sudo: string[] = []\n+        if (tempFilter.length === 0) {\n+            setFilter([])\n+            setIsFilterApplied(false)\n+            setIsApplyButtonDisabled(true)\n+            return\n+        }\n+        tempFilter.forEach((key) => {\n+            if (roleAndResponsibility[key]) {\n+                sudo.push(...roleAndResponsibility[key])\n+            }\n+        })\n+        setFilter(sudo)\n+        setIsFilterApplied(true)\n+        setIsApplyButtonDisabled(true)\n+    }\n+\n+    const handleReset = () => {\n+        setTempFilter([])\n+        setFilter([])\n+        setIsFilterApplied(false)\n+        setIsApplyButtonDisabled(true)\n+        setIsApplyAndResetButtonVisible(false)\n+    }\n+\n+    return (\n+        <StyledAccordion defaultExpanded>\n+            <StyledAccordionSummary\n+                expandIcon={<StyledArrowForwardIosSharpIcon />}\n+            >\n+                <Typography variant='h6'>Meetings with</Typography>\n+            </StyledAccordionSummary>\n+            <StyledAccordionDetails>\n+                <FormControl component='fieldset' fullWidth>\n+                    <StyledFormGroupBox>\n+                        <FormGroup>\n+                            {filterOptions.map((option) => (\n+                                <FormControlLabel\n+                                    key={option.value}\n+                                    control={\n+                                        <StyledCheckbox\n+                                            disableRipple\n+                                            checked={tempFilter.includes(\n+                                                option.value\n+                                            )}\n+                                            onChange={() =>\n+                                                handleCheckboxChange(\n+                                                    option.value\n+                                                )\n+                                            }\n+                                        />\n+                                    }\n+                                    label={option.label}\n+                                />\n+                            ))}\n+                        </FormGroup>\n+                        {isApplyAndResetButtonVisible && (\n+                            <Box\n+                                mt={2}\n+                                display='flex'\n+                                justifyContent='center'\n+                                alignItems='center'\n+                                flexDirection='column'\n+                            >\n+                                <StyledIconButton\n+                                    onClick={handleApply}\n+                                    disabled={isApplyButtonDisabled}\n+                                >\n+                                    <Box\n+                                        display='flex'\n+                                        justifyContent='center'\n+                                        alignItems='center'\n+                                        flexDirection='column'\n+                                    >\n+                                        <FilterListIcon />\n+                                        <Typography>Apply</Typography>\n+                                    </Box>\n+                                </StyledIconButton>\n+                                <StyledButton\n+                                    variant='outlined'\n+                                    color='secondary'\n+                                    onClick={handleReset}\n+                                >\n+                                    Reset\n+                                </StyledButton>\n+                            </Box>\n+                        )}\n+                    </StyledFormGroupBox>\n+                </FormControl>\n+            </StyledAccordionDetails>\n+        </StyledAccordion>\n+    )\n+}\n+\n+export default FilterPanel",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1654038560",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/FilterPanel.tsx",
//         "line": null,
//         "comment": "use better names for variable. It will help other dev to understand properly and make sure to do code commenting wherever possible :)",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,155 @@\n+import { FC, useState } from 'react'\n+\n+import FilterListIcon from '@mui/icons-material/FilterList'\n+import {\n+    Box,\n+    FormControl,\n+    FormGroup,\n+    FormControlLabel,\n+    Typography\n+} from '@mui/material'\n+\n+import {\n+    StyledButton,\n+    StyledIconButton,\n+    StyledCheckbox,\n+    StyledAccordionSummary,\n+    StyledAccordion,\n+    StyledArrowForwardIosSharpIcon,\n+    StyledAccordionDetails,\n+    StyledFormGroupBox\n+} from './styled'\n+import { RoleAndResponsibility } from './types'\n+\n+type Props = {\n+    roleAndResponsibility: RoleAndResponsibility\n+    setFilter: React.Dispatch<React.SetStateAction<string[]>>\n+    setIsFilterApplied: React.Dispatch<React.SetStateAction<boolean>>\n+}\n+\n+const filterOptions = [\n+    { label: 'My manager', value: 'manager' },\n+    { label: 'My employees', value: 'employee' },\n+    { label: 'My HR manager', value: 'hrManager' },\n+    { label: 'My HR employees', value: 'hrEmployees' },\n+    { label: 'Others', value: 'others' }\n+]\n+\n+const FilterPanel: FC<Props> = ({\n+    roleAndResponsibility,\n+    setFilter,\n+    setIsFilterApplied\n+}) => {\n+    const [tempFilter, setTempFilter] = useState<string[]>([])\n+    const [isApplyButtonDisabled, setIsApplyButtonDisabled] =\n+        useState<boolean>(true)\n+\n+    const [isApplyAndResetButtonVisible, setIsApplyAndResetButtonVisible] =\n+        useState<boolean>(false)\n+\n+    const handleCheckboxChange = (value: string) => {\n+        setTempFilter((prev) =>\n+            prev.includes(value)\n+                ? prev.filter((item) => item !== value)\n+                : [...prev, value]\n+        )\n+        setIsApplyAndResetButtonVisible(true)\n+        setIsApplyButtonDisabled(false)\n+    }\n+\n+    const handleApply = () => {\n+        const sudo: string[] = []",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1654039067",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/Components/Card/styled.ts",
//         "line": null,
//         "comment": "Out css rules state divideable by 4 so I guess 384 :p ",
//         "commitId": "3e09d0d6ecb4ec5f789bf73f8b309e73a0516437",
//         "codeSnippet": "@@ -10,13 +10,12 @@ export const Wrapper = styled(FlexBox)<WrapperProps>(({ theme }) => ({\n     display: 'flex',\n     flexDirection: 'column',\n     height: '235px',\n-    width: '340px',\n+    width: '385px',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/25#discussion_r1656932127",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateAccordion.tsx",
//         "line": null,
//         "comment": "Should be 8 or 12",
//         "commitId": "3e09d0d6ecb4ec5f789bf73f8b309e73a0516437",
//         "codeSnippet": "@@ -69,16 +70,33 @@ const TemplateAccordion: React.FC<TemplateAccordionProps> = ({\n     // handling auto expand accordion when templates are fetched\n     const [expanded, setExpanded] = useState(autoExpand)\n     const handleExpansion = () => {\n-        setExpanded((prevExpanded) => !prevExpanded)\n+        if (templates?.length > 0) {\n+            setExpanded((prevExpanded) => !prevExpanded)\n+        }\n     }\n     const { t } = useTranslation('template-overview')\n \n     return (\n         <Accordion\n             expanded={templates?.length > 0 && expanded}\n             onChange={handleExpansion}\n+            sx={{\n+                boxShadow: 'none',\n+                padding: `${expanded ? '0px' : '10px 0px'}`",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/25#discussion_r1656932442",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateAccordion.tsx",
//         "line": null,
//         "comment": "Is this color not in theme? Maybe use something close",
//         "commitId": "3e09d0d6ecb4ec5f789bf73f8b309e73a0516437",
//         "codeSnippet": "@@ -69,16 +70,33 @@ const TemplateAccordion: React.FC<TemplateAccordionProps> = ({\n     // handling auto expand accordion when templates are fetched\n     const [expanded, setExpanded] = useState(autoExpand)\n     const handleExpansion = () => {\n-        setExpanded((prevExpanded) => !prevExpanded)\n+        if (templates?.length > 0) {\n+            setExpanded((prevExpanded) => !prevExpanded)\n+        }\n     }\n     const { t } = useTranslation('template-overview')\n \n     return (\n         <Accordion\n             expanded={templates?.length > 0 && expanded}\n             onChange={handleExpansion}\n+            sx={{\n+                boxShadow: 'none',\n+                padding: `${expanded ? '0px' : '10px 0px'}`\n+            }}\n         >\n-            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n+            <AccordionSummary\n+                sx={{\n+                    boxShadow: 'none',\n+                    borderBottom: `${expanded ? '1px solid #E0E0E0' : ''}`,",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/25#discussion_r1656932701",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateAccordion.tsx",
//         "line": null,
//         "comment": "Ugg, why? :p MUI should be correct on these margins ",
//         "commitId": "3e09d0d6ecb4ec5f789bf73f8b309e73a0516437",
//         "codeSnippet": "@@ -69,16 +70,33 @@ const TemplateAccordion: React.FC<TemplateAccordionProps> = ({\n     // handling auto expand accordion when templates are fetched\n     const [expanded, setExpanded] = useState(autoExpand)\n     const handleExpansion = () => {\n-        setExpanded((prevExpanded) => !prevExpanded)\n+        if (templates?.length > 0) {\n+            setExpanded((prevExpanded) => !prevExpanded)\n+        }\n     }\n     const { t } = useTranslation('template-overview')\n \n     return (\n         <Accordion\n             expanded={templates?.length > 0 && expanded}\n             onChange={handleExpansion}\n+            sx={{\n+                boxShadow: 'none',\n+                padding: `${expanded ? '0px' : '10px 0px'}`\n+            }}\n         >\n-            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n+            <AccordionSummary\n+                sx={{\n+                    boxShadow: 'none',\n+                    borderBottom: `${expanded ? '1px solid #E0E0E0' : ''}`,\n+                    padding: '0px',\n+                    '.MuiAccordionSummary-content,.MuiAccordionSummary-content.Mui-expanded':\n+                        {\n+                            margin: 0",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/25#discussion_r1656933004",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateCard/styled.ts",
//         "line": null,
//         "comment": "Don't like this overriding of MUI components. If figma is not in line you have to tell Henri that he is doing something wrong ..",
//         "commitId": "3e09d0d6ecb4ec5f789bf73f8b309e73a0516437",
//         "codeSnippet": "@@ -64,6 +47,14 @@ export const AccordionSummaryContentWrapper = styled('div')(() => ({\n     cursor: 'pointer'\n }))\n \n+export const AccordionDetailsContentWrapper = styled('div')(() => ({\n+    display: 'flex',\n+    marginTop: '1rem',\n+    '.MuiAccordionDetails-root': {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/25#discussion_r1656933739",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateAccordion.tsx",
//         "line": null,
//         "comment": "there were lot of spaces which were not as per designs. Will fail in testing!\r\nAnyhow implemented it let see",
//         "commitId": "3e09d0d6ecb4ec5f789bf73f8b309e73a0516437",
//         "codeSnippet": "@@ -69,16 +70,33 @@ const TemplateAccordion: React.FC<TemplateAccordionProps> = ({\n     // handling auto expand accordion when templates are fetched\n     const [expanded, setExpanded] = useState(autoExpand)\n     const handleExpansion = () => {\n-        setExpanded((prevExpanded) => !prevExpanded)\n+        if (templates?.length > 0) {\n+            setExpanded((prevExpanded) => !prevExpanded)\n+        }\n     }\n     const { t } = useTranslation('template-overview')\n \n     return (\n         <Accordion\n             expanded={templates?.length > 0 && expanded}\n             onChange={handleExpansion}\n+            sx={{\n+                boxShadow: 'none',\n+                padding: `${expanded ? '0px' : '10px 0px'}`\n+            }}\n         >\n-            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n+            <AccordionSummary\n+                sx={{\n+                    boxShadow: 'none',\n+                    borderBottom: `${expanded ? '1px solid #E0E0E0' : ''}`,\n+                    padding: '0px',\n+                    '.MuiAccordionSummary-content,.MuiAccordionSummary-content.Mui-expanded':\n+                        {\n+                            margin: 0",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/25#discussion_r1668007981",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateCard/styled.ts",
//         "line": null,
//         "comment": "okay, but this is required to make it align. Like the content should start from extreme left.",
//         "commitId": "3e09d0d6ecb4ec5f789bf73f8b309e73a0516437",
//         "codeSnippet": "@@ -64,6 +47,14 @@ export const AccordionSummaryContentWrapper = styled('div')(() => ({\n     cursor: 'pointer'\n }))\n \n+export const AccordionDetailsContentWrapper = styled('div')(() => ({\n+    display: 'flex',\n+    marginTop: '1rem',\n+    '.MuiAccordionDetails-root': {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/25#discussion_r1668008160",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "public/locales/en-GB/overview.json",
//         "line": 9,
//         "comment": "can u verify that whether its \"with\" and not \"With\"",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,14 @@\n+{\n+    \"one-to-ones\": \"One To ones\",\n+    \"to-dos\": \"To-dos\",\n+    \"title\": \"One To One\",\n+    \"start-new\": \"Start new\",\n+    \"Apply\" : \"Apply\",\n+    \"Reset\" : \"Reset\",\n+    \"Meetings with\" : \"Meetings with\",\n+    \"Start 1:1 With\" : \"Start 1:1 With\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669782057",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/FilterPanel.tsx",
//         "line": 91,
//         "comment": "extract the logic for checked into a separate function for better readability :)",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,177 @@\n+import { FC, useState, useMemo } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FilterListIcon from '@mui/icons-material/FilterList'\n+import {\n+    Box,\n+    FormControl,\n+    FormGroup,\n+    FormControlLabel,\n+    Typography\n+} from '@mui/material'\n+\n+import {\n+    FilterOptionNew,\n+    FilterCategory,\n+    FilteredCategories\n+} from '../../../services/overview/types'\n+import {\n+    StyledButton,\n+    StyledIconButton,\n+    StyledCheckbox,\n+    StyledAccordionSummary,\n+    StyledAccordion,\n+    StyledArrowForwardIosSharpIcon,\n+    StyledAccordionDetails,\n+    StyledFormGroupBox,\n+    FilterWrapper\n+} from './styled'\n+\n+type Props = {\n+    setFilter: React.Dispatch<React.SetStateAction<FilteredCategories>>\n+    filter: FilteredCategories\n+    filterCategories: FilterCategory[]\n+}\n+\n+const FilterPanel: FC<Props> = ({ setFilter, filter, filterCategories }) => {\n+    const { t } = useTranslation('overview')\n+    const [tempFilter, setTempFilter] = useState<FilteredCategories>(filter)\n+    const [isApplyButtonDisabled, setIsApplyButtonDisabled] =\n+        useState<boolean>(true)\n+    const [isApplyAndResetButtonVisible, setIsApplyAndResetButtonVisible] =\n+        useState<boolean>(false)\n+\n+    const handleCheckboxChange = (\n+        optionValue: string | number,\n+        categoryId: string | number\n+    ) => {\n+        setTempFilter((prev) => {\n+            const updatedFilter = new Map(prev)\n+            if (updatedFilter.has(categoryId)) {\n+                const categoryValues = updatedFilter.get(categoryId) ?? []\n+                const updatedValues = categoryValues.includes(optionValue)\n+                    ? categoryValues.filter((value) => value !== optionValue)\n+                    : [...categoryValues, optionValue]\n+                if (updatedValues.length === 0) {\n+                    updatedFilter.delete(categoryId)\n+                } else {\n+                    updatedFilter.set(categoryId, updatedValues)\n+                }\n+            } else {\n+                updatedFilter.set(categoryId, [optionValue])\n+            }\n+            return updatedFilter\n+        })\n+        setIsApplyAndResetButtonVisible(true)\n+        setIsApplyButtonDisabled(false)\n+    }\n+\n+    const handleApply = () => {\n+        setFilter(tempFilter)\n+        setIsApplyButtonDisabled(true)\n+    }\n+\n+    const handleReset = () => {\n+        setTempFilter(new Map())\n+        setFilter(new Map())\n+        setIsApplyButtonDisabled(true)\n+        setIsApplyAndResetButtonVisible(false)\n+    }\n+\n+    const renderFilterOption = (\n+        option: FilterOptionNew,\n+        filterCategory: FilterCategory\n+    ) => (\n+        <FormControlLabel\n+            key={option.value}\n+            control={\n+                <StyledCheckbox\n+                    disableRipple\n+                    checked={\n+                        tempFilter.has(filterCategory.id)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669812055",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/OneToOneOverview.tsx",
//         "line": null,
//         "comment": "remove :)",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -1,40 +1,59 @@\n-// src/components/OneToOne.tsx\n import React, { useState, useEffect } from 'react'\n import { useTranslation } from 'react-i18next'\n \n import { Box, Container, Grid } from '@mui/material'\n \n-import { UsersData, OverviewItem } from '../../../services/overview/types'\n+import {\n+    UsersData,\n+    OverviewItem,\n+    FilterOptions\n+} from '../../../services/overview/types'\n import FilterPanel from './FilterPanel'\n import MeetingsTable from './MeetingsTable'\n import { mock } from './MockData'\n+import { RoleAndResponsibility } from './types'\n+\n+const filterOptions: FilterOptions = [\n+    { label: 'My manager', value: 'manager' },\n+    { label: 'My employees', value: 'employee' },\n+    { label: 'My HR manager', value: 'hrManager' },\n+    { label: 'My HR employees', value: 'hrEmployees' },\n+    { label: 'Others', value: 'others' }\n+]\n \n const OneToOneOverview: React.FC = () => {\n+    const { t } = useTranslation('overview')\n     const userData: UsersData = mock\n     const [overviewData, setOverviewData] = useState<OverviewItem[]>(\n         mock.oneToOneOverview\n     )\n     const [filter, setFilter] = useState<string[]>([])\n-    const [isFilterApplied, setIsFilterApplied] = useState<boolean>(false)\n+\n+    const roleAndResponsibility: RoleAndResponsibility = {\n+        manager: userData.manager,\n+        employee: userData.employee,\n+        hrManager: userData.hrManager,\n+        hrEmployees: userData.hrEmployees\n+    }\n \n     useEffect(() => {\n-        if (!isFilterApplied) {\n+        console.log(filter)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669819208",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/MeetingsTable.tsx",
//         "line": 47,
//         "comment": "can we create a global sorting function that accepts the type of data and sort on the basis of that. Like we have todo overview, onetoone overview and even now we have template overview in tabular form. This will avoid duplicate logic",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,130 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\n+import {\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableHead,\n+    TableRow,\n+    Typography,\n+    Avatar,\n+    Checkbox,\n+    Button\n+} from '@mui/material'\n+\n+import { SortCriterion } from '../../../services/overview/constants/oto-sort-criteria'\n+import { SortState } from '../../../services/overview/constants/sort-states'\n+import { OverviewItem } from '../../../services/overview/oto-overview/types'\n+import { StyledTableContainer, UserStatusStyle, NameAlign } from './styled'\n+\n+type Props = {\n+    overviewData: OverviewItem[]\n+    setOverviewData: React.Dispatch<React.SetStateAction<OverviewItem[]>>\n+}\n+\n+const MeetingsTable: FC<Props> = ({ overviewData, setOverviewData }) => {\n+    const { t } = useTranslation('overview')\n+    const [currentSortState, setCurrentSortState] = useState<SortState>()\n+    const [currentSortCriterion, setCurrentSortCriterion] =\n+        useState<SortCriterion>()\n+\n+    const sortOverview = (sortCriterion: SortCriterion): void => {\n+        if (sortCriterion !== currentSortCriterion) {\n+            // Initial sort order\n+            sortData(sortCriterion, SortState.ASC)\n+        } else {\n+            // Toggle sort order\n+            const newSortState =\n+                currentSortState === SortState.ASC\n+                    ? SortState.DESC\n+                    : SortState.ASC\n+            sortData(sortCriterion, newSortState)\n+        }\n+    }\n+\n+    const sortData = (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669819345",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/FilterPanel.tsx",
//         "line": 148,
//         "comment": "Make a common class for this as it is used multiple times.",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -59,70 +64,88 @@ const FilterPanel: FC<Props> = ({ setFilter, filterOptions, filterTitle }) => {\n         setIsApplyAndResetButtonVisible(false)\n     }\n \n-    const memoizedFilterOptions = useMemo(\n-        () =>\n-            filterOptions.map((option) => (\n-                <FormControlLabel\n-                    key={option.value}\n-                    control={\n-                        <StyledCheckbox\n-                            disableRipple\n-                            checked={tempFilter.includes(option.value)}\n-                            onChange={() => handleCheckboxChange(option.value)}\n-                        />\n-                    }\n-                    label={option.label}\n+    const renderFilterOption = (option: FilterOption) => (\n+        <FormControlLabel\n+            key={option.value}\n+            control={\n+                <StyledCheckbox\n+                    disableRipple\n+                    checked={tempFilter.includes(option.value)}\n+                    onChange={() => handleCheckboxChange(option.value)}\n                 />\n-            )),\n-        [tempFilter, filterOptions]\n+            }\n+            label={option.label}\n+        />\n+    )\n+\n+    const memoizedFilterOptions = useMemo(\n+        () => (filterOptions: FilterOptions) =>\n+            filterOptions.map(renderFilterOption),\n+        [tempFilter, filterGroups]\n     )\n \n     return (\n-        <StyledAccordion defaultExpanded>\n-            <StyledAccordionSummary\n-                expandIcon={<StyledArrowForwardIosSharpIcon />}\n-            >\n-                <Typography variant='h6'>{filterTitle}</Typography>\n-            </StyledAccordionSummary>\n-            <StyledAccordionDetails>\n-                <FormControl component='fieldset' fullWidth>\n-                    <StyledFormGroupBox>\n-                        <FormGroup>{memoizedFilterOptions}</FormGroup>\n-                        {isApplyAndResetButtonVisible && (\n-                            <Box\n-                                mt={2}\n-                                display='flex'\n-                                justifyContent='center'\n-                                alignItems='center'\n-                                flexDirection='column'\n-                            >\n-                                <StyledIconButton\n-                                    onClick={handleApply}\n-                                    disabled={isApplyButtonDisabled}\n-                                >\n-                                    <Box\n-                                        display='flex'\n-                                        justifyContent='center'\n-                                        alignItems='center'\n-                                        flexDirection='column'\n-                                    >\n-                                        <FilterListIcon />\n-                                        <Typography>{t('Apply')}</Typography>\n-                                    </Box>\n-                                </StyledIconButton>\n-                                <StyledButton\n-                                    variant='outlined'\n-                                    color='secondary'\n-                                    onClick={handleReset}\n-                                >\n-                                    {t('Reset')}\n-                                </StyledButton>\n-                            </Box>\n-                        )}\n-                    </StyledFormGroupBox>\n-                </FormControl>\n-            </StyledAccordionDetails>\n-        </StyledAccordion>\n+        <FilterWrapper>\n+            <Box>\n+                {filterGroups.map((filterGroup) => (\n+                    <StyledAccordion\n+                        elevation={0}\n+                        key={filterGroup.title}\n+                        defaultExpanded\n+                    >\n+                        <StyledAccordionSummary\n+                            expandIcon={<StyledArrowForwardIosSharpIcon />}\n+                        >\n+                            <Typography variant='h6'>\n+                                {filterGroup.title}\n+                            </Typography>\n+                        </StyledAccordionSummary>\n+                        <StyledAccordionDetails>\n+                            <FormControl component='fieldset' fullWidth>\n+                                <StyledFormGroupBox>\n+                                    <FormGroup>\n+                                        {memoizedFilterOptions(\n+                                            filterGroup.options\n+                                        )}\n+                                    </FormGroup>\n+                                </StyledFormGroupBox>\n+                            </FormControl>\n+                        </StyledAccordionDetails>\n+                    </StyledAccordion>\n+                ))}\n+            </Box>\n+            {isApplyAndResetButtonVisible && (\n+                <Box\n+                    mt={7}\n+                    display='flex'\n+                    justifyContent='center'\n+                    alignItems='center'\n+                    flexDirection='column'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669828277",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/FilterPanel.tsx",
//         "line": 158,
//         "comment": "same",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -59,70 +64,88 @@ const FilterPanel: FC<Props> = ({ setFilter, filterOptions, filterTitle }) => {\n         setIsApplyAndResetButtonVisible(false)\n     }\n \n-    const memoizedFilterOptions = useMemo(\n-        () =>\n-            filterOptions.map((option) => (\n-                <FormControlLabel\n-                    key={option.value}\n-                    control={\n-                        <StyledCheckbox\n-                            disableRipple\n-                            checked={tempFilter.includes(option.value)}\n-                            onChange={() => handleCheckboxChange(option.value)}\n-                        />\n-                    }\n-                    label={option.label}\n+    const renderFilterOption = (option: FilterOption) => (\n+        <FormControlLabel\n+            key={option.value}\n+            control={\n+                <StyledCheckbox\n+                    disableRipple\n+                    checked={tempFilter.includes(option.value)}\n+                    onChange={() => handleCheckboxChange(option.value)}\n                 />\n-            )),\n-        [tempFilter, filterOptions]\n+            }\n+            label={option.label}\n+        />\n+    )\n+\n+    const memoizedFilterOptions = useMemo(\n+        () => (filterOptions: FilterOptions) =>\n+            filterOptions.map(renderFilterOption),\n+        [tempFilter, filterGroups]\n     )\n \n     return (\n-        <StyledAccordion defaultExpanded>\n-            <StyledAccordionSummary\n-                expandIcon={<StyledArrowForwardIosSharpIcon />}\n-            >\n-                <Typography variant='h6'>{filterTitle}</Typography>\n-            </StyledAccordionSummary>\n-            <StyledAccordionDetails>\n-                <FormControl component='fieldset' fullWidth>\n-                    <StyledFormGroupBox>\n-                        <FormGroup>{memoizedFilterOptions}</FormGroup>\n-                        {isApplyAndResetButtonVisible && (\n-                            <Box\n-                                mt={2}\n-                                display='flex'\n-                                justifyContent='center'\n-                                alignItems='center'\n-                                flexDirection='column'\n-                            >\n-                                <StyledIconButton\n-                                    onClick={handleApply}\n-                                    disabled={isApplyButtonDisabled}\n-                                >\n-                                    <Box\n-                                        display='flex'\n-                                        justifyContent='center'\n-                                        alignItems='center'\n-                                        flexDirection='column'\n-                                    >\n-                                        <FilterListIcon />\n-                                        <Typography>{t('Apply')}</Typography>\n-                                    </Box>\n-                                </StyledIconButton>\n-                                <StyledButton\n-                                    variant='outlined'\n-                                    color='secondary'\n-                                    onClick={handleReset}\n-                                >\n-                                    {t('Reset')}\n-                                </StyledButton>\n-                            </Box>\n-                        )}\n-                    </StyledFormGroupBox>\n-                </FormControl>\n-            </StyledAccordionDetails>\n-        </StyledAccordion>\n+        <FilterWrapper>\n+            <Box>\n+                {filterGroups.map((filterGroup) => (\n+                    <StyledAccordion\n+                        elevation={0}\n+                        key={filterGroup.title}\n+                        defaultExpanded\n+                    >\n+                        <StyledAccordionSummary\n+                            expandIcon={<StyledArrowForwardIosSharpIcon />}\n+                        >\n+                            <Typography variant='h6'>\n+                                {filterGroup.title}\n+                            </Typography>\n+                        </StyledAccordionSummary>\n+                        <StyledAccordionDetails>\n+                            <FormControl component='fieldset' fullWidth>\n+                                <StyledFormGroupBox>\n+                                    <FormGroup>\n+                                        {memoizedFilterOptions(\n+                                            filterGroup.options\n+                                        )}\n+                                    </FormGroup>\n+                                </StyledFormGroupBox>\n+                            </FormControl>\n+                        </StyledAccordionDetails>\n+                    </StyledAccordion>\n+                ))}\n+            </Box>\n+            {isApplyAndResetButtonVisible && (\n+                <Box\n+                    mt={7}\n+                    display='flex'\n+                    justifyContent='center'\n+                    alignItems='center'\n+                    flexDirection='column'\n+                >\n+                    <StyledIconButton\n+                        onClick={handleApply}\n+                        disabled={isApplyButtonDisabled}\n+                    >\n+                        <Box\n+                            display='flex'\n+                            justifyContent='center'\n+                            alignItems='center'\n+                            flexDirection='column'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669829896",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/todo-overview/ToDoDashboard.tsx",
//         "line": null,
//         "comment": "remove :)",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,107 @@\n+import React from 'react'\n+\n+import {\n+    Paper,\n+    Accordion,\n+    AccordionDetails,\n+    Typography,\n+    Avatar,\n+    Box\n+} from '@mui/material'\n+import { lightBlue } from '@mui/material/colors'\n+\n+import {\n+    TodoOverviewsData,\n+    TodoOverviewDetail\n+} from '../../../services/overview/types'\n+import ToDodetailsTable from './ToDoDetailsTable'\n+import {\n+    StyledAccordionSummary,\n+    StyledArrowForwardIosSharpIcon\n+} from './styled'\n+\n+type ToDoDashboardProps = {\n+    todoOverviewsData: TodoOverviewsData\n+    filter: string[]\n+}\n+\n+const ToDoDashboard: React.FC<ToDoDashboardProps> = ({\n+    todoOverviewsData,\n+    filter\n+}) => {\n+    // Add your component logic here",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669831808",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/todo-overview/ToDoDashboard.tsx",
//         "line": null,
//         "comment": "remove",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,107 @@\n+import React from 'react'\n+\n+import {\n+    Paper,\n+    Accordion,\n+    AccordionDetails,\n+    Typography,\n+    Avatar,\n+    Box\n+} from '@mui/material'\n+import { lightBlue } from '@mui/material/colors'\n+\n+import {\n+    TodoOverviewsData,\n+    TodoOverviewDetail\n+} from '../../../services/overview/types'\n+import ToDodetailsTable from './ToDoDetailsTable'\n+import {\n+    StyledAccordionSummary,\n+    StyledArrowForwardIosSharpIcon\n+} from './styled'\n+\n+type ToDoDashboardProps = {\n+    todoOverviewsData: TodoOverviewsData\n+    filter: string[]\n+}\n+\n+const ToDoDashboard: React.FC<ToDoDashboardProps> = ({\n+    todoOverviewsData,\n+    filter\n+}) => {\n+    // Add your component logic here\n+    const getNameInitials = (name: string) => {\n+        const [firstName, lastName] = name.split(' ')\n+        return firstName.charAt(0) + lastName.charAt(0)\n+    }\n+\n+    const getActiveToDos = (details: TodoOverviewDetail[]) => {\n+        const activeToDos = details.filter(\n+            (detail: TodoOverviewDetail) => !detail.done\n+        )\n+        return `${activeToDos.length} active to-dos`\n+    }\n+\n+    const filterTodoOverviewDetails = (details: TodoOverviewDetail[]) => {\n+        console.log(filter)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669832360",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/todo-overview/ToDoDetailsTable.tsx",
//         "line": 46,
//         "comment": "todo is a single word.",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,187 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import CheckCircleIcon from '@mui/icons-material/CheckCircle'\n+import CircleOutlinedIcon from '@mui/icons-material/CircleOutlined'\n+import TaskAltIcon from '@mui/icons-material/TaskAlt'\n+import {\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableHead,\n+    TableRow,\n+    Typography,\n+    Checkbox,\n+    TableContainer,\n+    Box\n+} from '@mui/material'\n+import { blue } from '@mui/material/colors'\n+\n+import {\n+    TodoOverview,\n+    TodoOverviewDetail\n+} from '../../../services/overview/types'\n+import { IconMoreStyled, tableStyles } from './styled'\n+\n+type Props = {\n+    todoOverview: TodoOverview\n+    toDoOverviewDetails: TodoOverviewDetail[]\n+}\n+\n+const ToDodetailsTable: FC<Props> = ({ todoOverview, toDoOverviewDetails }) => {\n+    const { t } = useTranslation('overview')\n+\n+    const setCreatedIn = (toDo: TodoOverviewDetail) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669836233",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/todo-overview/ToDoDetailsTable.tsx",
//         "line": 124,
//         "comment": "never return undefined",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,187 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import CheckCircleIcon from '@mui/icons-material/CheckCircle'\n+import CircleOutlinedIcon from '@mui/icons-material/CircleOutlined'\n+import TaskAltIcon from '@mui/icons-material/TaskAlt'\n+import {\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableHead,\n+    TableRow,\n+    Typography,\n+    Checkbox,\n+    TableContainer,\n+    Box\n+} from '@mui/material'\n+import { blue } from '@mui/material/colors'\n+\n+import {\n+    TodoOverview,\n+    TodoOverviewDetail\n+} from '../../../services/overview/types'\n+import { IconMoreStyled, tableStyles } from './styled'\n+\n+type Props = {\n+    todoOverview: TodoOverview\n+    toDoOverviewDetails: TodoOverviewDetail[]\n+}\n+\n+const ToDodetailsTable: FC<Props> = ({ todoOverview, toDoOverviewDetails }) => {\n+    const { t } = useTranslation('overview')\n+\n+    const setCreatedIn = (toDo: TodoOverviewDetail) => {\n+        const participant = toDo.participants.find(\n+            (participant) => participant !== todoOverview.name\n+        )\n+        const createOn = toDo.oneToOneDetail.finishDate\n+        const createOnString = createOn ? createOn.substring(0, 10) : ''\n+        if (createOn === null) return '1:1 with Deleted'\n+        return (\n+            <Box>\n+                <Typography variant='body2'>1:1 with {participant}</Typography>\n+                <Typography variant='body2'>{createOnString}</Typography>\n+            </Box>\n+        )\n+    }\n+\n+    const changeStatusButton = (toDo: TodoOverviewDetail) => {\n+        if (!toDo.done && !toDo.archived) {\n+            return (\n+                <Box\n+                    display='flex'\n+                    justifyContent='flex-end'\n+                    alignContent='center'\n+                >\n+                    <IconMoreStyled\n+                        sx={{ color: blue[500] }}\n+                        onClick={() => alert('done is clicked')}\n+                    />\n+                </Box>\n+            )\n+        }\n+        if (toDo.archived) {\n+            return (\n+                <Box\n+                    display='flex'\n+                    justifyContent='space-between'\n+                    alignContent='center'\n+                >\n+                    <Typography color='textSecondary' variant='body2'>\n+                        {toDo.archivedDate}\n+                    </Typography>\n+                    <IconMoreStyled\n+                        sx={{ color: blue[500], alignContent: 'flex-end' }}\n+                        onClick={() => alert('done is clicked')}\n+                    />\n+                </Box>\n+            )\n+        }\n+        return (\n+            <Box display='flex' justifyContent='flex-end' alignContent='center'>\n+                <Typography variant='body2' color='textSecondary'>\n+                    Completed {toDo.doneOn}\n+                </Typography>\n+            </Box>\n+        )\n+    }\n+\n+    const setTableRowBackground = (toDo: TodoOverviewDetail) => {\n+        if (toDo.done) {\n+            return tableStyles.tableRowDone\n+        }\n+        if (toDo.archived) {\n+            return tableStyles.tableRowArchived\n+        }\n+        return undefined",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669837031",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/services/overview/types.ts",
//         "line": null,
//         "comment": "type should be strict",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -19,4 +19,38 @@ export type FilterOption = {\n     value: string\n }\n \n+export type FilterGroup = {\n+    title: string\n+    options: FilterOption[]\n+}\n+\n+export type FilterGroups = FilterGroup[]\n+\n export type FilterOptions = FilterOption[]\n+\n+export type OneToOneDetail = {\n+    id: string | null\n+    finishDate: string | null\n+}\n+\n+export type TodoOverviewDetail = {\n+    id: string\n+    title: string\n+    participants: string[]\n+    deadline: string | null\n+    doneOn: string | null",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669839496",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/todo-overview/ToDoOverview.tsx",
//         "line": null,
//         "comment": "remove",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -11,34 +13,111 @@ import {\n import FilterPanel from '../onetoone-overview/FilterPanel'\n import { todoOverviewMock } from './MockData'\n import ToDoDashboard from './ToDoDashboard'\n-import ToDoFilter from './ToDoFilter'\n-\n-const filterOptions1: FilterOptions = [\n-    { label: 'Active', value: 'Active' },\n-    { label: 'Archived', value: 'Archived' },\n-    { label: 'Completed', value: 'Completed' }\n-]\n-const filterOptions2: FilterOptions = [\n-    { label: 'Overdue', value: 'Overdue' },\n-    { label: 'No deadline', value: 'No deadline' }\n-]\n-\n-const filterGroups: FilterGroups = [\n-    {\n-        title: 'To-Do state',\n-        options: filterOptions1\n-    },\n-    {\n-        title: 'To-Do deadline',\n-        options: filterOptions2\n-    }\n-]\n \n const ToDoOverview: React.FC = () => {\n     const { t } = useTranslation('overview')\n     const todoOverviewsData: TodoOverviewsData = todoOverviewMock\n     const [filter, setFilter] = useState<string[]>(['Active'])\n \n+    const computeToDoOptionsCount = (): Map<string | number, number> => {\n+        const optionsCount = {\n+            activeCount: 0,\n+            archivedCount: 0,\n+            completedCount: 0,\n+            overdueCount: 0,\n+            noDeadlineCount: 0\n+        }\n+        const filterOptionsCount = new Map<string | number, number>()\n+\n+        todoOverviewsData.todoOverviews.forEach((overview) => {\n+            overview.todoOverviewDetails.forEach((todoDetail) => {\n+                if (todoDetail.done) {\n+                    optionsCount.completedCount += 1\n+                } else if (!todoDetail.archived) {\n+                    optionsCount.activeCount += 1\n+                }\n+                if (todoDetail.archived) {\n+                    optionsCount.archivedCount += 1\n+                }\n+                if (\n+                    isDeadlineOverdue(todoDetail.doneOn, todoDetail.done) &&\n+                    !todoDetail.archived\n+                ) {\n+                    optionsCount.overdueCount += 1\n+                }\n+                if (!todoDetail.deadline && !todoDetail.archived) {\n+                    optionsCount.noDeadlineCount += 1\n+                }\n+            })\n+        })\n+\n+        filterOptionsCount.set('Active', optionsCount.activeCount)\n+        filterOptionsCount.set('Archived', optionsCount.archivedCount)\n+        filterOptionsCount.set('Completed', optionsCount.completedCount)\n+        filterOptionsCount.set('Overdue', optionsCount.overdueCount)\n+        filterOptionsCount.set('No deadline', optionsCount.noDeadlineCount)\n+\n+        return filterOptionsCount\n+    }\n+\n+    function isDeadlineOverdue(\n+        deadline: string | null,\n+        done: boolean\n+    ): boolean {\n+        if (done || !deadline) {\n+            return false\n+        }\n+        return (\n+            new Date().setUTCHours(0, 0, 0, 0) >\n+            new Date(deadline).setUTCHours(0, 0, 0, 0)\n+        )\n+    }\n+\n+    const [filterOptionsCount, setFilterOptionsCount] = useState<\n+        Map<string | number, number>\n+    >(new Map())\n+\n+    useEffect(() => {\n+        console.log(filterOptionsCount)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669843142",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/OneToOneOverview.tsx",
//         "line": 79,
//         "comment": "is their need of ? before forEach?\r\n",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -3,61 +3,87 @@ import { useTranslation } from 'react-i18next'\n \n import { Box, Container, Grid } from '@mui/material'\n \n+import { OTOFilterOptions } from '../../../services/overview/constants/oto-filter-options'\n import {\n-    UsersData,\n     OverviewItem,\n-    FilterOptions,\n-    FilterGroups\n+    UsersData\n+} from '../../../services/overview/oto-overview/types'\n+import {\n+    FilterOptionNew,\n+    FilterCategory,\n+    FilteredCategories\n } from '../../../services/overview/types'\n import FilterPanel from './FilterPanel'\n import MeetingsTable from './MeetingsTable'\n import { mock } from './MockData'\n import { RoleAndResponsibility } from './types'\n \n-const filterOptions: FilterOptions = [\n-    { label: 'My manager', value: 'manager' },\n-    { label: 'My employees', value: 'employee' },\n-    { label: 'My HR manager', value: 'hrManager' },\n-    { label: 'My HR employees', value: 'hrEmployees' },\n-    { label: 'Others', value: 'others' }\n-]\n-\n-const filterGroups: FilterGroups = [\n-    {\n-        title: 'Meetings with',\n-        options: filterOptions\n-    }\n-]\n-\n const OneToOneOverview: React.FC = () => {\n     const { t } = useTranslation('overview')\n     const userData: UsersData = mock\n     const [overviewData, setOverviewData] = useState<OverviewItem[]>(\n         mock.oneToOneOverview\n     )\n-    const [filter, setFilter] = useState<string[]>([])\n+    const [filter, setFilter] = useState<FilteredCategories>(new Map())\n \n     const roleAndResponsibility: RoleAndResponsibility = {\n         manager: userData.manager,\n         employee: userData.employee,\n         hrManager: userData.hrManager,\n         hrEmployees: userData.hrEmployees\n     }\n+    const filterOptions: FilterOptionNew[] = [\n+        {\n+            value: OTOFilterOptions.MANAGER,\n+            display: t('My manager'),\n+            state: false\n+        },\n+        {\n+            value: OTOFilterOptions.EMPLOYEE,\n+            display: t('My employees'),\n+            state: false\n+        },\n+        {\n+            value: OTOFilterOptions.HR_MANAGER,\n+            display: t('My HR manager'),\n+            state: false\n+        },\n+        {\n+            value: OTOFilterOptions.HR_EMPLOYEES,\n+            display: t('My HR employees'),\n+            state: false\n+        },\n+        {\n+            value: OTOFilterOptions.OTHERS,\n+            display: t('Others'),\n+            state: false\n+        }\n+    ]\n+\n+    const filterCategories: FilterCategory[] = [\n+        {\n+            id: 'meetingWith',\n+            displayName: t('Meetings with'),\n+            componentType: 'checkbox',\n+            options: filterOptions\n+        }\n+    ]\n \n     useEffect(() => {\n         const filteredEmployeeIds: Set<string> = new Set()\n-        const filterSet = new Set(filter)\n-        if (filterSet.size === 0) {\n+        if (filter.size === 0) {\n             setOverviewData(mock.oneToOneOverview)\n             return\n         }\n-        filterSet.forEach((key) => {\n-            if (roleAndResponsibility[key]) {\n-                roleAndResponsibility[key].forEach((employeeId) => {\n-                    filteredEmployeeIds.add(employeeId)\n-                })\n-            }\n-        })\n+        if (filter.has('meetingWith')) {\n+            filter.get('meetingWith')?.forEach((key) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669847453",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/todo-overview/ToDoDetailsTable.tsx",
//         "line": 49,
//         "comment": "avoid null checks",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -13,34 +14,44 @@ import {\n     Typography,\n     Checkbox,\n     TableContainer,\n-    Box\n+    Box,\n+    Button\n } from '@mui/material'\n-import { blue } from '@mui/material/colors'\n+import { blue, red } from '@mui/material/colors'\n \n+import { SortState } from '../../../services/overview/constants/sort-states'\n+import { TodoFilterCategory } from '../../../services/overview/constants/todo-filter-category'\n+import { TodoFilterOptions } from '../../../services/overview/constants/todo-filter-options'\n+import {\n+    sortToDosInAscending,\n+    sortToDosInDescending\n+} from '../../../services/overview/todo-overview/service'\n import {\n     TodoOverview,\n     TodoOverviewDetail\n-} from '../../../services/overview/types'\n+} from '../../../services/overview/todo-overview/types'\n+import { FilteredCategories } from '../../../services/overview/types'\n import { IconMoreStyled, tableStyles } from './styled'\n \n type Props = {\n     todoOverview: TodoOverview\n-    toDoOverviewDetails: TodoOverviewDetail[]\n+    filter: FilteredCategories\n }\n \n-const ToDodetailsTable: FC<Props> = ({ todoOverview, toDoOverviewDetails }) => {\n+const ToDodetailsTable: FC<Props> = ({ todoOverview, filter }) => {\n     const { t } = useTranslation('overview')\n+    const [sortedTodoOverview, setSortedTodoOverview] =\n+        useState<TodoOverview>(todoOverview)\n \n     const setCreatedIn = (toDo: TodoOverviewDetail) => {\n-        const participant = toDo.participants.find(\n-            (participant) => participant !== todoOverview.name\n-        )\n         const createOn = toDo.oneToOneDetail.finishDate\n         const createOnString = createOn ? createOn.substring(0, 10) : ''\n         if (createOn === null) return '1:1 with Deleted'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669849386",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/todo-overview/ToDoOverview.tsx",
//         "line": 89,
//         "comment": "remove",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -1,119 +1,181 @@\n import React, { useState, useEffect } from 'react'\n import { useTranslation } from 'react-i18next'\n \n-import { use } from 'i18next'\n-\n import { Box, Container, Grid } from '@mui/material'\n \n+import { SortState } from '../../../services/overview/constants/sort-states'\n+import { TodoFilterCategory } from '../../../services/overview/constants/todo-filter-category'\n+import { TodoFilterOptions } from '../../../services/overview/constants/todo-filter-options'\n+import {\n+    computeToDoOptionsCount,\n+    getCountForHeader,\n+    isDeadlineOverdue,\n+    sortToDosInAscending,\n+    sortToDosInDescending\n+} from '../../../services/overview/todo-overview/service'\n import {\n-    TodoOverviewsData,\n-    FilterOptions,\n-    FilterGroups\n+    TodoOverview,\n+    TodoOverviewData,\n+    TodoOverviewResponse\n+} from '../../../services/overview/todo-overview/types'\n+import {\n+    FilterOptionNew,\n+    FilterCategory,\n+    FilteredCategories\n } from '../../../services/overview/types'\n import FilterPanel from '../onetoone-overview/FilterPanel'\n-import { todoOverviewMock } from './MockData'\n+import { todoOverviewMock, userNames, userTitles } from './MockData'\n import ToDoDashboard from './ToDoDashboard'\n \n const ToDoOverview: React.FC = () => {\n     const { t } = useTranslation('overview')\n-    const todoOverviewsData: TodoOverviewsData = todoOverviewMock\n-    const [filter, setFilter] = useState<string[]>(['Active'])\n-\n-    const computeToDoOptionsCount = (): Map<string | number, number> => {\n-        const optionsCount = {\n-            activeCount: 0,\n-            archivedCount: 0,\n-            completedCount: 0,\n-            overdueCount: 0,\n-            noDeadlineCount: 0\n-        }\n-        const filterOptionsCount = new Map<string | number, number>()\n-\n-        todoOverviewsData.todoOverviews.forEach((overview) => {\n-            overview.todoOverviewDetails.forEach((todoDetail) => {\n-                if (todoDetail.done) {\n-                    optionsCount.completedCount += 1\n-                } else if (!todoDetail.archived) {\n-                    optionsCount.activeCount += 1\n-                }\n-                if (todoDetail.archived) {\n-                    optionsCount.archivedCount += 1\n-                }\n-                if (\n-                    isDeadlineOverdue(todoDetail.doneOn, todoDetail.done) &&\n-                    !todoDetail.archived\n-                ) {\n-                    optionsCount.overdueCount += 1\n-                }\n-                if (!todoDetail.deadline && !todoDetail.archived) {\n-                    optionsCount.noDeadlineCount += 1\n-                }\n-            })\n+    const todoOverviewsDataResponse: TodoOverviewResponse = todoOverviewMock\n+    let todoOverviewMasterData: TodoOverview[] = []\n+    const [filter, setFilter] = useState<FilteredCategories>(\n+        new Map([[TodoFilterCategory.TODO_STATE, [TodoFilterOptions.ACTIVE]]])\n+    )\n+    let userNamesMap: Map<string, string> = new Map<string, string>()\n+    let userTitlesMap: Map<string, string> = new Map<string, string>()\n+    let dateFormat: string\n+\n+    //TODO: Replace with actual logged in user id from API\n+    const loggedInUserId = 'fd3966ba-0e24-4285-8521-41d427fcc398'\n+\n+    const prepareToDoOverviewData = (todoOverviewData: TodoOverviewData[]) => {\n+        const ownerId = todoOverviewData.map(\n+            (todoOverview) => todoOverview.ownerId\n+        )\n+        const participantIds = [\n+            ...new Set(\n+                todoOverviewData.flatMap((todoOverview) =>\n+                    todoOverview.todoOverviewDetails.flatMap(\n+                        (todoDetail) => todoDetail.participants\n+                    )\n+                )\n+            )\n+        ]\n+        userNamesMap = userNames\n+        userTitlesMap = userTitles\n+        dateFormat = 'dd/MM/yyyy' //TODO: Get from API\n+        generateToDoOverview(todoOverviewData)\n+        sortOverviewHeaders()\n+        todoOverviewMasterData.forEach((overview) => {\n+            sortTodos(overview)\n         })\n+    }\n \n-        filterOptionsCount.set('Active', optionsCount.activeCount)\n-        filterOptionsCount.set('Archived', optionsCount.archivedCount)\n-        filterOptionsCount.set('Completed', optionsCount.completedCount)\n-        filterOptionsCount.set('Overdue', optionsCount.overdueCount)\n-        filterOptionsCount.set('No deadline', optionsCount.noDeadlineCount)\n+    const generateToDoOverview = (todoOverviewData: TodoOverviewData[]) => {\n+        todoOverviewMasterData = todoOverviewData.map((overview) => ({\n+            ownerId: overview.ownerId,\n+            ownerName: userNamesMap.get(overview.ownerId) || '',\n+            ownerTitle: userTitlesMap.get(overview.ownerId) || '',\n+            mySection: loggedInUserId === overview.ownerId,\n+            sectionState:\n+                loggedInUserId === overview.ownerId ? 'expand' : 'collapse',\n+            //   userAvatar: this.userAvatars.get(overview.ownerId),//TODO: Get from API\n+            activeCount: getCountForHeader(overview.todoOverviewDetails),\n+            sortState: SortState.ASC,\n+            todoOverviewDetails: overview.todoOverviewDetails.map((todo) => ({\n+                ...todo,\n+                overdue: isDeadlineOverdue(todo.deadline, todo.done),\n+                archivedDate: todo.archivedDate,\n+                visible: true,\n+                otherParticipantName: getOtherParticipantName(\n+                    todo.participants,\n+                    overview.ownerId\n+                )\n+            }))\n+        }))\n+        console.log(todoOverviewMasterData)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669851007",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/services/overview/todo-overview/service.ts",
//         "line": 42,
//         "comment": "remove",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,130 @@\n+import { TodoOverviewDetail, TodoOverviewResponse, TodoOverview } from './types'\n+\n+export const computeToDoOptionsCount = (\n+    todoOverviewsData: TodoOverviewResponse\n+): Map<string | number, number> => {\n+    const optionsCount = {\n+        activeCount: 0,\n+        archivedCount: 0,\n+        completedCount: 0,\n+        overdueCount: 0,\n+        noDeadlineCount: 0\n+    }\n+    const filterOptionsCount = new Map<string | number, number>()\n+\n+    todoOverviewsData.todoOverviews.forEach((overview) => {\n+        overview.todoOverviewDetails.forEach((todoDetail) => {\n+            if (todoDetail.done) {\n+                optionsCount.completedCount += 1\n+            } else if (!todoDetail.archived) {\n+                optionsCount.activeCount += 1\n+            }\n+            if (todoDetail.archived) {\n+                optionsCount.archivedCount += 1\n+            }\n+            if (\n+                isDeadlineOverdue(todoDetail.deadline, todoDetail.done) &&\n+                !todoDetail.archived\n+            ) {\n+                optionsCount.overdueCount += 1\n+            }\n+            if (!todoDetail.deadline && !todoDetail.archived) {\n+                optionsCount.noDeadlineCount += 1\n+            }\n+        })\n+    })\n+\n+    filterOptionsCount.set('Active', optionsCount.activeCount)\n+    filterOptionsCount.set('Archived', optionsCount.archivedCount)\n+    filterOptionsCount.set('Completed', optionsCount.completedCount)\n+    filterOptionsCount.set('Overdue', optionsCount.overdueCount)\n+    filterOptionsCount.set('No deadline', optionsCount.noDeadlineCount)\n+    console.log('filterOptionCount', filterOptionsCount)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669852074",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/services/overview/todo-overview/types.ts",
//         "line": 13,
//         "comment": "use strict type avoid null.",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,41 @@\n+import { number } from 'ts-pattern/dist/patterns'\n+\n+import { SortState } from '../constants/sort-states'\n+\n+interface OneToOneDetail {\n+    id: string | null\n+    finishDate: string | null\n+}\n+export interface TodoOverviewDetail {\n+    id: string\n+    title: string\n+    archivedDate: string | null\n+    doneOn: string | null",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669852800",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/services/overview/todo-overview/types.ts",
//         "line": 38,
//         "comment": "remove?",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,41 @@\n+import { number } from 'ts-pattern/dist/patterns'\n+\n+import { SortState } from '../constants/sort-states'\n+\n+interface OneToOneDetail {\n+    id: string | null\n+    finishDate: string | null\n+}\n+export interface TodoOverviewDetail {\n+    id: string\n+    title: string\n+    archivedDate: string | null\n+    doneOn: string | null\n+    deadline: string | null\n+    overdue?: boolean\n+    done: boolean\n+    oneToOneDetail: OneToOneDetail\n+    participants: string[]\n+    otherParticipantName?: string\n+    archived: boolean\n+    visible?: boolean\n+}\n+\n+export interface TodoOverviewData {\n+    ownerId: string\n+    todoOverviewDetails: TodoOverviewDetail[]\n+}\n+\n+export interface TodoOverviewResponse {\n+    todoOverviews: TodoOverviewData[]\n+}\n+\n+export interface TodoOverview extends TodoOverviewData {\n+    ownerName: string\n+    ownerTitle: string\n+    mySection: boolean\n+    sectionState: string\n+    // userAvatar: UserAvatarData;",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669853045",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/styled.ts",
//         "line": 82,
//         "comment": "can we avoid manipulating mui inbuilt tags?  can u show me why we used this?",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,125 @@\n+import ArrowForwardIosSharpIcon from '@mui/icons-material/ArrowForwardIosSharp'\n+import {\n+    TableContainer,\n+    Button,\n+    Checkbox,\n+    Box,\n+    Accordion,\n+    AccordionDetails\n+} from '@mui/material'\n+import MuiAccordionSummary from '@mui/material/AccordionSummary'\n+import { lightBlue } from '@mui/material/colors'\n+import styled from '@mui/system/styled'\n+\n+export const StyledTableContainer = styled(TableContainer)(({ theme }) => ({\n+    boxShadow: `0px 2px 4px ${theme.palette.grey[400]}`,\n+    borderRadius: '10px'\n+}))\n+\n+export const UserStatusStyle = styled(Box)({\n+    backgroundColor: lightBlue[50],\n+    borderRadius: '25px',\n+    padding: '5px',\n+    textAlign: 'center'\n+})\n+\n+export const NameAlign = styled(Box)({\n+    display: 'flex',\n+    alignItems: 'center'\n+})\n+\n+export const StyledButton = styled(Button)(({ theme }) => ({\n+    borderRadius: '20px',\n+    padding: '8px 16px',\n+    backgroundColor: theme.palette.background.paper,\n+    color: theme.palette.text.primary,\n+    border: `1px solid ${theme.palette.grey[300]}`,\n+    '&:hover': {\n+        backgroundColor: theme.palette.grey[300],\n+        border: `1px solid ${theme.palette.grey[300]}`\n+    },\n+    boxShadow: `0 3px 3px ${theme.palette.grey[400]}`\n+}))\n+\n+export const StyledIconButton = styled(Box)<{ disabled: boolean }>(\n+    ({ theme, disabled }) => ({\n+        backgroundColor: disabled\n+            ? theme.palette.grey[300]\n+            : theme.palette.primary.main,\n+        color: disabled\n+            ? theme.palette.common.black\n+            : theme.palette.common.white,\n+        '&:hover': {\n+            backgroundColor: disabled\n+                ? theme.palette.grey[300]\n+                : theme.palette.primary.dark\n+        },\n+        width: '60px',\n+        height: '60px',\n+        borderRadius: '50%',\n+        display: 'flex',\n+        flexDirection: 'column',\n+        justifyContent: 'center',\n+        alignItems: 'center',\n+        textTransform: 'none',\n+        fontSize: '14px',\n+        boxShadow: `0 3px 3px ${theme.palette.grey[400]}`,\n+        marginBottom: '10px',\n+        cursor: disabled ? 'default' : 'pointer'\n+    })\n+)\n+\n+export const StyledCheckbox = styled(Checkbox)(({ theme }) => ({\n+    '&:hover': {\n+        color: theme.palette.primary.dark\n+    }\n+}))\n+\n+export const StyledAccordionSummary = styled(MuiAccordionSummary)(\n+    ({ theme }) => ({\n+        flexDirection: 'row-reverse',\n+        padding: '10px',\n+        '& .MuiAccordionSummary-expandIconWrapper': {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669855051",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/todo-overview/ToDoDashboard.tsx",
//         "line": 37,
//         "comment": "i think it will break if there is no first or last name or if first and last name are hidden on visibility filter.  Add some null check :)",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,97 @@\n+import React from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import {\n+    Paper,\n+    Accordion,\n+    AccordionDetails,\n+    Typography,\n+    Avatar,\n+    Box\n+} from '@mui/material'\n+import { lightBlue } from '@mui/material/colors'\n+\n+import {\n+    TodoOverview,\n+    TodoOverviewDetail\n+} from '../../../services/overview/todo-overview/types'\n+import { FilteredCategories } from '../../../services/overview/types'\n+import ToDodetailsTable from './ToDoDetailsTable'\n+import {\n+    StyledAccordionSummary,\n+    StyledArrowForwardIosSharpIcon\n+} from './styled'\n+\n+type ToDoDashboardProps = {\n+    todoOverviews: TodoOverview[]\n+    filter: FilteredCategories\n+}\n+\n+const ToDoDashboard: React.FC<ToDoDashboardProps> = ({\n+    todoOverviews,\n+    filter\n+}) => {\n+    const { t } = useTranslation('overview')\n+    const getNameInitials = (name: string) => {\n+        const [firstName, lastName] = name.split(' ')\n+        return firstName.charAt(0) + lastName.charAt(0)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669862884",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/todo-overview/ToDoDetailsTable.tsx",
//         "line": 48,
//         "comment": "have to tested **createOnString** with different date formats?? might vary in length and can break here :)\r\n",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,313 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import CheckCircleIcon from '@mui/icons-material/CheckCircle'\n+import CircleOutlinedIcon from '@mui/icons-material/CircleOutlined'\n+import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\n+import TaskAltIcon from '@mui/icons-material/TaskAlt'\n+import {\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableHead,\n+    TableRow,\n+    Typography,\n+    Checkbox,\n+    TableContainer,\n+    Box,\n+    Button\n+} from '@mui/material'\n+import { blue, red } from '@mui/material/colors'\n+\n+import { SortState } from '../../../services/overview/constants/sort-states'\n+import { TodoFilterCategory } from '../../../services/overview/constants/todo-filter-category'\n+import { TodoFilterOptions } from '../../../services/overview/constants/todo-filter-options'\n+import {\n+    sortToDosInAscending,\n+    sortToDosInDescending\n+} from '../../../services/overview/todo-overview/service'\n+import {\n+    TodoOverview,\n+    TodoOverviewDetail\n+} from '../../../services/overview/todo-overview/types'\n+import { FilteredCategories } from '../../../services/overview/types'\n+import { IconMoreStyled, tableStyles } from './styled'\n+\n+type Props = {\n+    todoOverview: TodoOverview\n+    filter: FilteredCategories\n+}\n+\n+const ToDodetailsTable: FC<Props> = ({ todoOverview, filter }) => {\n+    const { t } = useTranslation('overview')\n+    const [sortedTodoOverview, setSortedTodoOverview] =\n+        useState<TodoOverview>(todoOverview)\n+\n+    const setCreatedIn = (toDo: TodoOverviewDetail) => {\n+        const createOn = toDo.oneToOneDetail.finishDate\n+        const createOnString = createOn ? createOn.substring(0, 10) : ''",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669875548",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/todo-overview/ToDoDetailsTable.tsx",
//         "line": 155,
//         "comment": "either return JSX element or null. returning empty string is not good practice :)",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,313 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import CheckCircleIcon from '@mui/icons-material/CheckCircle'\n+import CircleOutlinedIcon from '@mui/icons-material/CircleOutlined'\n+import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\n+import TaskAltIcon from '@mui/icons-material/TaskAlt'\n+import {\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableHead,\n+    TableRow,\n+    Typography,\n+    Checkbox,\n+    TableContainer,\n+    Box,\n+    Button\n+} from '@mui/material'\n+import { blue, red } from '@mui/material/colors'\n+\n+import { SortState } from '../../../services/overview/constants/sort-states'\n+import { TodoFilterCategory } from '../../../services/overview/constants/todo-filter-category'\n+import { TodoFilterOptions } from '../../../services/overview/constants/todo-filter-options'\n+import {\n+    sortToDosInAscending,\n+    sortToDosInDescending\n+} from '../../../services/overview/todo-overview/service'\n+import {\n+    TodoOverview,\n+    TodoOverviewDetail\n+} from '../../../services/overview/todo-overview/types'\n+import { FilteredCategories } from '../../../services/overview/types'\n+import { IconMoreStyled, tableStyles } from './styled'\n+\n+type Props = {\n+    todoOverview: TodoOverview\n+    filter: FilteredCategories\n+}\n+\n+const ToDodetailsTable: FC<Props> = ({ todoOverview, filter }) => {\n+    const { t } = useTranslation('overview')\n+    const [sortedTodoOverview, setSortedTodoOverview] =\n+        useState<TodoOverview>(todoOverview)\n+\n+    const setCreatedIn = (toDo: TodoOverviewDetail) => {\n+        const createOn = toDo.oneToOneDetail.finishDate\n+        const createOnString = createOn ? createOn.substring(0, 10) : ''\n+        if (createOn === null) return '1:1 with Deleted'\n+        return (\n+            <Box>\n+                <Typography variant='body2'>\n+                    1:1 with {toDo.otherParticipantName}\n+                </Typography>\n+                <Typography variant='body2'>{createOnString}</Typography>\n+            </Box>\n+        )\n+    }\n+\n+    const changeStatusButton = (toDo: TodoOverviewDetail) => {\n+        if (!toDo.done && !toDo.archived) {\n+            return (\n+                <Box\n+                    display='flex'\n+                    justifyContent='flex-end'\n+                    alignContent='center'\n+                >\n+                    <IconMoreStyled\n+                        sx={{ color: blue[500] }}\n+                        onClick={() => {\n+                            toDo.archived = true\n+                            setSortedTodoOverview({\n+                                ...sortedTodoOverview,\n+                                todoOverviewDetails: [\n+                                    ...sortedTodoOverview.todoOverviewDetails\n+                                ]\n+                            })\n+                        }}\n+                    />\n+                </Box>\n+            )\n+        }\n+        if (toDo.archived) {\n+            return (\n+                <Box\n+                    display='flex'\n+                    justifyContent='space-between'\n+                    alignContent='center'\n+                >\n+                    <Typography color='textSecondary' variant='body2'>\n+                        {toDo.archivedDate}\n+                    </Typography>\n+                    <IconMoreStyled\n+                        sx={{ color: blue[500], alignContent: 'flex-end' }}\n+                        onClick={() => {\n+                            toDo.archived = false\n+                            setSortedTodoOverview({\n+                                ...sortedTodoOverview,\n+                                todoOverviewDetails: [\n+                                    ...sortedTodoOverview.todoOverviewDetails\n+                                ]\n+                            })\n+                        }}\n+                    />\n+                </Box>\n+            )\n+        }\n+        return (\n+            <Box display='flex' justifyContent='flex-end' alignContent='center'>\n+                <Typography variant='body2' color='textSecondary'>\n+                    {t('Completed')} {toDo.doneOn}\n+                </Typography>\n+            </Box>\n+        )\n+    }\n+\n+    const setTableRowBackground = (toDo: TodoOverviewDetail) => {\n+        if (toDo.done) {\n+            return tableStyles.tableRowDone\n+        }\n+        if (toDo.archived) {\n+            return tableStyles.tableRowArchived\n+        }\n+        return undefined\n+    }\n+\n+    const toggleToDoSort = () => {\n+        const newTodoOverview = { ...sortedTodoOverview }\n+        if (newTodoOverview.sortState === SortState.DESC) {\n+            sortToDosInAscending(newTodoOverview)\n+            newTodoOverview.sortState = SortState.ASC\n+        } else if (newTodoOverview.sortState === SortState.ASC) {\n+            sortToDosInDescending(newTodoOverview)\n+            newTodoOverview.sortState = SortState.DESC\n+        }\n+        setSortedTodoOverview(newTodoOverview)\n+    }\n+\n+    const setCheckboxType = (toDo: TodoOverviewDetail) => {\n+        if (toDo.done) {\n+            return (\n+                <Checkbox\n+                    disableRipple\n+                    icon={\n+                        <TaskAltIcon\n+                            sx={{ color: blue[500] }}\n+                            fontSize='small'\n+                        />\n+                    }\n+                    checkedIcon={<TaskAltIcon fontSize='small' />}\n+                />\n+            )\n+        }\n+        if (toDo.archived) {\n+            return ''",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669884109",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/todo-overview/ToDoDetailsTable.tsx",
//         "line": 232,
//         "comment": "remove this console",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,313 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import CheckCircleIcon from '@mui/icons-material/CheckCircle'\n+import CircleOutlinedIcon from '@mui/icons-material/CircleOutlined'\n+import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\n+import TaskAltIcon from '@mui/icons-material/TaskAlt'\n+import {\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableHead,\n+    TableRow,\n+    Typography,\n+    Checkbox,\n+    TableContainer,\n+    Box,\n+    Button\n+} from '@mui/material'\n+import { blue, red } from '@mui/material/colors'\n+\n+import { SortState } from '../../../services/overview/constants/sort-states'\n+import { TodoFilterCategory } from '../../../services/overview/constants/todo-filter-category'\n+import { TodoFilterOptions } from '../../../services/overview/constants/todo-filter-options'\n+import {\n+    sortToDosInAscending,\n+    sortToDosInDescending\n+} from '../../../services/overview/todo-overview/service'\n+import {\n+    TodoOverview,\n+    TodoOverviewDetail\n+} from '../../../services/overview/todo-overview/types'\n+import { FilteredCategories } from '../../../services/overview/types'\n+import { IconMoreStyled, tableStyles } from './styled'\n+\n+type Props = {\n+    todoOverview: TodoOverview\n+    filter: FilteredCategories\n+}\n+\n+const ToDodetailsTable: FC<Props> = ({ todoOverview, filter }) => {\n+    const { t } = useTranslation('overview')\n+    const [sortedTodoOverview, setSortedTodoOverview] =\n+        useState<TodoOverview>(todoOverview)\n+\n+    const setCreatedIn = (toDo: TodoOverviewDetail) => {\n+        const createOn = toDo.oneToOneDetail.finishDate\n+        const createOnString = createOn ? createOn.substring(0, 10) : ''\n+        if (createOn === null) return '1:1 with Deleted'\n+        return (\n+            <Box>\n+                <Typography variant='body2'>\n+                    1:1 with {toDo.otherParticipantName}\n+                </Typography>\n+                <Typography variant='body2'>{createOnString}</Typography>\n+            </Box>\n+        )\n+    }\n+\n+    const changeStatusButton = (toDo: TodoOverviewDetail) => {\n+        if (!toDo.done && !toDo.archived) {\n+            return (\n+                <Box\n+                    display='flex'\n+                    justifyContent='flex-end'\n+                    alignContent='center'\n+                >\n+                    <IconMoreStyled\n+                        sx={{ color: blue[500] }}\n+                        onClick={() => {\n+                            toDo.archived = true\n+                            setSortedTodoOverview({\n+                                ...sortedTodoOverview,\n+                                todoOverviewDetails: [\n+                                    ...sortedTodoOverview.todoOverviewDetails\n+                                ]\n+                            })\n+                        }}\n+                    />\n+                </Box>\n+            )\n+        }\n+        if (toDo.archived) {\n+            return (\n+                <Box\n+                    display='flex'\n+                    justifyContent='space-between'\n+                    alignContent='center'\n+                >\n+                    <Typography color='textSecondary' variant='body2'>\n+                        {toDo.archivedDate}\n+                    </Typography>\n+                    <IconMoreStyled\n+                        sx={{ color: blue[500], alignContent: 'flex-end' }}\n+                        onClick={() => {\n+                            toDo.archived = false\n+                            setSortedTodoOverview({\n+                                ...sortedTodoOverview,\n+                                todoOverviewDetails: [\n+                                    ...sortedTodoOverview.todoOverviewDetails\n+                                ]\n+                            })\n+                        }}\n+                    />\n+                </Box>\n+            )\n+        }\n+        return (\n+            <Box display='flex' justifyContent='flex-end' alignContent='center'>\n+                <Typography variant='body2' color='textSecondary'>\n+                    {t('Completed')} {toDo.doneOn}\n+                </Typography>\n+            </Box>\n+        )\n+    }\n+\n+    const setTableRowBackground = (toDo: TodoOverviewDetail) => {\n+        if (toDo.done) {\n+            return tableStyles.tableRowDone\n+        }\n+        if (toDo.archived) {\n+            return tableStyles.tableRowArchived\n+        }\n+        return undefined\n+    }\n+\n+    const toggleToDoSort = () => {\n+        const newTodoOverview = { ...sortedTodoOverview }\n+        if (newTodoOverview.sortState === SortState.DESC) {\n+            sortToDosInAscending(newTodoOverview)\n+            newTodoOverview.sortState = SortState.ASC\n+        } else if (newTodoOverview.sortState === SortState.ASC) {\n+            sortToDosInDescending(newTodoOverview)\n+            newTodoOverview.sortState = SortState.DESC\n+        }\n+        setSortedTodoOverview(newTodoOverview)\n+    }\n+\n+    const setCheckboxType = (toDo: TodoOverviewDetail) => {\n+        if (toDo.done) {\n+            return (\n+                <Checkbox\n+                    disableRipple\n+                    icon={\n+                        <TaskAltIcon\n+                            sx={{ color: blue[500] }}\n+                            fontSize='small'\n+                        />\n+                    }\n+                    checkedIcon={<TaskAltIcon fontSize='small' />}\n+                />\n+            )\n+        }\n+        if (toDo.archived) {\n+            return ''\n+        }\n+        return (\n+            <Checkbox\n+                disableRipple\n+                icon={<CircleOutlinedIcon fontSize='small' />}\n+                checkedIcon={<CheckCircleIcon fontSize='small' />}\n+            />\n+        )\n+    }\n+\n+    const filterToDosByCategory = (detail: TodoOverviewDetail): boolean => {\n+        if (filter.size === 1) {\n+            if (filter.has(TodoFilterCategory.TODO_STATE)) {\n+                return (\n+                    (filter\n+                        .get(TodoFilterCategory.TODO_STATE)\n+                        ?.includes(TodoFilterOptions.ACTIVE)\n+                        ? !detail.done && !detail.archived\n+                        : false) ||\n+                    (filter\n+                        .get(TodoFilterCategory.TODO_STATE)\n+                        ?.includes(TodoFilterOptions.ARCHIVED)\n+                        ? detail.archived\n+                        : false) ||\n+                    (filter\n+                        .get(TodoFilterCategory.TODO_STATE)\n+                        ?.includes(TodoFilterOptions.COMPLETED)\n+                        ? detail.done\n+                        : false)\n+                )\n+            }\n+            if (filter.has(TodoFilterCategory.TODO_DEADLINE)) {\n+                return (\n+                    (filter\n+                        .get(TodoFilterCategory.TODO_DEADLINE)\n+                        ?.includes(TodoFilterOptions.OVERDUE)\n+                        ? detail.overdue && !detail.archived\n+                        : false) ||\n+                    (filter\n+                        .get(TodoFilterCategory.TODO_DEADLINE)\n+                        ?.includes(TodoFilterOptions.NO_DEADLINE)\n+                        ? !detail.deadline && !detail.archived\n+                        : false)\n+                )\n+            }\n+        }\n+        return (\n+            ((filter\n+                .get(TodoFilterCategory.TODO_STATE)\n+                ?.includes(TodoFilterOptions.ACTIVE)\n+                ? !detail.done && !detail.archived\n+                : false) ||\n+                (filter\n+                    .get(TodoFilterCategory.TODO_STATE)\n+                    ?.includes(TodoFilterOptions.ARCHIVED)\n+                    ? detail.archived\n+                    : false) ||\n+                (filter\n+                    .get(TodoFilterCategory.TODO_STATE)\n+                    ?.includes(TodoFilterOptions.COMPLETED)\n+                    ? detail.done\n+                    : false)) &&\n+            ((filter\n+                .get(TodoFilterCategory.TODO_DEADLINE)\n+                ?.includes(TodoFilterOptions.OVERDUE)\n+                ? detail.overdue\n+                : false) ||\n+                (filter\n+                    .get(TodoFilterCategory.TODO_DEADLINE)\n+                    ?.includes(TodoFilterOptions.NO_DEADLINE)\n+                    ? !detail.deadline\n+                    : false))\n+        )\n+    }\n+\n+    const filterTodoOverviewDetails = (details: TodoOverviewDetail[]) => {\n+        console.log(filter)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669887950",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/todo-overview/ToDoDetailsTable.tsx",
//         "line": 166,
//         "comment": "Can we write this in more readable way ?  Extract the logics into functions if possible and do the code commenting wherever possible so that it can be understood easily.",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,313 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import CheckCircleIcon from '@mui/icons-material/CheckCircle'\n+import CircleOutlinedIcon from '@mui/icons-material/CircleOutlined'\n+import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\n+import TaskAltIcon from '@mui/icons-material/TaskAlt'\n+import {\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableHead,\n+    TableRow,\n+    Typography,\n+    Checkbox,\n+    TableContainer,\n+    Box,\n+    Button\n+} from '@mui/material'\n+import { blue, red } from '@mui/material/colors'\n+\n+import { SortState } from '../../../services/overview/constants/sort-states'\n+import { TodoFilterCategory } from '../../../services/overview/constants/todo-filter-category'\n+import { TodoFilterOptions } from '../../../services/overview/constants/todo-filter-options'\n+import {\n+    sortToDosInAscending,\n+    sortToDosInDescending\n+} from '../../../services/overview/todo-overview/service'\n+import {\n+    TodoOverview,\n+    TodoOverviewDetail\n+} from '../../../services/overview/todo-overview/types'\n+import { FilteredCategories } from '../../../services/overview/types'\n+import { IconMoreStyled, tableStyles } from './styled'\n+\n+type Props = {\n+    todoOverview: TodoOverview\n+    filter: FilteredCategories\n+}\n+\n+const ToDodetailsTable: FC<Props> = ({ todoOverview, filter }) => {\n+    const { t } = useTranslation('overview')\n+    const [sortedTodoOverview, setSortedTodoOverview] =\n+        useState<TodoOverview>(todoOverview)\n+\n+    const setCreatedIn = (toDo: TodoOverviewDetail) => {\n+        const createOn = toDo.oneToOneDetail.finishDate\n+        const createOnString = createOn ? createOn.substring(0, 10) : ''\n+        if (createOn === null) return '1:1 with Deleted'\n+        return (\n+            <Box>\n+                <Typography variant='body2'>\n+                    1:1 with {toDo.otherParticipantName}\n+                </Typography>\n+                <Typography variant='body2'>{createOnString}</Typography>\n+            </Box>\n+        )\n+    }\n+\n+    const changeStatusButton = (toDo: TodoOverviewDetail) => {\n+        if (!toDo.done && !toDo.archived) {\n+            return (\n+                <Box\n+                    display='flex'\n+                    justifyContent='flex-end'\n+                    alignContent='center'\n+                >\n+                    <IconMoreStyled\n+                        sx={{ color: blue[500] }}\n+                        onClick={() => {\n+                            toDo.archived = true\n+                            setSortedTodoOverview({\n+                                ...sortedTodoOverview,\n+                                todoOverviewDetails: [\n+                                    ...sortedTodoOverview.todoOverviewDetails\n+                                ]\n+                            })\n+                        }}\n+                    />\n+                </Box>\n+            )\n+        }\n+        if (toDo.archived) {\n+            return (\n+                <Box\n+                    display='flex'\n+                    justifyContent='space-between'\n+                    alignContent='center'\n+                >\n+                    <Typography color='textSecondary' variant='body2'>\n+                        {toDo.archivedDate}\n+                    </Typography>\n+                    <IconMoreStyled\n+                        sx={{ color: blue[500], alignContent: 'flex-end' }}\n+                        onClick={() => {\n+                            toDo.archived = false\n+                            setSortedTodoOverview({\n+                                ...sortedTodoOverview,\n+                                todoOverviewDetails: [\n+                                    ...sortedTodoOverview.todoOverviewDetails\n+                                ]\n+                            })\n+                        }}\n+                    />\n+                </Box>\n+            )\n+        }\n+        return (\n+            <Box display='flex' justifyContent='flex-end' alignContent='center'>\n+                <Typography variant='body2' color='textSecondary'>\n+                    {t('Completed')} {toDo.doneOn}\n+                </Typography>\n+            </Box>\n+        )\n+    }\n+\n+    const setTableRowBackground = (toDo: TodoOverviewDetail) => {\n+        if (toDo.done) {\n+            return tableStyles.tableRowDone\n+        }\n+        if (toDo.archived) {\n+            return tableStyles.tableRowArchived\n+        }\n+        return undefined\n+    }\n+\n+    const toggleToDoSort = () => {\n+        const newTodoOverview = { ...sortedTodoOverview }\n+        if (newTodoOverview.sortState === SortState.DESC) {\n+            sortToDosInAscending(newTodoOverview)\n+            newTodoOverview.sortState = SortState.ASC\n+        } else if (newTodoOverview.sortState === SortState.ASC) {\n+            sortToDosInDescending(newTodoOverview)\n+            newTodoOverview.sortState = SortState.DESC\n+        }\n+        setSortedTodoOverview(newTodoOverview)\n+    }\n+\n+    const setCheckboxType = (toDo: TodoOverviewDetail) => {\n+        if (toDo.done) {\n+            return (\n+                <Checkbox\n+                    disableRipple\n+                    icon={\n+                        <TaskAltIcon\n+                            sx={{ color: blue[500] }}\n+                            fontSize='small'\n+                        />\n+                    }\n+                    checkedIcon={<TaskAltIcon fontSize='small' />}\n+                />\n+            )\n+        }\n+        if (toDo.archived) {\n+            return ''\n+        }\n+        return (\n+            <Checkbox\n+                disableRipple\n+                icon={<CircleOutlinedIcon fontSize='small' />}\n+                checkedIcon={<CheckCircleIcon fontSize='small' />}\n+            />\n+        )\n+    }\n+\n+    const filterToDosByCategory = (detail: TodoOverviewDetail): boolean => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669900851",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/todo-overview/styled.ts",
//         "line": 27,
//         "comment": "lets try not to over ride the mui tags",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,81 @@\n+import ArrowForwardIosSharpIcon from '@mui/icons-material/ArrowForwardIosSharp'\n+import MoreVertOutlinedIcon from '@mui/icons-material/MoreVertOutlined'\n+import { TableContainer } from '@mui/material'\n+import MuiAccordionSummary from '@mui/material/AccordionSummary'\n+import ButtonBase from '@mui/material/ButtonBase'\n+import { lightBlue, lightGreen, blue } from '@mui/material/colors'\n+import styled from '@mui/system/styled'\n+\n+export const StyledAccordionSummary = styled(MuiAccordionSummary)(\n+    ({ theme }) => ({\n+        '& .MuiAccordionSummary-expandIconWrapper': {\n+            marginLeft: theme.spacing(0),\n+            transformOrigin: 'center',\n+            transition: 'transform 0.3s ease'\n+        },\n+        '& .MuiAccordionSummary-expandIconWrapper.Mui-expanded': {\n+            transform: 'rotate(90deg)'\n+        },\n+        '& .MuiAccordionSummary-content': {\n+            marginLeft: theme.spacing(1),\n+            marginTop: theme.spacing(0.5),\n+            marginBottom: theme.spacing(0.5)\n+        },\n+        backgroundColor: theme.palette.mode === 'dark' ? 'lightblue' : 'white',\n+        '&.Mui-expanded': {\n+            backgroundColor: lightBlue[50]\n+        }",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1669916976",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/OneToOneOverview.tsx",
//         "line": 79,
//         "comment": "yes, because if I am removing this check, error is coming \"object is possibly 'undefined''\r\n",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -3,61 +3,87 @@ import { useTranslation } from 'react-i18next'\n \n import { Box, Container, Grid } from '@mui/material'\n \n+import { OTOFilterOptions } from '../../../services/overview/constants/oto-filter-options'\n import {\n-    UsersData,\n     OverviewItem,\n-    FilterOptions,\n-    FilterGroups\n+    UsersData\n+} from '../../../services/overview/oto-overview/types'\n+import {\n+    FilterOptionNew,\n+    FilterCategory,\n+    FilteredCategories\n } from '../../../services/overview/types'\n import FilterPanel from './FilterPanel'\n import MeetingsTable from './MeetingsTable'\n import { mock } from './MockData'\n import { RoleAndResponsibility } from './types'\n \n-const filterOptions: FilterOptions = [\n-    { label: 'My manager', value: 'manager' },\n-    { label: 'My employees', value: 'employee' },\n-    { label: 'My HR manager', value: 'hrManager' },\n-    { label: 'My HR employees', value: 'hrEmployees' },\n-    { label: 'Others', value: 'others' }\n-]\n-\n-const filterGroups: FilterGroups = [\n-    {\n-        title: 'Meetings with',\n-        options: filterOptions\n-    }\n-]\n-\n const OneToOneOverview: React.FC = () => {\n     const { t } = useTranslation('overview')\n     const userData: UsersData = mock\n     const [overviewData, setOverviewData] = useState<OverviewItem[]>(\n         mock.oneToOneOverview\n     )\n-    const [filter, setFilter] = useState<string[]>([])\n+    const [filter, setFilter] = useState<FilteredCategories>(new Map())\n \n     const roleAndResponsibility: RoleAndResponsibility = {\n         manager: userData.manager,\n         employee: userData.employee,\n         hrManager: userData.hrManager,\n         hrEmployees: userData.hrEmployees\n     }\n+    const filterOptions: FilterOptionNew[] = [\n+        {\n+            value: OTOFilterOptions.MANAGER,\n+            display: t('My manager'),\n+            state: false\n+        },\n+        {\n+            value: OTOFilterOptions.EMPLOYEE,\n+            display: t('My employees'),\n+            state: false\n+        },\n+        {\n+            value: OTOFilterOptions.HR_MANAGER,\n+            display: t('My HR manager'),\n+            state: false\n+        },\n+        {\n+            value: OTOFilterOptions.HR_EMPLOYEES,\n+            display: t('My HR employees'),\n+            state: false\n+        },\n+        {\n+            value: OTOFilterOptions.OTHERS,\n+            display: t('Others'),\n+            state: false\n+        }\n+    ]\n+\n+    const filterCategories: FilterCategory[] = [\n+        {\n+            id: 'meetingWith',\n+            displayName: t('Meetings with'),\n+            componentType: 'checkbox',\n+            options: filterOptions\n+        }\n+    ]\n \n     useEffect(() => {\n         const filteredEmployeeIds: Set<string> = new Set()\n-        const filterSet = new Set(filter)\n-        if (filterSet.size === 0) {\n+        if (filter.size === 0) {\n             setOverviewData(mock.oneToOneOverview)\n             return\n         }\n-        filterSet.forEach((key) => {\n-            if (roleAndResponsibility[key]) {\n-                roleAndResponsibility[key].forEach((employeeId) => {\n-                    filteredEmployeeIds.add(employeeId)\n-                })\n-            }\n-        })\n+        if (filter.has('meetingWith')) {\n+            filter.get('meetingWith')?.forEach((key) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1671743123",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/MeetingsTable.tsx",
//         "line": 47,
//         "comment": "Will try to create it",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,130 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\n+import {\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableHead,\n+    TableRow,\n+    Typography,\n+    Avatar,\n+    Checkbox,\n+    Button\n+} from '@mui/material'\n+\n+import { SortCriterion } from '../../../services/overview/constants/oto-sort-criteria'\n+import { SortState } from '../../../services/overview/constants/sort-states'\n+import { OverviewItem } from '../../../services/overview/oto-overview/types'\n+import { StyledTableContainer, UserStatusStyle, NameAlign } from './styled'\n+\n+type Props = {\n+    overviewData: OverviewItem[]\n+    setOverviewData: React.Dispatch<React.SetStateAction<OverviewItem[]>>\n+}\n+\n+const MeetingsTable: FC<Props> = ({ overviewData, setOverviewData }) => {\n+    const { t } = useTranslation('overview')\n+    const [currentSortState, setCurrentSortState] = useState<SortState>()\n+    const [currentSortCriterion, setCurrentSortCriterion] =\n+        useState<SortCriterion>()\n+\n+    const sortOverview = (sortCriterion: SortCriterion): void => {\n+        if (sortCriterion !== currentSortCriterion) {\n+            // Initial sort order\n+            sortData(sortCriterion, SortState.ASC)\n+        } else {\n+            // Toggle sort order\n+            const newSortState =\n+                currentSortState === SortState.ASC\n+                    ? SortState.DESC\n+                    : SortState.ASC\n+            sortData(sortCriterion, newSortState)\n+        }\n+    }\n+\n+    const sortData = (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1671976773",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/overview/onetoone-overview/OneToOneOverview.tsx",
//         "line": 79,
//         "comment": "if(undefined) is always false so I don't think we need this check. Maybe you can check the error again :)",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -3,61 +3,87 @@ import { useTranslation } from 'react-i18next'\n \n import { Box, Container, Grid } from '@mui/material'\n \n+import { OTOFilterOptions } from '../../../services/overview/constants/oto-filter-options'\n import {\n-    UsersData,\n     OverviewItem,\n-    FilterOptions,\n-    FilterGroups\n+    UsersData\n+} from '../../../services/overview/oto-overview/types'\n+import {\n+    FilterOptionNew,\n+    FilterCategory,\n+    FilteredCategories\n } from '../../../services/overview/types'\n import FilterPanel from './FilterPanel'\n import MeetingsTable from './MeetingsTable'\n import { mock } from './MockData'\n import { RoleAndResponsibility } from './types'\n \n-const filterOptions: FilterOptions = [\n-    { label: 'My manager', value: 'manager' },\n-    { label: 'My employees', value: 'employee' },\n-    { label: 'My HR manager', value: 'hrManager' },\n-    { label: 'My HR employees', value: 'hrEmployees' },\n-    { label: 'Others', value: 'others' }\n-]\n-\n-const filterGroups: FilterGroups = [\n-    {\n-        title: 'Meetings with',\n-        options: filterOptions\n-    }\n-]\n-\n const OneToOneOverview: React.FC = () => {\n     const { t } = useTranslation('overview')\n     const userData: UsersData = mock\n     const [overviewData, setOverviewData] = useState<OverviewItem[]>(\n         mock.oneToOneOverview\n     )\n-    const [filter, setFilter] = useState<string[]>([])\n+    const [filter, setFilter] = useState<FilteredCategories>(new Map())\n \n     const roleAndResponsibility: RoleAndResponsibility = {\n         manager: userData.manager,\n         employee: userData.employee,\n         hrManager: userData.hrManager,\n         hrEmployees: userData.hrEmployees\n     }\n+    const filterOptions: FilterOptionNew[] = [\n+        {\n+            value: OTOFilterOptions.MANAGER,\n+            display: t('My manager'),\n+            state: false\n+        },\n+        {\n+            value: OTOFilterOptions.EMPLOYEE,\n+            display: t('My employees'),\n+            state: false\n+        },\n+        {\n+            value: OTOFilterOptions.HR_MANAGER,\n+            display: t('My HR manager'),\n+            state: false\n+        },\n+        {\n+            value: OTOFilterOptions.HR_EMPLOYEES,\n+            display: t('My HR employees'),\n+            state: false\n+        },\n+        {\n+            value: OTOFilterOptions.OTHERS,\n+            display: t('Others'),\n+            state: false\n+        }\n+    ]\n+\n+    const filterCategories: FilterCategory[] = [\n+        {\n+            id: 'meetingWith',\n+            displayName: t('Meetings with'),\n+            componentType: 'checkbox',\n+            options: filterOptions\n+        }\n+    ]\n \n     useEffect(() => {\n         const filteredEmployeeIds: Set<string> = new Set()\n-        const filterSet = new Set(filter)\n-        if (filterSet.size === 0) {\n+        if (filter.size === 0) {\n             setOverviewData(mock.oneToOneOverview)\n             return\n         }\n-        filterSet.forEach((key) => {\n-            if (roleAndResponsibility[key]) {\n-                roleAndResponsibility[key].forEach((employeeId) => {\n-                    filteredEmployeeIds.add(employeeId)\n-                })\n-            }\n-        })\n+        if (filter.has('meetingWith')) {\n+            filter.get('meetingWith')?.forEach((key) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1673408610",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/PageBar/PageBar.tsx",
//         "line": null,
//         "comment": "need to remove :)",
//         "commitId": "6b51354f5b415b58b4c459465e3f9240e438c07d",
//         "codeSnippet": "@@ -36,9 +36,12 @@ const PageBar: ForwardRefRenderFunction<HTMLLIElement, Props> = (\n     const dragable = !isReadOnly && !isEqual(type, PageType.MeetingNotes)\n     const isDeletable =\n         !isReadOnly &&\n-        isEqual(publishedStatus, 'DRAFT') &&\n+        (isEqual(publishedStatus, 'DRAFT') ||\n+            isEqual(publishedStatus, 'MAINTENANCE_MODE')) &&\n         isEqual(type, PageType.Custom)\n \n+    console.log(isDeletable, isReadOnly, publishedStatus, type)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/27#discussion_r1677592578",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/Components/MoveableLiItem/MoveableLiItem.tsx",
//         "line": 49,
//         "comment": "Maybe use empty string?",
//         "commitId": "a6c5aaa75e58dc29ab57f50b4d825ab17fdb7e41",
//         "codeSnippet": "@@ -26,7 +30,24 @@ const MoveableLiItem: ForwardRefRenderFunction<\n                         </FlexBox>\n                     </Grid>\n                     <Grid item sm={11}>\n-                        <Typography ml={1}>{title}</Typography>\n+                        <FlexBox\n+                            flexDirection='column'\n+                            justifyContent='center'\n+                            minHeight={45.5}\n+                        >\n+                            <Typography ml={1} variant='body1'>\n+                                {title}\n+                            </Typography>\n+                            {caption ? (\n+                                <Typography\n+                                    ml={1}\n+                                    variant='body2'\n+                                    color='text.disabled'\n+                                >\n+                                    {caption}\n+                                </Typography>\n+                            ) : null}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/34#discussion_r1689100365",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/Components/MoveableLiItem/MoveableLiItem.tsx",
//         "line": 49,
//         "comment": "I have tested with Null and its working fine. \r\n",
//         "commitId": "a6c5aaa75e58dc29ab57f50b4d825ab17fdb7e41",
//         "codeSnippet": "@@ -26,7 +30,24 @@ const MoveableLiItem: ForwardRefRenderFunction<\n                         </FlexBox>\n                     </Grid>\n                     <Grid item sm={11}>\n-                        <Typography ml={1}>{title}</Typography>\n+                        <FlexBox\n+                            flexDirection='column'\n+                            justifyContent='center'\n+                            minHeight={45.5}\n+                        >\n+                            <Typography ml={1} variant='body1'>\n+                                {title}\n+                            </Typography>\n+                            {caption ? (\n+                                <Typography\n+                                    ml={1}\n+                                    variant='body2'\n+                                    color='text.disabled'\n+                                >\n+                                    {caption}\n+                                </Typography>\n+                            ) : null}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/34#discussion_r1689105807",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one/OneToOne.tsx",
//         "line": null,
//         "comment": "remove console.log statements :)",
//         "commitId": "3c74dadf47de30ea96df1b6ac1eb52f1de196d26",
//         "codeSnippet": "@@ -0,0 +1,126 @@\n+import React, { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import * as A from 'fp-ts/Array'\n+import * as IOO from 'fp-ts/IOOption'\n+import { pipe } from 'fp-ts/lib/function'\n+import { isEqual } from 'lodash/fp'\n+\n+import { OneToOneOverview } from '@/services/one-to-one'\n+import { Nullable } from '@/types/general'\n+import { setStateIO } from '@/utils/IO'\n+import { Layout } from '@catalystone/react-core-ui'\n+import { CircularProgress } from '@mui/material'\n+import { GridRowParams } from '@mui/x-data-grid-pro'\n+\n+import EmployeeDetails from '../employee-details'\n+import OneToOneOverviewDataTable from '../one-to-one-overview/OneToOneOverviewDataTable'\n+import TodoOverview from '../todo-overview'\n+import OneToOneProvider from './Provider/OneToOneProvider'\n+import useOneToOne from './Provider/useOneToOne'\n+\n+const OneToOne: FC = () => {\n+    const { t } = useTranslation('one-to-one')\n+    const { oneToOne, loading, tab, setTab } = useOneToOne()\n+\n+    const [selectedEmployee, setSelectedEmployee] =\n+        useState<Nullable<OneToOneOverview>>(null)\n+\n+    const handleClick = (e: GridRowParams) => {\n+        pipe(\n+            oneToOne.oneToOneOverviews,\n+            A.findFirst((entry) => entry.employeeId === e.id),\n+            IOO.fromOption,\n+            IOO.tapIO(setStateIO(setSelectedEmployee))\n+        )()\n+    }\n+\n+    const handleNew = () => {}\n+\n+    if (loading) {\n+        return (\n+            <CircularProgress\n+                sx={{ left: '50%', bottom: '50%', position: 'absolute' }}\n+            />\n+        )\n+    }\n+\n+    console.log(tab)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/36#discussion_r1689236424",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-overview/Filters.tsx",
//         "line": 5,
//         "comment": "can we have some meaningful variable names instead of A or O for better readability for below code?",
//         "commitId": "3c74dadf47de30ea96df1b6ac1eb52f1de196d26",
//         "codeSnippet": "@@ -0,0 +1,133 @@\n+import React, { ChangeEvent, FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import * as A from 'fp-ts/Array'\n+import * as O from 'fp-ts/Option'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/36#discussion_r1689242529",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one/OneToOne.tsx",
//         "line": null,
//         "comment": "remove.",
//         "commitId": "3c74dadf47de30ea96df1b6ac1eb52f1de196d26",
//         "codeSnippet": "@@ -0,0 +1,126 @@\n+import React, { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import * as A from 'fp-ts/Array'\n+import * as IOO from 'fp-ts/IOOption'\n+import { pipe } from 'fp-ts/lib/function'\n+import { isEqual } from 'lodash/fp'\n+\n+import { OneToOneOverview } from '@/services/one-to-one'\n+import { Nullable } from '@/types/general'\n+import { setStateIO } from '@/utils/IO'\n+import { Layout } from '@catalystone/react-core-ui'\n+import { CircularProgress } from '@mui/material'\n+import { GridRowParams } from '@mui/x-data-grid-pro'\n+\n+import EmployeeDetails from '../employee-details'\n+import OneToOneOverviewDataTable from '../one-to-one-overview/OneToOneOverviewDataTable'\n+import TodoOverview from '../todo-overview'\n+import OneToOneProvider from './Provider/OneToOneProvider'\n+import useOneToOne from './Provider/useOneToOne'\n+\n+const OneToOne: FC = () => {\n+    const { t } = useTranslation('one-to-one')\n+    const { oneToOne, loading, tab, setTab } = useOneToOne()\n+\n+    const [selectedEmployee, setSelectedEmployee] =\n+        useState<Nullable<OneToOneOverview>>(null)\n+\n+    const handleClick = (e: GridRowParams) => {\n+        pipe(\n+            oneToOne.oneToOneOverviews,\n+            A.findFirst((entry) => entry.employeeId === e.id),\n+            IOO.fromOption,\n+            IOO.tapIO(setStateIO(setSelectedEmployee))\n+        )()\n+    }\n+\n+    const handleNew = () => {}\n+\n+    if (loading) {\n+        return (\n+            <CircularProgress\n+                sx={{ left: '50%', bottom: '50%', position: 'absolute' }}\n+            />\n+        )\n+    }\n+\n+    console.log(tab)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/36#discussion_r1689244096",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one/Provider/OneToOneProvider.tsx",
//         "line": null,
//         "comment": "remove unwanted code if possible",
//         "commitId": "3c74dadf47de30ea96df1b6ac1eb52f1de196d26",
//         "codeSnippet": "@@ -0,0 +1,118 @@\n+import {\n+    Dispatch,\n+    SetStateAction,\n+    createContext,\n+    useEffect,\n+    useMemo,\n+    useState\n+} from 'react'\n+import { useNavigate } from 'react-router-dom'\n+\n+import { OneToOne, getOneToOnes } from '@/services/one-to-one'\n+import { TodoOverview, getTodos } from '@/services/to-do'\n+import { FCC } from '@/types/react'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n+\n+type ContextProps = {\n+    oneToOne: OneToOne\n+    setOneToOne: Dispatch<SetStateAction<OneToOne>>\n+    todos: TodoOverview[]\n+    setTodos: Dispatch<SetStateAction<TodoOverview[]>>\n+    tab: number\n+    setTab: Dispatch<SetStateAction<number>>\n+    loading: boolean\n+}\n+\n+export const TemplateContext = createContext<ContextProps>({\n+    loading: false,\n+    oneToOne: {\n+        hrEmployees: [],\n+        hrManager: null,\n+        manager: { id: '', profileActive: false },\n+        myProfileCsrView: {\n+            csrInMyProfile: [],\n+            myCustomRoles: []\n+        },\n+        oneToOneOverviews: [],\n+        subOrdinates: []\n+    },\n+    setOneToOne: () => {},\n+    todos: [],\n+    setTodos: () => {},\n+    tab: 0,\n+    setTab: () => {}\n+})\n+\n+const OneToOneProvider: FCC = ({ children }) => {\n+    const navigate = useNavigate()\n+    const { createSnack } = useSnackbar()\n+\n+    const [tab, setTab] = useState(0)\n+    const [loading, setLoading] = useState(true)\n+    const [todos, setTodos] = useState<TodoOverview[]>([])\n+    const [oneToOne, setOneToOne] = useState<OneToOne>({\n+        hrEmployees: [],\n+        hrManager: null,\n+        manager: { id: '', profileActive: false },\n+        myProfileCsrView: {\n+            csrInMyProfile: [],\n+            myCustomRoles: []\n+        },\n+        oneToOneOverviews: [],\n+        subOrdinates: []\n+    })\n+\n+    // const handleTexts = (template: TemplateRequest): TemplateRequest => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/36#discussion_r1689324837",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-overview/Filters.tsx",
//         "line": 5,
//         "comment": "This is the norm for these methods as to not bloat the code to death. With maximum line lengths etc lines will break on the simplest operations is why I use like this and not Array.filter( ",
//         "commitId": "3c74dadf47de30ea96df1b6ac1eb52f1de196d26",
//         "codeSnippet": "@@ -0,0 +1,133 @@\n+import React, { ChangeEvent, FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import * as A from 'fp-ts/Array'\n+import * as O from 'fp-ts/Option'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/36#discussion_r1689520958",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/services/overview/todo-overview/types.ts",
//         "line": 13,
//         "comment": "Wym? Null is a strict type in Typescript. If response from api is Nullable<string> then that is how it is. Undefined though is something else",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "@@ -0,0 +1,41 @@\n+import { number } from 'ts-pattern/dist/patterns'\n+\n+import { SortState } from '../constants/sort-states'\n+\n+interface OneToOneDetail {\n+    id: string | null\n+    finishDate: string | null\n+}\n+export interface TodoOverviewDetail {\n+    id: string\n+    title: string\n+    archivedDate: string | null\n+    doneOn: string | null",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1691094462",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "try to use constants instead of number.",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,24 +1,174 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n \n+import EmployeeDetailsError from '@/Components/ErrorMessage/EmployeeDetailsError'\n import FlexBox from '@/Components/FlexBox'\n-import { OneToOneOverview } from '@/services/one-to-one'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Fireworks from '@/assets/fireworks.svg'\n+import Rocket from '@/assets/rocket-new.svg'\n+import Card from '@/features/employee-details/card/Card'\n+import {\n+    OneToOneOverview,\n+    getEmployeeOneToOnes,\n+    deleteOneToOne\n+} from '@/services/one-to-one'\n+import { EmployeeOneToOneResponse } from '@/services/one-to-one/types'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import { IconButton, Box, Typography } from '@mui/material'\n+\n+import MeetingAccordion from './MeetingAccordion'\n+import MeetingTableHeader from './MeetingTableHeader'\n+import { CardHolder } from './card/styled'\n+import { StyledCircularProgress } from './styled'\n \n type Props = {\n     oto: OneToOneOverview\n     onBack: () => void\n }\n \n const EmployeeDetails: FC<Props> = ({ oto, onBack }) => {\n-    return (\n-        <FlexBox>\n-            <IconButton onClick={onBack}>\n-                <ArrowBackIcon />\n-            </IconButton>\n-            {oto.name}\n-        </FlexBox>\n-    )\n+    const { t } = useTranslation('employee-details')\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] = useState<\n+        EmployeeOneToOneResponse | undefined\n+    >()\n+    const { textParser } = useGlobal()\n+    const [completedMeetingsCount, setCompletedMeetingsCount] =\n+        useState<number>(0)\n+    const [pendingMeetingsCount, setPendingMeetingsCount] = useState<number>(0)\n+    const [error, setError] = useState<boolean>(false)\n+\n+    const handleTexts = (\n+        employeeOneToOnes: EmployeeOneToOneResponse\n+    ): EmployeeOneToOneResponse => {\n+        return {\n+            ...employeeOneToOnes,\n+            employeeOneToOneDetails:\n+                employeeOneToOnes.employeeOneToOneDetails.map((oto) => ({\n+                    ...oto,\n+                    templateName: textParser(oto.templateName)\n+                }))\n+        }\n+    }\n+\n+    const setCompletedAndPendingMeetingsCount = () => {\n+        const completedMeetings =\n+            employeeOneToOnes?.employeeOneToOneDetails.filter(\n+                (meeting) => meeting.status === 4",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1696785233",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "same",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,24 +1,174 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n \n+import EmployeeDetailsError from '@/Components/ErrorMessage/EmployeeDetailsError'\n import FlexBox from '@/Components/FlexBox'\n-import { OneToOneOverview } from '@/services/one-to-one'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Fireworks from '@/assets/fireworks.svg'\n+import Rocket from '@/assets/rocket-new.svg'\n+import Card from '@/features/employee-details/card/Card'\n+import {\n+    OneToOneOverview,\n+    getEmployeeOneToOnes,\n+    deleteOneToOne\n+} from '@/services/one-to-one'\n+import { EmployeeOneToOneResponse } from '@/services/one-to-one/types'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import { IconButton, Box, Typography } from '@mui/material'\n+\n+import MeetingAccordion from './MeetingAccordion'\n+import MeetingTableHeader from './MeetingTableHeader'\n+import { CardHolder } from './card/styled'\n+import { StyledCircularProgress } from './styled'\n \n type Props = {\n     oto: OneToOneOverview\n     onBack: () => void\n }\n \n const EmployeeDetails: FC<Props> = ({ oto, onBack }) => {\n-    return (\n-        <FlexBox>\n-            <IconButton onClick={onBack}>\n-                <ArrowBackIcon />\n-            </IconButton>\n-            {oto.name}\n-        </FlexBox>\n-    )\n+    const { t } = useTranslation('employee-details')\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] = useState<\n+        EmployeeOneToOneResponse | undefined\n+    >()\n+    const { textParser } = useGlobal()\n+    const [completedMeetingsCount, setCompletedMeetingsCount] =\n+        useState<number>(0)\n+    const [pendingMeetingsCount, setPendingMeetingsCount] = useState<number>(0)\n+    const [error, setError] = useState<boolean>(false)\n+\n+    const handleTexts = (\n+        employeeOneToOnes: EmployeeOneToOneResponse\n+    ): EmployeeOneToOneResponse => {\n+        return {\n+            ...employeeOneToOnes,\n+            employeeOneToOneDetails:\n+                employeeOneToOnes.employeeOneToOneDetails.map((oto) => ({\n+                    ...oto,\n+                    templateName: textParser(oto.templateName)\n+                }))\n+        }\n+    }\n+\n+    const setCompletedAndPendingMeetingsCount = () => {\n+        const completedMeetings =\n+            employeeOneToOnes?.employeeOneToOneDetails.filter(\n+                (meeting) => meeting.status === 4\n+            )\n+        const pendingMeetings =\n+            employeeOneToOnes?.employeeOneToOneDetails.filter(\n+                (meeting) =>\n+                    meeting.status === 1 ||\n+                    meeting.status === 2 ||\n+                    meeting.status === 3",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1696785530",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/employee-details/MeetingAccordion.tsx",
//         "line": null,
//         "comment": "try not to use undefined",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,120 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter/DateFormatter'\n+import FlexBox from '@/Components/FlexBox'\n+import { EmployeeOneToOneDetail } from '@/services/one-to-one'\n+import DeleteIcon from '@mui/icons-material/Delete'\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Typography,\n+    Accordion,\n+    AccordionSummary,\n+    AccordionDetails,\n+    Button,\n+    IconButton,\n+    Popover\n+} from '@mui/material'\n+\n+import { StyledChip, StyledMoreVertIcon, statusMap, colorMap } from './styled'\n+\n+interface MeetingAccordionProps {\n+    meeting: EmployeeOneToOneDetail\n+    onDelete: (id: string) => void\n+}\n+\n+const MeetingAccordion: FC<MeetingAccordionProps> = ({ meeting, onDelete }) => {\n+    const { t } = useTranslation('employee-details')\n+\n+    // Popover controlles\n+    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null)\n+    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n+        setAnchorEl(event.currentTarget)\n+    }\n+    const handleClose = () => {\n+        setAnchorEl(null)\n+    }\n+    const open = Boolean(anchorEl)\n+    const id = open ? 'simple-popover' : undefined",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1696793475",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/Router/Router.tsx",
//         "line": null,
//         "comment": "Clean this maybe? :)",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,6 +1,8 @@\n-import { FC, lazy, Suspense } from 'react'\n+import { Component, FC, lazy, Suspense } from 'react'\n import { createBrowserRouter, RouterProvider } from 'react-router-dom'\n \n+import { path } from 'lodash/fp'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1696812811",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "No hard coded texts ",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,92 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n \n import FlexBox from '@/Components/FlexBox'\n-import { OneToOneOverview } from '@/services/one-to-one'\n+import { OneToOneOverview, getEmployeeOneToOnes } from '@/services/one-to-one'\n+import { EmployeeOneToOneResponse } from '@/services/one-to-one/types'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import {\n+    IconButton,\n+    Box,\n+    Typography,\n+    Accordion,\n+    AccordionSummary,\n+    AccordionDetails,\n+    Chip,\n+    Button,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Paper\n+} from '@mui/material'\n+\n+import MeetingAccordion from './MeetingAccordion'\n \n type Props = {\n     oto: OneToOneOverview\n     onBack: () => void\n }\n \n const EmployeeDetails: FC<Props> = ({ oto, onBack }) => {\n+    const { createSnack } = useSnackbar()\n+    const [loading, setLoading] = useState(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =\n+        useState<EmployeeOneToOneResponse>()\n+    console.log(oto)\n+\n+    useEffect(() => {\n+        Promise.all([getEmployeeOneToOnes(oto.employeeId)])\n+            .then(([employeeOneToOnes]) => {\n+                setEmployeeOneToOnes(employeeOneToOnes)\n+            })\n+            .catch((err) => {\n+                createSnack({\n+                    alert: {\n+                        severity: 'error'\n+                    }\n+                })(err.message)\n+            })\n+            .finally(() => {\n+                setLoading(false)\n+            })\n+    }, [])\n+    console.log(employeeOneToOnes)\n+\n     return (\n-        <FlexBox>\n-            <IconButton onClick={onBack}>\n-                <ArrowBackIcon />\n-            </IconButton>\n-            {oto.name}\n-        </FlexBox>\n+        <>\n+            <FlexBox>\n+                <IconButton onClick={onBack}>\n+                    <ArrowBackIcon />\n+                </IconButton>\n+                {oto.name}\n+            </FlexBox>\n+            <Box padding={3}>\n+                <Typography variant='h6' fontWeight={600} color='text.primary'>\n+                    Your 1:1 Meetings",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1696813595",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "No clogs",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,92 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n \n import FlexBox from '@/Components/FlexBox'\n-import { OneToOneOverview } from '@/services/one-to-one'\n+import { OneToOneOverview, getEmployeeOneToOnes } from '@/services/one-to-one'\n+import { EmployeeOneToOneResponse } from '@/services/one-to-one/types'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import {\n+    IconButton,\n+    Box,\n+    Typography,\n+    Accordion,\n+    AccordionSummary,\n+    AccordionDetails,\n+    Chip,\n+    Button,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Paper\n+} from '@mui/material'\n+\n+import MeetingAccordion from './MeetingAccordion'\n \n type Props = {\n     oto: OneToOneOverview\n     onBack: () => void\n }\n \n const EmployeeDetails: FC<Props> = ({ oto, onBack }) => {\n+    const { createSnack } = useSnackbar()\n+    const [loading, setLoading] = useState(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =\n+        useState<EmployeeOneToOneResponse>()\n+    console.log(oto)\n+\n+    useEffect(() => {\n+        Promise.all([getEmployeeOneToOnes(oto.employeeId)])\n+            .then(([employeeOneToOnes]) => {\n+                setEmployeeOneToOnes(employeeOneToOnes)\n+            })\n+            .catch((err) => {\n+                createSnack({\n+                    alert: {\n+                        severity: 'error'\n+                    }\n+                })(err.message)\n+            })\n+            .finally(() => {\n+                setLoading(false)\n+            })\n+    }, [])\n+    console.log(employeeOneToOnes)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1696813694",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "You are only fetching on fn so no Promise.all",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,92 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n \n import FlexBox from '@/Components/FlexBox'\n-import { OneToOneOverview } from '@/services/one-to-one'\n+import { OneToOneOverview, getEmployeeOneToOnes } from '@/services/one-to-one'\n+import { EmployeeOneToOneResponse } from '@/services/one-to-one/types'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import {\n+    IconButton,\n+    Box,\n+    Typography,\n+    Accordion,\n+    AccordionSummary,\n+    AccordionDetails,\n+    Chip,\n+    Button,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Paper\n+} from '@mui/material'\n+\n+import MeetingAccordion from './MeetingAccordion'\n \n type Props = {\n     oto: OneToOneOverview\n     onBack: () => void\n }\n \n const EmployeeDetails: FC<Props> = ({ oto, onBack }) => {\n+    const { createSnack } = useSnackbar()\n+    const [loading, setLoading] = useState(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =\n+        useState<EmployeeOneToOneResponse>()\n+    console.log(oto)\n+\n+    useEffect(() => {\n+        Promise.all([getEmployeeOneToOnes(oto.employeeId)])",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1696814123",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/MeetingAccordion.tsx",
//         "line": null,
//         "comment": "It's implemented like this in official documentation of Popover MUI component ",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,120 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter/DateFormatter'\n+import FlexBox from '@/Components/FlexBox'\n+import { EmployeeOneToOneDetail } from '@/services/one-to-one'\n+import DeleteIcon from '@mui/icons-material/Delete'\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Typography,\n+    Accordion,\n+    AccordionSummary,\n+    AccordionDetails,\n+    Button,\n+    IconButton,\n+    Popover\n+} from '@mui/material'\n+\n+import { StyledChip, StyledMoreVertIcon, statusMap, colorMap } from './styled'\n+\n+interface MeetingAccordionProps {\n+    meeting: EmployeeOneToOneDetail\n+    onDelete: (id: string) => void\n+}\n+\n+const MeetingAccordion: FC<MeetingAccordionProps> = ({ meeting, onDelete }) => {\n+    const { t } = useTranslation('employee-details')\n+\n+    // Popover controlles\n+    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null)\n+    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n+        setAnchorEl(event.currentTarget)\n+    }\n+    const handleClose = () => {\n+        setAnchorEl(null)\n+    }\n+    const open = Boolean(anchorEl)\n+    const id = open ? 'simple-popover' : undefined",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1696816421",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": 19,
//         "comment": "Make index.ts file default exporting these components :) Also use Type for Types. Keep it consistent ",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,49 @@\n+import { FC } from 'react'\n+\n+import { Box } from '@mui/material'\n+\n+interface DateFormatterProps {\n+    userDateFormat: string\n+    currentDate: string\n+    warning: boolean\n+}\n+\n+/**\n+ * Converts date to logged-in user's date format.\n+ *\n+ * @param userDateFormat string The format of the date for the logged-in user\n+ * @param currentDate string The date to be formatted\n+ * @param warning boolean Indicates whether to show a warning\n+ * @returns JSX.Element Date in the user's date format as a string\n+ */\n+const DateFormatter: FC<DateFormatterProps> = ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1696891206",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": 3,
//         "comment": "Remember to index.ts file that exports default ",
//         "commitId": "220a4903e07c53955f834f5d859d19996edbdcc3",
//         "codeSnippet": "@@ -0,0 +1,49 @@\n+import { FC } from 'react'\n+\n+import { Box } from '@mui/material'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/43#discussion_r1698270078",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": 5,
//         "comment": "Please stick to type as rest of project",
//         "commitId": "220a4903e07c53955f834f5d859d19996edbdcc3",
//         "codeSnippet": "@@ -0,0 +1,49 @@\n+import { FC } from 'react'\n+\n+import { Box } from '@mui/material'\n+\n+interface DateFormatterProps {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/43#discussion_r1698270264",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": 21,
//         "comment": "Why isn't this just date? Context of component is Date",
//         "commitId": "220a4903e07c53955f834f5d859d19996edbdcc3",
//         "codeSnippet": "@@ -0,0 +1,49 @@\n+import { FC } from 'react'\n+\n+import { Box } from '@mui/material'\n+\n+interface DateFormatterProps {\n+    userDateFormat: string\n+    currentDate: string\n+    warning: boolean\n+}\n+\n+/**\n+ * Converts date to logged-in user's date format.\n+ *\n+ * @param userDateFormat string The format of the date for the logged-in user\n+ * @param currentDate string The date to be formatted\n+ * @param warning boolean Indicates whether to show a warning\n+ * @returns JSX.Element Date in the user's date format as a string\n+ */\n+const DateFormatter: FC<DateFormatterProps> = ({\n+    userDateFormat,\n+    currentDate,",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/43#discussion_r1698272118",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": 28,
//         "comment": "Usually a better practice to move functions that is not dependent on the closure outside the component ",
//         "commitId": "220a4903e07c53955f834f5d859d19996edbdcc3",
//         "codeSnippet": "@@ -0,0 +1,49 @@\n+import { FC } from 'react'\n+\n+import { Box } from '@mui/material'\n+\n+interface DateFormatterProps {\n+    userDateFormat: string\n+    currentDate: string\n+    warning: boolean\n+}\n+\n+/**\n+ * Converts date to logged-in user's date format.\n+ *\n+ * @param userDateFormat string The format of the date for the logged-in user\n+ * @param currentDate string The date to be formatted\n+ * @param warning boolean Indicates whether to show a warning\n+ * @returns JSX.Element Date in the user's date format as a string\n+ */\n+const DateFormatter: FC<DateFormatterProps> = ({\n+    userDateFormat,\n+    currentDate,\n+    warning\n+}) => {\n+    if (!currentDate) {\n+        return <Box />\n+    }\n+    const convertDateInUserFormat = (): string => {\n+        const date = new Date(currentDate)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/43#discussion_r1698272544",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": 43,
//         "comment": "This has a themed color. Either try color: 'warning.main' or what ever it is or go through a styled component :) ",
//         "commitId": "220a4903e07c53955f834f5d859d19996edbdcc3",
//         "codeSnippet": "@@ -0,0 +1,49 @@\n+import { FC } from 'react'\n+\n+import { Box } from '@mui/material'\n+\n+interface DateFormatterProps {\n+    userDateFormat: string\n+    currentDate: string\n+    warning: boolean\n+}\n+\n+/**\n+ * Converts date to logged-in user's date format.\n+ *\n+ * @param userDateFormat string The format of the date for the logged-in user\n+ * @param currentDate string The date to be formatted\n+ * @param warning boolean Indicates whether to show a warning\n+ * @returns JSX.Element Date in the user's date format as a string\n+ */\n+const DateFormatter: FC<DateFormatterProps> = ({\n+    userDateFormat,\n+    currentDate,\n+    warning\n+}) => {\n+    if (!currentDate) {\n+        return <Box />\n+    }\n+    const convertDateInUserFormat = (): string => {\n+        const date = new Date(currentDate)\n+        const day = date.getDate().toString().padStart(2, '0')\n+        const month = (date.getMonth() + 1).toString().padStart(2, '0')\n+        const year = date.getFullYear()\n+\n+        if (userDateFormat === 'MM/dd/yyyy') {\n+            return `${month}/${day}/${year}`\n+        }\n+        if (userDateFormat === 'dd/MM/yyyy') {\n+            return `${day}/${month}/${year}`\n+        }\n+        return `${year}/${month}/${day}`\n+    }\n+\n+    return (\n+        <Box sx={warning ? { color: '#e42354' } : {}}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/43#discussion_r1698273892",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/ErrorMessage/EmployeeDetailsError.tsx",
//         "line": null,
//         "comment": "So here you are putting a component that is _FOR_ EmployeeDetails inside the common space. This won't do :) Also, when writing common Components you can never use translation hook as it is no longer really re-usable. We could for example say we had a global.json file and that in this project this was allowed so we don't have to pass 'refresh' all the time. But make it clear :) ",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,42 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Button } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import ErrorMessage from '../../assets/error-msg.svg'\n+import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n+\n+type Props = {\n+    errorMessage1: string\n+    errorMessage2: string\n+    fetchData: () => void\n+}\n+\n+const EmployeeDetailsError: FC<Props> = ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1698277891",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/ErrorMessage/EmployeeDetailsError.tsx",
//         "line": null,
//         "comment": "I think often it's easier to do <FlexBox alignItems='center'> ... instead of over-producing styled components like this.",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,42 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Button } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import ErrorMessage from '../../assets/error-msg.svg'\n+import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n+\n+type Props = {\n+    errorMessage1: string\n+    errorMessage2: string\n+    fetchData: () => void\n+}\n+\n+const EmployeeDetailsError: FC<Props> = ({\n+    errorMessage1,\n+    errorMessage2,\n+    fetchData\n+}) => {\n+    const { t } = useTranslation('employee-details')\n+\n+    return (\n+        <AlignCenter>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1698278640",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "Why do you have this as a function? :P ",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,24 +1,180 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n \n+import EmployeeDetailsError from '@/Components/ErrorMessage/EmployeeDetailsError'\n import FlexBox from '@/Components/FlexBox'\n-import { OneToOneOverview } from '@/services/one-to-one'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Fireworks from '@/assets/fireworks.svg'\n+import Rocket from '@/assets/rocket-new.svg'\n+import Card from '@/features/employee-details/card/Card'\n+import {\n+    OneToOneOverview,\n+    getEmployeeOneToOnes,\n+    deleteOneToOne\n+} from '@/services/one-to-one'\n+import { EmployeeOneToOneResponse } from '@/services/one-to-one/types'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import { IconButton, Box, Typography } from '@mui/material'\n+\n+import MeetingAccordion from './MeetingAccordion'\n+import MeetingTableHeader from './MeetingTableHeader'\n+import { CardHolder } from './card/styled'\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING\n+} from './constants'\n+import { StyledCircularProgress } from './styled'\n \n type Props = {\n     oto: OneToOneOverview\n     onBack: () => void\n }\n \n const EmployeeDetails: FC<Props> = ({ oto, onBack }) => {\n-    return (\n-        <FlexBox>\n-            <IconButton onClick={onBack}>\n-                <ArrowBackIcon />\n-            </IconButton>\n-            {oto.name}\n-        </FlexBox>\n-    )\n+    const { t } = useTranslation('employee-details')\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] = useState<\n+        EmployeeOneToOneResponse | undefined\n+    >()\n+    const { textParser } = useGlobal()\n+    const [completedMeetingsCount, setCompletedMeetingsCount] =\n+        useState<number>(0)\n+    const [pendingMeetingsCount, setPendingMeetingsCount] = useState<number>(0)\n+    const [error, setError] = useState<boolean>(false)\n+\n+    const handleTexts = (\n+        employeeOneToOnes: EmployeeOneToOneResponse\n+    ): EmployeeOneToOneResponse => {\n+        return {\n+            ...employeeOneToOnes,\n+            employeeOneToOneDetails:\n+                employeeOneToOnes.employeeOneToOneDetails.map((oto) => ({\n+                    ...oto,\n+                    templateName: textParser(oto.templateName)\n+                }))\n+        }\n+    }\n+\n+    const setCompletedAndPendingMeetingsCount = () => {\n+        const completedMeetings =\n+            employeeOneToOnes?.employeeOneToOneDetails.filter(\n+                (meeting) => meeting.status === STATUS_COMPLETE\n+            )\n+        const pendingMeetings =\n+            employeeOneToOnes?.employeeOneToOneDetails.filter(\n+                (meeting) =>\n+                    meeting.status === STATUS_READY ||\n+                    meeting.status === STATUS_STARTED ||\n+                    meeting.status === STATUS_PENDING\n+            )\n+\n+        setCompletedMeetingsCount(completedMeetings?.length || 0)\n+        setPendingMeetingsCount(pendingMeetings?.length || 0)\n+    }\n+\n+    const fetchEmployeeOneToOnes = () => {\n+        getEmployeeOneToOnes(oto.employeeId)\n+            .then(handleTexts)\n+            .then((employeeOneToOnes) => {\n+                setEmployeeOneToOnes(employeeOneToOnes)\n+                setError(false)\n+            })\n+            .catch(() => {\n+                setError(true)\n+            })\n+            .finally(() => {\n+                setLoading(false)\n+            })\n+    }\n+\n+    useEffect(() => {\n+        fetchEmployeeOneToOnes()\n+    }, [])\n+\n+    useEffect(() => {\n+        setCompletedAndPendingMeetingsCount()\n+    }, [employeeOneToOnes])\n+\n+    const onDelete = async (id: string) => {\n+        try {\n+            await deleteOneToOne(id)\n+            setEmployeeOneToOnes((prev) => ({\n+                ...prev!,\n+                employeeOneToOneDetails: prev!.employeeOneToOneDetails.filter(\n+                    (oto) => oto.oneToOneId !== id\n+                )\n+            }))\n+        } catch (error) {\n+            setEmployeeOneToOnes((prev) => ({\n+                ...prev!,\n+                employeeOneToOneDetails: prev!.employeeOneToOneDetails.map(\n+                    (oto) => ({\n+                        ...oto,\n+                        templateName: textParser(oto.templateName)\n+                    })\n+                )\n+            }))\n+        }\n+    }\n+\n+    const emplpyeeOneToOneOverview = () => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1698283523",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/ErrorMessage/EmployeeDetailsError.tsx",
//         "line": null,
//         "comment": "Okay I will create a common component for this, as it is also being used in HR-insights and can be used in future also\r\n",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,42 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { Button } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import ErrorMessage from '../../assets/error-msg.svg'\n+import { AlignCenter, ErrorMessage1, ErrorMessage2 } from './styled'\n+\n+type Props = {\n+    errorMessage1: string\n+    errorMessage2: string\n+    fetchData: () => void\n+}\n+\n+const EmployeeDetailsError: FC<Props> = ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1698284002",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/MeetingAccordion.tsx",
//         "line": null,
//         "comment": "Still, just do \r\n\r\n<Popover\r\n  id={open && 'simple-popover'} \r\n\r\nI'm not sure why it has to be undefined in the first place. Probably don't have to be ",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,120 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter/DateFormatter'\n+import FlexBox from '@/Components/FlexBox'\n+import { EmployeeOneToOneDetail } from '@/services/one-to-one'\n+import DeleteIcon from '@mui/icons-material/Delete'\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Typography,\n+    Accordion,\n+    AccordionSummary,\n+    AccordionDetails,\n+    Button,\n+    IconButton,\n+    Popover\n+} from '@mui/material'\n+\n+import { StyledChip, StyledMoreVertIcon, statusMap, colorMap } from './styled'\n+\n+interface MeetingAccordionProps {\n+    meeting: EmployeeOneToOneDetail\n+    onDelete: (id: string) => void\n+}\n+\n+const MeetingAccordion: FC<MeetingAccordionProps> = ({ meeting, onDelete }) => {\n+    const { t } = useTranslation('employee-details')\n+\n+    // Popover controlles\n+    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null)\n+    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n+        setAnchorEl(event.currentTarget)\n+    }\n+    const handleClose = () => {\n+        setAnchorEl(null)\n+    }\n+    const open = Boolean(anchorEl)\n+    const id = open ? 'simple-popover' : undefined",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1698285085",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/card/styled.tsx",
//         "line": null,
//         "comment": "This entire thing needs a rework. We follow rules where paddings are x % 4 = 0 where x > 4. So like 2,4,8,12,16,20,...\r\n\r\nwidth 33.3% What is happenening here? Maybe Grid would fit this case better?  Background colors are hard coded, they need to come from theme.",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,50 @@\n+import { Box } from '@mui/material'\n+import { styled } from '@mui/material/styles'\n+\n+export const CardOuter = styled(Box)({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1698289707",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/card/Card.tsx",
//         "line": null,
//         "comment": "I guess this is not Icon when the tag inside is 'img' :D ",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,21 @@\n+import { FC } from 'react'\n+\n+import { CardCount, CardHeading, CardOuter, Icon } from './styled'\n+\n+type Props = {\n+    heading: string\n+    count: number\n+    img: string\n+}\n+\n+const Card: FC<Props> = ({ heading, count, img }) => {\n+    return (\n+        <CardOuter>\n+            <CardHeading>{heading}</CardHeading>\n+            <CardCount>{count}</CardCount>\n+            <Icon height='50px' width='50px' src={img} alt='Icon' />",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1698290637",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "package-lock.json",
//         "line": 1,
//         "comment": "Delete this file ",
//         "commitId": "332d9caa63c70f9614762d7bdc9718f488c4da70",
//         "codeSnippet": "",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/17#discussion_r1698300064",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/card/styled.tsx",
//         "line": null,
//         "comment": "I have updated this, using grid and themes for the styling, used Typography where needed",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,50 @@\n+import { Box } from '@mui/material'\n+import { styled } from '@mui/material/styles'\n+\n+export const CardOuter = styled(Box)({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1699578215",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/todo-overview/card/Card.tsx",
//         "line": null,
//         "comment": "Is it Icon or Image? :)",
//         "commitId": "f0e071f9f48040b5f319d49b37020d4bd601dd78",
//         "codeSnippet": "@@ -0,0 +1,21 @@\n+import { FC } from 'react'\n+\n+import { CardCount, CardHeading, CardOuter, Icon } from './styled'\n+\n+type Props = {\n+    heading: string\n+    count: number\n+    img: string\n+}\n+\n+const Card: FC<Props> = ({ heading, count, img }) => {\n+    return (\n+        <CardOuter>\n+            <CardHeading>{heading}</CardHeading>\n+            <CardCount>{count}</CardCount>\n+            <Icon height='50px' width='50px' src={img} alt='Icon' />",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/41#discussion_r1699862936",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Router/Router.tsx",
//         "line": null,
//         "comment": "How can this be optional? :) ",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -65,8 +66,8 @@ const Router: FC = () => {\n             />\n \n             <Route\n-                path='/one-to-one/employee/:id'\n-                element={<div>This works?</div>}\n+                path='/one-to-one/employee/:id?'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1699869752",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 44,
//         "comment": "I suggest to always use proper values. In this case it seems employeeOneToOnes is a wrapper for { employeeOneToOneDetails } ? In that case I would do useState<EmployeeOneToOneDetail[]>([])\r\n\r\nThis way you can omit all the nullish coalescing",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,177 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Fireworks from '@/assets/fireworks.svg'\n+import Rocket from '@/assets/rocket-new.svg'\n+import Card from '@/features/employee-details/card/Card'\n+import {\n+    getEmployeeOneToOnes,\n+    deleteOneToOne,\n+    OneToOne\n+} from '@/services/one-to-one'\n+import { EmployeeOneToOneResponse } from '@/services/one-to-one/types'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import { IconButton, Box, Typography, Grid } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import MeetingAccordion from './MeetingAccordion'\n+import MeetingTableHeader from './MeetingTableHeader'\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING\n+} from './constants'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1699872605",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/MeetingAccordion.tsx",
//         "line": null,
//         "comment": "Break this down a bit please :)",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,121 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter/DateFormatter'\n+import FlexBox from '@/Components/FlexBox'\n+import { EmployeeOneToOneDetail } from '@/services/one-to-one'\n+import DeleteIcon from '@mui/icons-material/Delete'\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Typography,\n+    Accordion,\n+    AccordionSummary,\n+    AccordionDetails,\n+    Button,\n+    IconButton,\n+    Popover\n+} from '@mui/material'\n+\n+import { STATUS_REOPEN } from './constants'\n+import { StyledChip, StyledMoreVertIcon, statusMap, colorMap } from './styled'\n+\n+interface MeetingAccordionProps {\n+    meeting: EmployeeOneToOneDetail\n+    onDelete: (id: string) => void\n+}\n+\n+const MeetingAccordion: FC<MeetingAccordionProps> = ({ meeting, onDelete }) => {\n+    const { t } = useTranslation('employee-details')\n+\n+    // Popover controlles\n+    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null)\n+    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n+        setAnchorEl(event.currentTarget)\n+    }\n+    const handleClose = () => {\n+        setAnchorEl(null)\n+    }\n+    const open = Boolean(anchorEl)\n+\n+    /*\n+     Replace the line below with the following lines.\n+     - const loggedInUserDateFormat = __state.getSnapshot().user.dateFormatString;\n+      as __state is a global variable and is not available locally.\n+     */\n+\n+    const loggedInUserDateFormat = 'MM/dd/yyyy'\n+    console.log(meeting.status)\n+\n+    return (\n+        <Accordion>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1699874416",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Router/Router.tsx",
//         "line": null,
//         "comment": "yup, I was checking something and forgot to remove. :)",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -65,8 +66,8 @@ const Router: FC = () => {\n             />\n \n             <Route\n-                path='/one-to-one/employee/:id'\n-                element={<div>This works?</div>}\n+                path='/one-to-one/employee/:id?'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1699918832",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 44,
//         "comment": "Okay, but here employeeOneToOnes is the response from the API that I am storing , I should not do that and hold the employeeOneToOneDetials??\r\nBut what if  we would need some other data from the response itself?",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,177 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Fireworks from '@/assets/fireworks.svg'\n+import Rocket from '@/assets/rocket-new.svg'\n+import Card from '@/features/employee-details/card/Card'\n+import {\n+    getEmployeeOneToOnes,\n+    deleteOneToOne,\n+    OneToOne\n+} from '@/services/one-to-one'\n+import { EmployeeOneToOneResponse } from '@/services/one-to-one/types'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import { IconButton, Box, Typography, Grid } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import MeetingAccordion from './MeetingAccordion'\n+import MeetingTableHeader from './MeetingTableHeader'\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING\n+} from './constants'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1699956788",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/MeetingAccordion.tsx",
//         "line": null,
//         "comment": "done 👍  ",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,121 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter/DateFormatter'\n+import FlexBox from '@/Components/FlexBox'\n+import { EmployeeOneToOneDetail } from '@/services/one-to-one'\n+import DeleteIcon from '@mui/icons-material/Delete'\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Typography,\n+    Accordion,\n+    AccordionSummary,\n+    AccordionDetails,\n+    Button,\n+    IconButton,\n+    Popover\n+} from '@mui/material'\n+\n+import { STATUS_REOPEN } from './constants'\n+import { StyledChip, StyledMoreVertIcon, statusMap, colorMap } from './styled'\n+\n+interface MeetingAccordionProps {\n+    meeting: EmployeeOneToOneDetail\n+    onDelete: (id: string) => void\n+}\n+\n+const MeetingAccordion: FC<MeetingAccordionProps> = ({ meeting, onDelete }) => {\n+    const { t } = useTranslation('employee-details')\n+\n+    // Popover controlles\n+    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null)\n+    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n+        setAnchorEl(event.currentTarget)\n+    }\n+    const handleClose = () => {\n+        setAnchorEl(null)\n+    }\n+    const open = Boolean(anchorEl)\n+\n+    /*\n+     Replace the line below with the following lines.\n+     - const loggedInUserDateFormat = __state.getSnapshot().user.dateFormatString;\n+      as __state is a global variable and is not available locally.\n+     */\n+\n+    const loggedInUserDateFormat = 'MM/dd/yyyy'\n+    console.log(meeting.status)\n+\n+    return (\n+        <Accordion>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1699992229",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 44,
//         "comment": "??\r\n",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,177 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Fireworks from '@/assets/fireworks.svg'\n+import Rocket from '@/assets/rocket-new.svg'\n+import Card from '@/features/employee-details/card/Card'\n+import {\n+    getEmployeeOneToOnes,\n+    deleteOneToOne,\n+    OneToOne\n+} from '@/services/one-to-one'\n+import { EmployeeOneToOneResponse } from '@/services/one-to-one/types'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import { IconButton, Box, Typography, Grid } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import MeetingAccordion from './MeetingAccordion'\n+import MeetingTableHeader from './MeetingTableHeader'\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING\n+} from './constants'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1701477785",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 44,
//         "comment": "as Discussed I have made the change\r\n",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,177 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Fireworks from '@/assets/fireworks.svg'\n+import Rocket from '@/assets/rocket-new.svg'\n+import Card from '@/features/employee-details/card/Card'\n+import {\n+    getEmployeeOneToOnes,\n+    deleteOneToOne,\n+    OneToOne\n+} from '@/services/one-to-one'\n+import { EmployeeOneToOneResponse } from '@/services/one-to-one/types'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import { IconButton, Box, Typography, Grid } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import MeetingAccordion from './MeetingAccordion'\n+import MeetingTableHeader from './MeetingTableHeader'\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING\n+} from './constants'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1701637208",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/card/Card.tsx",
//         "line": 13,
//         "comment": "index export :) ",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,31 @@\n+import { FC } from 'react'\n+\n+import { Typography } from '@mui/material'\n+\n+import { CardOuter, StyledImg } from './styled'\n+\n+type Props = {\n+    heading: string\n+    count: number\n+    img: string\n+}\n+\n+const Card: FC<Props> = ({ heading, count, img }) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1701998931",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "Maybe rename oto to details as oto is used elsewhere in context of the one to one overview? Or is it basically the same?",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,204 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { getEmployeeOneToOnes, deleteOneToOne } from '@/services/one-to-one'\n+import {\n+    EmployeeOneToOneResponse,\n+    EmployeeOneToOneDetail\n+} from '@/services/one-to-one/types'\n+import { EventStore } from '@/services/userAnalyticsServcie/eventStore'\n+import logEvent from '@/services/userAnalyticsServcie/userAnalyticsService'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import { IconButton, Box, Typography } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING,\n+    SortOrder\n+} from './constants'\n+import MeetingAccordion from './meeting-accordion/MeetingAccordion'\n+import MeetingStats from './meeting-stats/MeetingStats'\n+import MeetingTableHeader from './meeting-table-header/MeetingTableHeader'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =\n+        useState<EmployeeOneToOneResponse>({\n+            revieweeId: '',\n+            profileActive: false,\n+            employeeOneToOneDetails: []\n+        })\n+    const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.DESC)\n+    const { textParser } = useGlobal()\n+    const [completedMeetingsCount, setCompletedMeetingsCount] =\n+        useState<number>(0)\n+    const [pendingMeetingsCount, setPendingMeetingsCount] = useState<number>(0)\n+    const [error, setError] = useState<boolean>(false)\n+    const { id } = useParams()\n+    const navigate = useNavigate()\n+\n+    const handleTexts = (\n+        employeeOneToOnes: EmployeeOneToOneResponse\n+    ): EmployeeOneToOneResponse => {\n+        return {\n+            ...employeeOneToOnes,\n+            employeeOneToOneDetails:\n+                employeeOneToOnes.employeeOneToOneDetails.map((oto) => ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1702000331",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "No async please. Stick to the promise pattern",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,204 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { getEmployeeOneToOnes, deleteOneToOne } from '@/services/one-to-one'\n+import {\n+    EmployeeOneToOneResponse,\n+    EmployeeOneToOneDetail\n+} from '@/services/one-to-one/types'\n+import { EventStore } from '@/services/userAnalyticsServcie/eventStore'\n+import logEvent from '@/services/userAnalyticsServcie/userAnalyticsService'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import { IconButton, Box, Typography } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING,\n+    SortOrder\n+} from './constants'\n+import MeetingAccordion from './meeting-accordion/MeetingAccordion'\n+import MeetingStats from './meeting-stats/MeetingStats'\n+import MeetingTableHeader from './meeting-table-header/MeetingTableHeader'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =\n+        useState<EmployeeOneToOneResponse>({\n+            revieweeId: '',\n+            profileActive: false,\n+            employeeOneToOneDetails: []\n+        })\n+    const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.DESC)\n+    const { textParser } = useGlobal()\n+    const [completedMeetingsCount, setCompletedMeetingsCount] =\n+        useState<number>(0)\n+    const [pendingMeetingsCount, setPendingMeetingsCount] = useState<number>(0)\n+    const [error, setError] = useState<boolean>(false)\n+    const { id } = useParams()\n+    const navigate = useNavigate()\n+\n+    const handleTexts = (\n+        employeeOneToOnes: EmployeeOneToOneResponse\n+    ): EmployeeOneToOneResponse => {\n+        return {\n+            ...employeeOneToOnes,\n+            employeeOneToOneDetails:\n+                employeeOneToOnes.employeeOneToOneDetails.map((oto) => ({\n+                    ...oto,\n+                    templateName: textParser(oto.templateName)\n+                }))\n+        }\n+    }\n+\n+    const setCompletedAndPendingMeetingsCount = () => {\n+        const completedMeetings =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (meeting) => meeting.status === STATUS_COMPLETE\n+            )\n+        const pendingMeetings =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (meeting) =>\n+                    meeting.status === STATUS_READY ||\n+                    meeting.status === STATUS_STARTED ||\n+                    meeting.status === STATUS_PENDING\n+            )\n+\n+        setCompletedMeetingsCount(completedMeetings.length)\n+        setPendingMeetingsCount(pendingMeetings.length)\n+    }\n+    const handleBack = () => {\n+        navigate('/one-to-one')\n+    }\n+\n+    const fetchEmployeeOneToOnes = () => {\n+        if (!id) {\n+            handleBack()\n+            return\n+        }\n+\n+        getEmployeeOneToOnes(id)\n+            .then(handleTexts)\n+            .then((employeeOneToOnes) => {\n+                setEmployeeOneToOnes(employeeOneToOnes)\n+                setError(false)\n+            })\n+            .catch(() => {\n+                setError(true)\n+            })\n+            .finally(() => {\n+                setLoading(false)\n+            })\n+    }\n+\n+    const sortMeetings = (\n+        meetings: EmployeeOneToOneDetail[],\n+        order: SortOrder\n+    ) => {\n+        return meetings.sort((a, b) => {\n+            const dateA = new Date(a.lastModifiedDate).getTime()\n+            const dateB = new Date(b.lastModifiedDate).getTime()\n+            return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n+        })\n+    }\n+\n+    useEffect(() => {\n+        logEvent(EventStore.getEvent('employeeMeetingOverviewViewed'))\n+        fetchEmployeeOneToOnes()\n+    }, [])\n+\n+    useEffect(() => {\n+        setCompletedAndPendingMeetingsCount()\n+    }, [employeeOneToOnes])\n+\n+    useEffect(() => {\n+        if (employeeOneToOnes) {\n+            setEmployeeOneToOnes((prev) => ({\n+                ...prev,\n+                employeeOneToOneDetails: sortMeetings(\n+                    prev.employeeOneToOneDetails,\n+                    sortOrder\n+                )\n+            }))\n+        }\n+    }, [sortOrder])\n+\n+    const toggleSortOrder = () => {\n+        setSortOrder((prevOrder) =>\n+            prevOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC\n+        )\n+    }\n+\n+    const onDelete = async (id: string) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1702003796",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/meeting-accordion/MeetingAccordion.tsx",
//         "line": null,
//         "comment": "Maybe do the comment and not comment? :) Just do like loggedIn... = import.meta.env.PROD ? __state... : \"hard code\"",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,33 @@\n+import { FC } from 'react'\n+\n+import { EmployeeOneToOneDetail } from '@/services/one-to-one'\n+import { Accordion } from '@mui/material'\n+\n+import MeetingAccordionDetails from './MeetingAccordionDetails'\n+import MeetingAccordionSummary from './MeetingAccordionSummary'\n+\n+interface MeetingAccordionProps {\n+    meeting: EmployeeOneToOneDetail\n+    onDelete: (id: string) => void\n+}\n+\n+const MeetingAccordion: FC<MeetingAccordionProps> = ({ meeting, onDelete }) => {\n+    /*\n+     Replace the line below with the following lines.\n+     - const loggedInUserDateFormat = __state.getSnapshot().user.dateFormatString;\n+      as __state is a global variable and is not available locally.\n+     */\n+    const loggedInUserDateFormat = 'MM/dd/yyyy'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1702072443",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/meeting-accordion/MeetingAccordionDetails.tsx",
//         "line": null,
//         "comment": "Just inline this one? :)",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,67 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { EmployeeOneToOneDetail } from '@/services/one-to-one'\n+import DeleteIcon from '@mui/icons-material/Delete'\n+import { AccordionDetails, Button, IconButton, Popover } from '@mui/material'\n+\n+import { StyledMoreVertIcon } from './styled'\n+\n+interface MeetingAccordionDetailsProps {\n+    meeting: EmployeeOneToOneDetail\n+    onDelete: (id: string) => void\n+}\n+\n+const MeetingAccordionDetails: FC<MeetingAccordionDetailsProps> = ({\n+    meeting,\n+    onDelete\n+}) => {\n+    const { t } = useTranslation('employee-details')\n+\n+    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null)\n+    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n+        setAnchorEl(event.currentTarget)\n+    }\n+    const handleClose = () => {\n+        setAnchorEl(null)\n+    }\n+    const open = Boolean(anchorEl)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1702072831",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/meeting-table-header/MeetingTableHeader.tsx",
//         "line": null,
//         "comment": "Just Props is enough. Dont need long words when its not intersting for the rest of the app",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,49 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward'\n+import { TableContainer, Table, TableRow, Button } from '@mui/material'\n+\n+import {\n+    StyledTableHead,\n+    StyledInvitationTableCell,\n+    StyledStautsTableCell,\n+    StyledButton,\n+    StyledDialogTableCell\n+} from './styled'\n+\n+type MeetingTableHeaderProps = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1702073508",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/card/Card.tsx",
//         "line": 13,
//         "comment": "done\r\n",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,31 @@\n+import { FC } from 'react'\n+\n+import { Typography } from '@mui/material'\n+\n+import { CardOuter, StyledImg } from './styled'\n+\n+type Props = {\n+    heading: string\n+    count: number\n+    img: string\n+}\n+\n+const Card: FC<Props> = ({ heading, count, img }) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1703519266",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "no you are right, naming is not proper. I have done the changes",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,204 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { getEmployeeOneToOnes, deleteOneToOne } from '@/services/one-to-one'\n+import {\n+    EmployeeOneToOneResponse,\n+    EmployeeOneToOneDetail\n+} from '@/services/one-to-one/types'\n+import { EventStore } from '@/services/userAnalyticsServcie/eventStore'\n+import logEvent from '@/services/userAnalyticsServcie/userAnalyticsService'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import { IconButton, Box, Typography } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING,\n+    SortOrder\n+} from './constants'\n+import MeetingAccordion from './meeting-accordion/MeetingAccordion'\n+import MeetingStats from './meeting-stats/MeetingStats'\n+import MeetingTableHeader from './meeting-table-header/MeetingTableHeader'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =\n+        useState<EmployeeOneToOneResponse>({\n+            revieweeId: '',\n+            profileActive: false,\n+            employeeOneToOneDetails: []\n+        })\n+    const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.DESC)\n+    const { textParser } = useGlobal()\n+    const [completedMeetingsCount, setCompletedMeetingsCount] =\n+        useState<number>(0)\n+    const [pendingMeetingsCount, setPendingMeetingsCount] = useState<number>(0)\n+    const [error, setError] = useState<boolean>(false)\n+    const { id } = useParams()\n+    const navigate = useNavigate()\n+\n+    const handleTexts = (\n+        employeeOneToOnes: EmployeeOneToOneResponse\n+    ): EmployeeOneToOneResponse => {\n+        return {\n+            ...employeeOneToOnes,\n+            employeeOneToOneDetails:\n+                employeeOneToOnes.employeeOneToOneDetails.map((oto) => ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1703520400",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,204 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { getEmployeeOneToOnes, deleteOneToOne } from '@/services/one-to-one'\n+import {\n+    EmployeeOneToOneResponse,\n+    EmployeeOneToOneDetail\n+} from '@/services/one-to-one/types'\n+import { EventStore } from '@/services/userAnalyticsServcie/eventStore'\n+import logEvent from '@/services/userAnalyticsServcie/userAnalyticsService'\n import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import { IconButton, Box, Typography } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING,\n+    SortOrder\n+} from './constants'\n+import MeetingAccordion from './meeting-accordion/MeetingAccordion'\n+import MeetingStats from './meeting-stats/MeetingStats'\n+import MeetingTableHeader from './meeting-table-header/MeetingTableHeader'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =\n+        useState<EmployeeOneToOneResponse>({\n+            revieweeId: '',\n+            profileActive: false,\n+            employeeOneToOneDetails: []\n+        })\n+    const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.DESC)\n+    const { textParser } = useGlobal()\n+    const [completedMeetingsCount, setCompletedMeetingsCount] =\n+        useState<number>(0)\n+    const [pendingMeetingsCount, setPendingMeetingsCount] = useState<number>(0)\n+    const [error, setError] = useState<boolean>(false)\n+    const { id } = useParams()\n+    const navigate = useNavigate()\n+\n+    const handleTexts = (\n+        employeeOneToOnes: EmployeeOneToOneResponse\n+    ): EmployeeOneToOneResponse => {\n+        return {\n+            ...employeeOneToOnes,\n+            employeeOneToOneDetails:\n+                employeeOneToOnes.employeeOneToOneDetails.map((oto) => ({\n+                    ...oto,\n+                    templateName: textParser(oto.templateName)\n+                }))\n+        }\n+    }\n+\n+    const setCompletedAndPendingMeetingsCount = () => {\n+        const completedMeetings =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (meeting) => meeting.status === STATUS_COMPLETE\n+            )\n+        const pendingMeetings =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (meeting) =>\n+                    meeting.status === STATUS_READY ||\n+                    meeting.status === STATUS_STARTED ||\n+                    meeting.status === STATUS_PENDING\n+            )\n+\n+        setCompletedMeetingsCount(completedMeetings.length)\n+        setPendingMeetingsCount(pendingMeetings.length)\n+    }\n+    const handleBack = () => {\n+        navigate('/one-to-one')\n+    }\n+\n+    const fetchEmployeeOneToOnes = () => {\n+        if (!id) {\n+            handleBack()\n+            return\n+        }\n+\n+        getEmployeeOneToOnes(id)\n+            .then(handleTexts)\n+            .then((employeeOneToOnes) => {\n+                setEmployeeOneToOnes(employeeOneToOnes)\n+                setError(false)\n+            })\n+            .catch(() => {\n+                setError(true)\n+            })\n+            .finally(() => {\n+                setLoading(false)\n+            })\n+    }\n+\n+    const sortMeetings = (\n+        meetings: EmployeeOneToOneDetail[],\n+        order: SortOrder\n+    ) => {\n+        return meetings.sort((a, b) => {\n+            const dateA = new Date(a.lastModifiedDate).getTime()\n+            const dateB = new Date(b.lastModifiedDate).getTime()\n+            return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n+        })\n+    }\n+\n+    useEffect(() => {\n+        logEvent(EventStore.getEvent('employeeMeetingOverviewViewed'))\n+        fetchEmployeeOneToOnes()\n+    }, [])\n+\n+    useEffect(() => {\n+        setCompletedAndPendingMeetingsCount()\n+    }, [employeeOneToOnes])\n+\n+    useEffect(() => {\n+        if (employeeOneToOnes) {\n+            setEmployeeOneToOnes((prev) => ({\n+                ...prev,\n+                employeeOneToOneDetails: sortMeetings(\n+                    prev.employeeOneToOneDetails,\n+                    sortOrder\n+                )\n+            }))\n+        }\n+    }, [sortOrder])\n+\n+    const toggleSortOrder = () => {\n+        setSortOrder((prevOrder) =>\n+            prevOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC\n+        )\n+    }\n+\n+    const onDelete = async (id: string) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1703549519",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/meeting-table-header/MeetingTableHeader.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,49 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward'\n+import { TableContainer, Table, TableRow, Button } from '@mui/material'\n+\n+import {\n+    StyledTableHead,\n+    StyledInvitationTableCell,\n+    StyledStautsTableCell,\n+    StyledButton,\n+    StyledDialogTableCell\n+} from './styled'\n+\n+type MeetingTableHeaderProps = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1703555170",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/DuplicateDialog.tsx",
//         "line": null,
//         "comment": "can we have better name for state ds? or line comment will be helpful",
//         "commitId": "cc11803cfb45bbef31f2676a0fe8b6f6d4c8cd5c",
//         "codeSnippet": "@@ -0,0 +1,51 @@\n+import { ChangeEvent, FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import Dialog from '@/Components/Dialog'\n+import { DialogState, isClosed } from '@/types/dialog'\n+import { TextField, Typography } from '@mui/material'\n+\n+type Props = {\n+    state: DialogState\n+    onClose: () => void\n+}\n+\n+const DuplicateDialog: FC<Props> = ({ state, onClose }) => {\n+    const { t } = useTranslation('template-details')\n+    const [ds, setDs] = useState(state)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/53#discussion_r1704883956",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/Components/Dialog/Dialog.tsx",
//         "line": null,
//         "comment": "removee!",
//         "commitId": "cc11803cfb45bbef31f2676a0fe8b6f6d4c8cd5c",
//         "codeSnippet": "@@ -38,6 +38,8 @@ const CustomDialog = <Value,>({\n \n     if (isClosed(dialogState)) return null\n \n+    console.log(dialogState.entity)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/53#discussion_r1704886889",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Goals/GoalSetting.tsx",
//         "line": 35,
//         "comment": "please remove this",
//         "commitId": "b961f2cfb80e2552481b12c722eb1756ac429cd8",
//         "codeSnippet": "@@ -26,21 +27,20 @@ const GoalSetting: ForwardRefRenderFunction<HTMLLIElement, Props> = (\n \n     return (\n         <MoveableLiItem {...rest} title={t(goalById[type])} ref={ref}>\n-            <Grid item sm={4}>\n-                <Typography>{active ? t('active') : t('inactive')}</Typography>\n-            </Grid>\n-\n-            <Grid item sm={2}>\n-                <FormControlLabel\n-                    disabled={isReadOnly(state)}\n-                    label=''\n-                    control={\n-                        <Switch\n-                            defaultChecked={active}\n-                            onChange={(_, checked) => onChange(checked)}\n-                        />\n-                    }\n-                />\n+            <Grid item sm={6}>\n+                <FlexBox justifyContent='end' padding='0px'>\n+                    <FormControlLabel\n+                        sx={{ margin: '0px' }}\n+                        disabled={isReadOnly(state)}\n+                        label=''",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/56#discussion_r1706546982",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Goals/GoalSetting.tsx",
//         "line": 35,
//         "comment": "This prop is necessary for <FormControlLabel>",
//         "commitId": "b961f2cfb80e2552481b12c722eb1756ac429cd8",
//         "codeSnippet": "@@ -26,21 +27,20 @@ const GoalSetting: ForwardRefRenderFunction<HTMLLIElement, Props> = (\n \n     return (\n         <MoveableLiItem {...rest} title={t(goalById[type])} ref={ref}>\n-            <Grid item sm={4}>\n-                <Typography>{active ? t('active') : t('inactive')}</Typography>\n-            </Grid>\n-\n-            <Grid item sm={2}>\n-                <FormControlLabel\n-                    disabled={isReadOnly(state)}\n-                    label=''\n-                    control={\n-                        <Switch\n-                            defaultChecked={active}\n-                            onChange={(_, checked) => onChange(checked)}\n-                        />\n-                    }\n-                />\n+            <Grid item sm={6}>\n+                <FlexBox justifyContent='end' padding='0px'>\n+                    <FormControlLabel\n+                        sx={{ margin: '0px' }}\n+                        disabled={isReadOnly(state)}\n+                        label=''",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/56#discussion_r1706758806",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateCard/TemplateCard.tsx",
//         "line": null,
//         "comment": "can go with these as these are as per designs :) No changes required",
//         "commitId": "35efdbfd72ce073ac22443060f1f52937fd06faf",
//         "codeSnippet": "@@ -64,25 +62,24 @@ const TemplateCard: FC<Props> = ({\n \n                 <Grid item sm={6}>\n                     <Typography\n-                        maxHeight='45px'\n-                        minWidth='200px'\n+                        maxHeight='2.8rem'\n                         overflow='hidden'\n                         textOverflow='ellipsis'\n                     >\n                         {textParser(templateName)}\n                     </Typography>\n                 </Grid>\n \n-                <FlexBox marginLeft='auto'>\n+                <Grid item container sm={4} justifyContent='flex-end'>\n                     <StatusChip status={status} />\n-                </FlexBox>\n+                </Grid>\n \n-                <Grid item>\n+                <Grid item sm={12}>\n                     <Typography\n-                        maxWidth='364px'\n+                        maxHeight='2.8rem'\n                         overflow='hidden'\n-                        paddingTop={3}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/60#discussion_r1709076084",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/employee-details/meeting-accordion/MeetingAccordionDetails.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -0,0 +1,67 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { EmployeeOneToOneDetail } from '@/services/one-to-one'\n+import DeleteIcon from '@mui/icons-material/Delete'\n+import { AccordionDetails, Button, IconButton, Popover } from '@mui/material'\n+\n+import { StyledMoreVertIcon } from './styled'\n+\n+interface MeetingAccordionDetailsProps {\n+    meeting: EmployeeOneToOneDetail\n+    onDelete: (id: string) => void\n+}\n+\n+const MeetingAccordionDetails: FC<MeetingAccordionDetailsProps> = ({\n+    meeting,\n+    onDelete\n+}) => {\n+    const { t } = useTranslation('employee-details')\n+\n+    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null)\n+    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n+        setAnchorEl(event.currentTarget)\n+    }\n+    const handleClose = () => {\n+        setAnchorEl(null)\n+    }\n+    const open = Boolean(anchorEl)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1710752683",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateOverview.tsx",
//         "line": null,
//         "comment": "t('copy') instead of copy??",
//         "commitId": "aefd4b1db93deb675e3d9616339968d453e0596c",
//         "codeSnippet": "@@ -63,14 +76,40 @@ const TemplateOverview: FC = () => {\n         []\n     )\n \n-    const handleDuplicate = useCallback(\n-        (event: React.MouseEvent<HTMLElement>) => {\n-            logEvent(EventStore.getEvent('templateCopied'))\n+    const handleDuplicate = (template: Template) => {\n+        return (event: SyntheticEvent) => {\n+            event.preventDefault()\n             event.stopPropagation()\n-            setMenuState(null)\n-        },\n-        []\n-    )\n+\n+            setShowDuplicate(\n+                getOpenState(`${template.templateName} - copy`, (name) =>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/63#discussion_r1711274690",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/locales/en-GB/template-details.json",
//         "line": 29,
//         "comment": "This file now contain mulitple of same key",
//         "commitId": "b1fa9543f5aca66f7646833b117b562e22c41ee2",
//         "codeSnippet": "@@ -21,10 +21,17 @@\n     \"update-template\": \"Edit template\",\n     \"discard\": \"Discard\",\n     \"unpublish-template\": \"Unpublish\",\n-    \"publish\": \"Publish Template\",\n-    \"template-settings\": \"Template Settings\",\n-    \"meeting-content\": \"Meeting Content\",\n-    \"overview\": \"Confirm and Publish\",\n+    \"publish\": \"Publish template\",\n+    \"template-settings\": \"Template settings\",\n+    \"meeting-content\": \"Meeting content\",\n+    \"overview\": \"Confirm and publish\",\n+    \"cancel\": \"Cancel\",\n+    \"submit\": \"Submit\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/65#discussion_r1713652639",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Components/MoveableLiItem/MoveableLiItem.tsx",
//         "line": 27,
//         "comment": "You also need to add Grid item sm={dragable ? 11 : 12} to the next item..",
//         "commitId": "e986cfc53cc8c21d57ee3ad003417a77f3b55c62",
//         "codeSnippet": "@@ -24,11 +24,13 @@ const MoveableLiItem: ForwardRefRenderFunction<\n         <MoveableLiItemWrapper {...props} $disabled={disabled} ref={ref}>\n             <Grid container spacing={2} alignItems='center'>\n                 <Grid container item xs={6} alignItems='center'>\n-                    <Grid item sm={1}>\n-                        <FlexBox justifyContent='center'>\n-                            {dragable && <DragIndicatorIcon />}\n-                        </FlexBox>\n-                    </Grid>\n+                    {dragable && (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/67#discussion_r1713653877",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "public/locales/en-GB/template-details.json",
//         "line": 29,
//         "comment": "removed duplicate keys",
//         "commitId": "b1fa9543f5aca66f7646833b117b562e22c41ee2",
//         "codeSnippet": "@@ -21,10 +21,17 @@\n     \"update-template\": \"Edit template\",\n     \"discard\": \"Discard\",\n     \"unpublish-template\": \"Unpublish\",\n-    \"publish\": \"Publish Template\",\n-    \"template-settings\": \"Template Settings\",\n-    \"meeting-content\": \"Meeting Content\",\n-    \"overview\": \"Confirm and Publish\",\n+    \"publish\": \"Publish template\",\n+    \"template-settings\": \"Template settings\",\n+    \"meeting-content\": \"Meeting content\",\n+    \"overview\": \"Confirm and publish\",\n+    \"cancel\": \"Cancel\",\n+    \"submit\": \"Submit\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/65#discussion_r1713683671",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/Components/MoveableLiItem/MoveableLiItem.tsx",
//         "line": 27,
//         "comment": "done",
//         "commitId": "e986cfc53cc8c21d57ee3ad003417a77f3b55c62",
//         "codeSnippet": "@@ -24,11 +24,13 @@ const MoveableLiItem: ForwardRefRenderFunction<\n         <MoveableLiItemWrapper {...props} $disabled={disabled} ref={ref}>\n             <Grid container spacing={2} alignItems='center'>\n                 <Grid container item xs={6} alignItems='center'>\n-                    <Grid item sm={1}>\n-                        <FlexBox justifyContent='center'>\n-                            {dragable && <DragIndicatorIcon />}\n-                        </FlexBox>\n-                    </Grid>\n+                    {dragable && (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/67#discussion_r1713702809",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 143,
//         "comment": "Move the logic of the function inside useEffect. Not need for extra functions laying around :D ",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,248 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n-import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n-import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import AlertDialog from '@/Components/AlertDialog'\n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { getEmployeeOneToOnes, deleteOneToOne } from '@/services/one-to-one'\n+import {\n+    EmployeeOneToOneResponse,\n+    EmployeeOneToOneDetail\n+} from '@/services/one-to-one/types'\n+import { EventStore } from '@/services/userAnalyticsServcie/eventStore'\n+import logEvent from '@/services/userAnalyticsServcie/userAnalyticsService'\n+import {\n+    DialogState,\n+    getClosedState,\n+    getOpenState,\n+    isOpen\n+} from '@/types/dialog'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n+import { Box, Typography } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING,\n+    SortOrder\n+} from './constants'\n+import OneToOneAccordion from './one-to-one-accordion/OneToOneAccordion'\n+import OneToOneStats from './one-to-one-stats/OneToOneStats'\n+import OneToOneTableHeader from './one-to-one-table-header/OneToOneTableHeader'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const { id } = useParams()\n+    const navigate = useNavigate()\n+    const { textParser } = useGlobal()\n+    const { createSnack } = useSnackbar()\n+\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =\n+        useState<EmployeeOneToOneResponse>({\n+            revieweeId: '',\n+            profileActive: false,\n+            employeeOneToOneDetails: []\n+        })\n+    const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.DESC)\n+    const [completedOneToOnesCount, setCompletedOneToOnesCount] =\n+        useState<number>(0)\n+    const [pendingOneToOnesCount, setPendingOneToOnesCount] =\n+        useState<number>(0)\n+    const [error, setError] = useState<boolean>(false)\n+    const [alertState, setAlertState] = useState<\n+        DialogState<EmployeeOneToOneDetail>\n+    >({\n+        tag: 'Closed'\n+    })\n+\n+    const successSnack = createSnack({\n+        alert: { severity: 'success' },\n+        showCloseIcon: true\n+    })\n+    const errorSnack = createSnack({\n+        alert: { severity: 'error' },\n+        showCloseIcon: true\n+    })\n+\n+    const handleTexts = (\n+        employeeOneToOnes: EmployeeOneToOneResponse\n+    ): EmployeeOneToOneResponse => {\n+        return {\n+            ...employeeOneToOnes,\n+            employeeOneToOneDetails:\n+                employeeOneToOnes.employeeOneToOneDetails.map(\n+                    (oneToOneDetail) => ({\n+                        ...oneToOneDetail,\n+                        templateName: textParser(oneToOneDetail.templateName)\n+                    })\n+                )\n+        }\n+    }\n+\n+    const setCompletedAndPendingOneToOnesCount = () => {\n+        const completedOneToOnes =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) => oneToOneDetail.status === STATUS_COMPLETE\n+            )\n+        const pendingOneToOnes =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) =>\n+                    oneToOneDetail.status === STATUS_READY ||\n+                    oneToOneDetail.status === STATUS_STARTED ||\n+                    oneToOneDetail.status === STATUS_PENDING\n+            )\n+\n+        setCompletedOneToOnesCount(completedOneToOnes.length)\n+        setPendingOneToOnesCount(pendingOneToOnes.length)\n+    }\n+    const handleBack = () => {\n+        navigate('/one-to-one')\n+    }\n+\n+    const fetchEmployeeOneToOnes = () => {\n+        if (!id) {\n+            handleBack()\n+            return\n+        }\n+\n+        getEmployeeOneToOnes(id)\n+            .then(handleTexts)\n+            .then((employeeOneToOnes) => {\n+                setEmployeeOneToOnes(employeeOneToOnes)\n+                setError(false)\n+            })\n+            .catch(() => {\n+                setError(true)\n+            })\n+            .finally(() => {\n+                setLoading(false)\n+            })\n+    }\n+\n+    const sortOneToOnes = (\n+        employeeOneToOneDetails: EmployeeOneToOneDetail[],\n+        order: SortOrder\n+    ) => {\n+        return employeeOneToOneDetails.sort((a, b) => {\n+            const dateA = new Date(a.lastModifiedDate).getTime()\n+            const dateB = new Date(b.lastModifiedDate).getTime()\n+            return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n+        })\n+    }\n+\n+    useEffect(() => {\n+        logEvent(EventStore.getEvent('employeeOneToOneOverviewViewed'))\n+        fetchEmployeeOneToOnes()\n+    }, [])\n+\n+    useEffect(() => {\n+        setCompletedAndPendingOneToOnesCount()",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1714757071",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 194,
//         "comment": "Why do we even have this? Seems strange to me. Would be better to have retry mechanic if this is something that can happen",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,248 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n-import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n-import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import AlertDialog from '@/Components/AlertDialog'\n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { getEmployeeOneToOnes, deleteOneToOne } from '@/services/one-to-one'\n+import {\n+    EmployeeOneToOneResponse,\n+    EmployeeOneToOneDetail\n+} from '@/services/one-to-one/types'\n+import { EventStore } from '@/services/userAnalyticsServcie/eventStore'\n+import logEvent from '@/services/userAnalyticsServcie/userAnalyticsService'\n+import {\n+    DialogState,\n+    getClosedState,\n+    getOpenState,\n+    isOpen\n+} from '@/types/dialog'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n+import { Box, Typography } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING,\n+    SortOrder\n+} from './constants'\n+import OneToOneAccordion from './one-to-one-accordion/OneToOneAccordion'\n+import OneToOneStats from './one-to-one-stats/OneToOneStats'\n+import OneToOneTableHeader from './one-to-one-table-header/OneToOneTableHeader'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const { id } = useParams()\n+    const navigate = useNavigate()\n+    const { textParser } = useGlobal()\n+    const { createSnack } = useSnackbar()\n+\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =\n+        useState<EmployeeOneToOneResponse>({\n+            revieweeId: '',\n+            profileActive: false,\n+            employeeOneToOneDetails: []\n+        })\n+    const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.DESC)\n+    const [completedOneToOnesCount, setCompletedOneToOnesCount] =\n+        useState<number>(0)\n+    const [pendingOneToOnesCount, setPendingOneToOnesCount] =\n+        useState<number>(0)\n+    const [error, setError] = useState<boolean>(false)\n+    const [alertState, setAlertState] = useState<\n+        DialogState<EmployeeOneToOneDetail>\n+    >({\n+        tag: 'Closed'\n+    })\n+\n+    const successSnack = createSnack({\n+        alert: { severity: 'success' },\n+        showCloseIcon: true\n+    })\n+    const errorSnack = createSnack({\n+        alert: { severity: 'error' },\n+        showCloseIcon: true\n+    })\n+\n+    const handleTexts = (\n+        employeeOneToOnes: EmployeeOneToOneResponse\n+    ): EmployeeOneToOneResponse => {\n+        return {\n+            ...employeeOneToOnes,\n+            employeeOneToOneDetails:\n+                employeeOneToOnes.employeeOneToOneDetails.map(\n+                    (oneToOneDetail) => ({\n+                        ...oneToOneDetail,\n+                        templateName: textParser(oneToOneDetail.templateName)\n+                    })\n+                )\n+        }\n+    }\n+\n+    const setCompletedAndPendingOneToOnesCount = () => {\n+        const completedOneToOnes =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) => oneToOneDetail.status === STATUS_COMPLETE\n+            )\n+        const pendingOneToOnes =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) =>\n+                    oneToOneDetail.status === STATUS_READY ||\n+                    oneToOneDetail.status === STATUS_STARTED ||\n+                    oneToOneDetail.status === STATUS_PENDING\n+            )\n+\n+        setCompletedOneToOnesCount(completedOneToOnes.length)\n+        setPendingOneToOnesCount(pendingOneToOnes.length)\n+    }\n+    const handleBack = () => {\n+        navigate('/one-to-one')\n+    }\n+\n+    const fetchEmployeeOneToOnes = () => {\n+        if (!id) {\n+            handleBack()\n+            return\n+        }\n+\n+        getEmployeeOneToOnes(id)\n+            .then(handleTexts)\n+            .then((employeeOneToOnes) => {\n+                setEmployeeOneToOnes(employeeOneToOnes)\n+                setError(false)\n+            })\n+            .catch(() => {\n+                setError(true)\n+            })\n+            .finally(() => {\n+                setLoading(false)\n+            })\n+    }\n+\n+    const sortOneToOnes = (\n+        employeeOneToOneDetails: EmployeeOneToOneDetail[],\n+        order: SortOrder\n+    ) => {\n+        return employeeOneToOneDetails.sort((a, b) => {\n+            const dateA = new Date(a.lastModifiedDate).getTime()\n+            const dateB = new Date(b.lastModifiedDate).getTime()\n+            return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n+        })\n+    }\n+\n+    useEffect(() => {\n+        logEvent(EventStore.getEvent('employeeOneToOneOverviewViewed'))\n+        fetchEmployeeOneToOnes()\n+    }, [])\n+\n+    useEffect(() => {\n+        setCompletedAndPendingOneToOnesCount()\n+    }, [employeeOneToOnes])\n+\n+    useEffect(() => {\n+        if (employeeOneToOnes) {\n+            setEmployeeOneToOnes((prev) => ({\n+                ...prev,\n+                employeeOneToOneDetails: sortOneToOnes(\n+                    prev.employeeOneToOneDetails,\n+                    sortOrder\n+                )\n+            }))\n+        }\n+    }, [sortOrder])\n+\n+    const toggleSortOrder = () => {\n+        setSortOrder((prevOrder) =>\n+            prevOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC\n+        )\n+    }\n+\n+    const handleDelete = (selectedOneToOneDetail: EmployeeOneToOneDetail) => {\n+        logEvent(EventStore.getEvent('employeeOneToOneDeleted'))\n+        setAlertState(getClosedState())\n+\n+        const { employeeOneToOneDetails } = employeeOneToOnes\n+\n+        setEmployeeOneToOnes((prev) => ({\n+            ...prev,\n+            employeeOneToOneDetails: prev.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) =>\n+                    oneToOneDetail.oneToOneId !==\n+                    selectedOneToOneDetail.oneToOneId\n+            )\n+        }))\n+        deleteOneToOne(selectedOneToOneDetail.oneToOneId)\n+            .then(() => successSnack(t('success-delete-oto')))\n+            .catch(() => {\n+                errorSnack(t('failed-delete-oto'))\n+                setEmployeeOneToOnes((prev) => ({\n+                    ...prev,\n+                    employeeOneToOneDetails\n+                }))\n+            })\n+    }\n \n-const EmployeeDetails: FC<Props> = ({ oto, onBack }) => {\n+    if (loading) {\n+        return <StyledCircularProgress />\n+    }\n+    if (error) {\n+        return (\n+            <FailedErrorMessage",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1714758146",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 194,
//         "comment": "And I don't mean retry on click :p ",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,248 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n-import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n-import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import AlertDialog from '@/Components/AlertDialog'\n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { getEmployeeOneToOnes, deleteOneToOne } from '@/services/one-to-one'\n+import {\n+    EmployeeOneToOneResponse,\n+    EmployeeOneToOneDetail\n+} from '@/services/one-to-one/types'\n+import { EventStore } from '@/services/userAnalyticsServcie/eventStore'\n+import logEvent from '@/services/userAnalyticsServcie/userAnalyticsService'\n+import {\n+    DialogState,\n+    getClosedState,\n+    getOpenState,\n+    isOpen\n+} from '@/types/dialog'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n+import { Box, Typography } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING,\n+    SortOrder\n+} from './constants'\n+import OneToOneAccordion from './one-to-one-accordion/OneToOneAccordion'\n+import OneToOneStats from './one-to-one-stats/OneToOneStats'\n+import OneToOneTableHeader from './one-to-one-table-header/OneToOneTableHeader'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const { id } = useParams()\n+    const navigate = useNavigate()\n+    const { textParser } = useGlobal()\n+    const { createSnack } = useSnackbar()\n+\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =\n+        useState<EmployeeOneToOneResponse>({\n+            revieweeId: '',\n+            profileActive: false,\n+            employeeOneToOneDetails: []\n+        })\n+    const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.DESC)\n+    const [completedOneToOnesCount, setCompletedOneToOnesCount] =\n+        useState<number>(0)\n+    const [pendingOneToOnesCount, setPendingOneToOnesCount] =\n+        useState<number>(0)\n+    const [error, setError] = useState<boolean>(false)\n+    const [alertState, setAlertState] = useState<\n+        DialogState<EmployeeOneToOneDetail>\n+    >({\n+        tag: 'Closed'\n+    })\n+\n+    const successSnack = createSnack({\n+        alert: { severity: 'success' },\n+        showCloseIcon: true\n+    })\n+    const errorSnack = createSnack({\n+        alert: { severity: 'error' },\n+        showCloseIcon: true\n+    })\n+\n+    const handleTexts = (\n+        employeeOneToOnes: EmployeeOneToOneResponse\n+    ): EmployeeOneToOneResponse => {\n+        return {\n+            ...employeeOneToOnes,\n+            employeeOneToOneDetails:\n+                employeeOneToOnes.employeeOneToOneDetails.map(\n+                    (oneToOneDetail) => ({\n+                        ...oneToOneDetail,\n+                        templateName: textParser(oneToOneDetail.templateName)\n+                    })\n+                )\n+        }\n+    }\n+\n+    const setCompletedAndPendingOneToOnesCount = () => {\n+        const completedOneToOnes =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) => oneToOneDetail.status === STATUS_COMPLETE\n+            )\n+        const pendingOneToOnes =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) =>\n+                    oneToOneDetail.status === STATUS_READY ||\n+                    oneToOneDetail.status === STATUS_STARTED ||\n+                    oneToOneDetail.status === STATUS_PENDING\n+            )\n+\n+        setCompletedOneToOnesCount(completedOneToOnes.length)\n+        setPendingOneToOnesCount(pendingOneToOnes.length)\n+    }\n+    const handleBack = () => {\n+        navigate('/one-to-one')\n+    }\n+\n+    const fetchEmployeeOneToOnes = () => {\n+        if (!id) {\n+            handleBack()\n+            return\n+        }\n+\n+        getEmployeeOneToOnes(id)\n+            .then(handleTexts)\n+            .then((employeeOneToOnes) => {\n+                setEmployeeOneToOnes(employeeOneToOnes)\n+                setError(false)\n+            })\n+            .catch(() => {\n+                setError(true)\n+            })\n+            .finally(() => {\n+                setLoading(false)\n+            })\n+    }\n+\n+    const sortOneToOnes = (\n+        employeeOneToOneDetails: EmployeeOneToOneDetail[],\n+        order: SortOrder\n+    ) => {\n+        return employeeOneToOneDetails.sort((a, b) => {\n+            const dateA = new Date(a.lastModifiedDate).getTime()\n+            const dateB = new Date(b.lastModifiedDate).getTime()\n+            return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n+        })\n+    }\n+\n+    useEffect(() => {\n+        logEvent(EventStore.getEvent('employeeOneToOneOverviewViewed'))\n+        fetchEmployeeOneToOnes()\n+    }, [])\n+\n+    useEffect(() => {\n+        setCompletedAndPendingOneToOnesCount()\n+    }, [employeeOneToOnes])\n+\n+    useEffect(() => {\n+        if (employeeOneToOnes) {\n+            setEmployeeOneToOnes((prev) => ({\n+                ...prev,\n+                employeeOneToOneDetails: sortOneToOnes(\n+                    prev.employeeOneToOneDetails,\n+                    sortOrder\n+                )\n+            }))\n+        }\n+    }, [sortOrder])\n+\n+    const toggleSortOrder = () => {\n+        setSortOrder((prevOrder) =>\n+            prevOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC\n+        )\n+    }\n+\n+    const handleDelete = (selectedOneToOneDetail: EmployeeOneToOneDetail) => {\n+        logEvent(EventStore.getEvent('employeeOneToOneDeleted'))\n+        setAlertState(getClosedState())\n+\n+        const { employeeOneToOneDetails } = employeeOneToOnes\n+\n+        setEmployeeOneToOnes((prev) => ({\n+            ...prev,\n+            employeeOneToOneDetails: prev.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) =>\n+                    oneToOneDetail.oneToOneId !==\n+                    selectedOneToOneDetail.oneToOneId\n+            )\n+        }))\n+        deleteOneToOne(selectedOneToOneDetail.oneToOneId)\n+            .then(() => successSnack(t('success-delete-oto')))\n+            .catch(() => {\n+                errorSnack(t('failed-delete-oto'))\n+                setEmployeeOneToOnes((prev) => ({\n+                    ...prev,\n+                    employeeOneToOneDetails\n+                }))\n+            })\n+    }\n \n-const EmployeeDetails: FC<Props> = ({ oto, onBack }) => {\n+    if (loading) {\n+        return <StyledCircularProgress />\n+    }\n+    if (error) {\n+        return (\n+            <FailedErrorMessage",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1714758444",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 143,
//         "comment": "done\r\n",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,248 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n-import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n-import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import AlertDialog from '@/Components/AlertDialog'\n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { getEmployeeOneToOnes, deleteOneToOne } from '@/services/one-to-one'\n+import {\n+    EmployeeOneToOneResponse,\n+    EmployeeOneToOneDetail\n+} from '@/services/one-to-one/types'\n+import { EventStore } from '@/services/userAnalyticsServcie/eventStore'\n+import logEvent from '@/services/userAnalyticsServcie/userAnalyticsService'\n+import {\n+    DialogState,\n+    getClosedState,\n+    getOpenState,\n+    isOpen\n+} from '@/types/dialog'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n+import { Box, Typography } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING,\n+    SortOrder\n+} from './constants'\n+import OneToOneAccordion from './one-to-one-accordion/OneToOneAccordion'\n+import OneToOneStats from './one-to-one-stats/OneToOneStats'\n+import OneToOneTableHeader from './one-to-one-table-header/OneToOneTableHeader'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const { id } = useParams()\n+    const navigate = useNavigate()\n+    const { textParser } = useGlobal()\n+    const { createSnack } = useSnackbar()\n+\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =\n+        useState<EmployeeOneToOneResponse>({\n+            revieweeId: '',\n+            profileActive: false,\n+            employeeOneToOneDetails: []\n+        })\n+    const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.DESC)\n+    const [completedOneToOnesCount, setCompletedOneToOnesCount] =\n+        useState<number>(0)\n+    const [pendingOneToOnesCount, setPendingOneToOnesCount] =\n+        useState<number>(0)\n+    const [error, setError] = useState<boolean>(false)\n+    const [alertState, setAlertState] = useState<\n+        DialogState<EmployeeOneToOneDetail>\n+    >({\n+        tag: 'Closed'\n+    })\n+\n+    const successSnack = createSnack({\n+        alert: { severity: 'success' },\n+        showCloseIcon: true\n+    })\n+    const errorSnack = createSnack({\n+        alert: { severity: 'error' },\n+        showCloseIcon: true\n+    })\n+\n+    const handleTexts = (\n+        employeeOneToOnes: EmployeeOneToOneResponse\n+    ): EmployeeOneToOneResponse => {\n+        return {\n+            ...employeeOneToOnes,\n+            employeeOneToOneDetails:\n+                employeeOneToOnes.employeeOneToOneDetails.map(\n+                    (oneToOneDetail) => ({\n+                        ...oneToOneDetail,\n+                        templateName: textParser(oneToOneDetail.templateName)\n+                    })\n+                )\n+        }\n+    }\n+\n+    const setCompletedAndPendingOneToOnesCount = () => {\n+        const completedOneToOnes =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) => oneToOneDetail.status === STATUS_COMPLETE\n+            )\n+        const pendingOneToOnes =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) =>\n+                    oneToOneDetail.status === STATUS_READY ||\n+                    oneToOneDetail.status === STATUS_STARTED ||\n+                    oneToOneDetail.status === STATUS_PENDING\n+            )\n+\n+        setCompletedOneToOnesCount(completedOneToOnes.length)\n+        setPendingOneToOnesCount(pendingOneToOnes.length)\n+    }\n+    const handleBack = () => {\n+        navigate('/one-to-one')\n+    }\n+\n+    const fetchEmployeeOneToOnes = () => {\n+        if (!id) {\n+            handleBack()\n+            return\n+        }\n+\n+        getEmployeeOneToOnes(id)\n+            .then(handleTexts)\n+            .then((employeeOneToOnes) => {\n+                setEmployeeOneToOnes(employeeOneToOnes)\n+                setError(false)\n+            })\n+            .catch(() => {\n+                setError(true)\n+            })\n+            .finally(() => {\n+                setLoading(false)\n+            })\n+    }\n+\n+    const sortOneToOnes = (\n+        employeeOneToOneDetails: EmployeeOneToOneDetail[],\n+        order: SortOrder\n+    ) => {\n+        return employeeOneToOneDetails.sort((a, b) => {\n+            const dateA = new Date(a.lastModifiedDate).getTime()\n+            const dateB = new Date(b.lastModifiedDate).getTime()\n+            return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n+        })\n+    }\n+\n+    useEffect(() => {\n+        logEvent(EventStore.getEvent('employeeOneToOneOverviewViewed'))\n+        fetchEmployeeOneToOnes()\n+    }, [])\n+\n+    useEffect(() => {\n+        setCompletedAndPendingOneToOnesCount()",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1714762550",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 194,
//         "comment": "We are providing button in error msg to retry the call on failure",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,248 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n-import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n-import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import AlertDialog from '@/Components/AlertDialog'\n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { getEmployeeOneToOnes, deleteOneToOne } from '@/services/one-to-one'\n+import {\n+    EmployeeOneToOneResponse,\n+    EmployeeOneToOneDetail\n+} from '@/services/one-to-one/types'\n+import { EventStore } from '@/services/userAnalyticsServcie/eventStore'\n+import logEvent from '@/services/userAnalyticsServcie/userAnalyticsService'\n+import {\n+    DialogState,\n+    getClosedState,\n+    getOpenState,\n+    isOpen\n+} from '@/types/dialog'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n+import { Box, Typography } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING,\n+    SortOrder\n+} from './constants'\n+import OneToOneAccordion from './one-to-one-accordion/OneToOneAccordion'\n+import OneToOneStats from './one-to-one-stats/OneToOneStats'\n+import OneToOneTableHeader from './one-to-one-table-header/OneToOneTableHeader'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const { id } = useParams()\n+    const navigate = useNavigate()\n+    const { textParser } = useGlobal()\n+    const { createSnack } = useSnackbar()\n+\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =\n+        useState<EmployeeOneToOneResponse>({\n+            revieweeId: '',\n+            profileActive: false,\n+            employeeOneToOneDetails: []\n+        })\n+    const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.DESC)\n+    const [completedOneToOnesCount, setCompletedOneToOnesCount] =\n+        useState<number>(0)\n+    const [pendingOneToOnesCount, setPendingOneToOnesCount] =\n+        useState<number>(0)\n+    const [error, setError] = useState<boolean>(false)\n+    const [alertState, setAlertState] = useState<\n+        DialogState<EmployeeOneToOneDetail>\n+    >({\n+        tag: 'Closed'\n+    })\n+\n+    const successSnack = createSnack({\n+        alert: { severity: 'success' },\n+        showCloseIcon: true\n+    })\n+    const errorSnack = createSnack({\n+        alert: { severity: 'error' },\n+        showCloseIcon: true\n+    })\n+\n+    const handleTexts = (\n+        employeeOneToOnes: EmployeeOneToOneResponse\n+    ): EmployeeOneToOneResponse => {\n+        return {\n+            ...employeeOneToOnes,\n+            employeeOneToOneDetails:\n+                employeeOneToOnes.employeeOneToOneDetails.map(\n+                    (oneToOneDetail) => ({\n+                        ...oneToOneDetail,\n+                        templateName: textParser(oneToOneDetail.templateName)\n+                    })\n+                )\n+        }\n+    }\n+\n+    const setCompletedAndPendingOneToOnesCount = () => {\n+        const completedOneToOnes =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) => oneToOneDetail.status === STATUS_COMPLETE\n+            )\n+        const pendingOneToOnes =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) =>\n+                    oneToOneDetail.status === STATUS_READY ||\n+                    oneToOneDetail.status === STATUS_STARTED ||\n+                    oneToOneDetail.status === STATUS_PENDING\n+            )\n+\n+        setCompletedOneToOnesCount(completedOneToOnes.length)\n+        setPendingOneToOnesCount(pendingOneToOnes.length)\n+    }\n+    const handleBack = () => {\n+        navigate('/one-to-one')\n+    }\n+\n+    const fetchEmployeeOneToOnes = () => {\n+        if (!id) {\n+            handleBack()\n+            return\n+        }\n+\n+        getEmployeeOneToOnes(id)\n+            .then(handleTexts)\n+            .then((employeeOneToOnes) => {\n+                setEmployeeOneToOnes(employeeOneToOnes)\n+                setError(false)\n+            })\n+            .catch(() => {\n+                setError(true)\n+            })\n+            .finally(() => {\n+                setLoading(false)\n+            })\n+    }\n+\n+    const sortOneToOnes = (\n+        employeeOneToOneDetails: EmployeeOneToOneDetail[],\n+        order: SortOrder\n+    ) => {\n+        return employeeOneToOneDetails.sort((a, b) => {\n+            const dateA = new Date(a.lastModifiedDate).getTime()\n+            const dateB = new Date(b.lastModifiedDate).getTime()\n+            return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n+        })\n+    }\n+\n+    useEffect(() => {\n+        logEvent(EventStore.getEvent('employeeOneToOneOverviewViewed'))\n+        fetchEmployeeOneToOnes()\n+    }, [])\n+\n+    useEffect(() => {\n+        setCompletedAndPendingOneToOnesCount()\n+    }, [employeeOneToOnes])\n+\n+    useEffect(() => {\n+        if (employeeOneToOnes) {\n+            setEmployeeOneToOnes((prev) => ({\n+                ...prev,\n+                employeeOneToOneDetails: sortOneToOnes(\n+                    prev.employeeOneToOneDetails,\n+                    sortOrder\n+                )\n+            }))\n+        }\n+    }, [sortOrder])\n+\n+    const toggleSortOrder = () => {\n+        setSortOrder((prevOrder) =>\n+            prevOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC\n+        )\n+    }\n+\n+    const handleDelete = (selectedOneToOneDetail: EmployeeOneToOneDetail) => {\n+        logEvent(EventStore.getEvent('employeeOneToOneDeleted'))\n+        setAlertState(getClosedState())\n+\n+        const { employeeOneToOneDetails } = employeeOneToOnes\n+\n+        setEmployeeOneToOnes((prev) => ({\n+            ...prev,\n+            employeeOneToOneDetails: prev.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) =>\n+                    oneToOneDetail.oneToOneId !==\n+                    selectedOneToOneDetail.oneToOneId\n+            )\n+        }))\n+        deleteOneToOne(selectedOneToOneDetail.oneToOneId)\n+            .then(() => successSnack(t('success-delete-oto')))\n+            .catch(() => {\n+                errorSnack(t('failed-delete-oto'))\n+                setEmployeeOneToOnes((prev) => ({\n+                    ...prev,\n+                    employeeOneToOneDetails\n+                }))\n+            })\n+    }\n \n-const EmployeeDetails: FC<Props> = ({ oto, onBack }) => {\n+    if (loading) {\n+        return <StyledCircularProgress />\n+    }\n+    if (error) {\n+        return (\n+            <FailedErrorMessage",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1714765713",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 194,
//         "comment": "Okay, I will look into it.\r\nThis is the implementation used in hr-insights so I used that only.\r\nWill add a retry mechanism",
//         "commitId": "02916e92a8ded02f5976119d5969689d5b669724",
//         "codeSnippet": "@@ -1,23 +1,248 @@\n-import React, { FC } from 'react'\n+import { FC, useState, useEffect } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useNavigate, useParams } from 'react-router-dom'\n \n-import FlexBox from '@/Components/FlexBox'\n-import { OneToOne } from '@/services/one-to-one'\n-import ArrowBackIcon from '@mui/icons-material/ArrowBack'\n-import { IconButton } from '@mui/material'\n+import AlertDialog from '@/Components/AlertDialog'\n+import FailedErrorMessage from '@/Components/ErrorMessage/FailedErrorMessage'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { getEmployeeOneToOnes, deleteOneToOne } from '@/services/one-to-one'\n+import {\n+    EmployeeOneToOneResponse,\n+    EmployeeOneToOneDetail\n+} from '@/services/one-to-one/types'\n+import { EventStore } from '@/services/userAnalyticsServcie/eventStore'\n+import logEvent from '@/services/userAnalyticsServcie/userAnalyticsService'\n+import {\n+    DialogState,\n+    getClosedState,\n+    getOpenState,\n+    isOpen\n+} from '@/types/dialog'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n+import { Box, Typography } from '@mui/material'\n \n-type Props = {\n-    oto: OneToOne\n-    onBack: () => void\n-}\n+import {\n+    STATUS_STARTED,\n+    STATUS_READY,\n+    STATUS_COMPLETE,\n+    STATUS_PENDING,\n+    SortOrder\n+} from './constants'\n+import OneToOneAccordion from './one-to-one-accordion/OneToOneAccordion'\n+import OneToOneStats from './one-to-one-stats/OneToOneStats'\n+import OneToOneTableHeader from './one-to-one-table-header/OneToOneTableHeader'\n+import { StyledCircularProgress } from './styled'\n+\n+const EmployeeDetails: FC = () => {\n+    const { t } = useTranslation('employee-details')\n+    const { id } = useParams()\n+    const navigate = useNavigate()\n+    const { textParser } = useGlobal()\n+    const { createSnack } = useSnackbar()\n+\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [employeeOneToOnes, setEmployeeOneToOnes] =\n+        useState<EmployeeOneToOneResponse>({\n+            revieweeId: '',\n+            profileActive: false,\n+            employeeOneToOneDetails: []\n+        })\n+    const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.DESC)\n+    const [completedOneToOnesCount, setCompletedOneToOnesCount] =\n+        useState<number>(0)\n+    const [pendingOneToOnesCount, setPendingOneToOnesCount] =\n+        useState<number>(0)\n+    const [error, setError] = useState<boolean>(false)\n+    const [alertState, setAlertState] = useState<\n+        DialogState<EmployeeOneToOneDetail>\n+    >({\n+        tag: 'Closed'\n+    })\n+\n+    const successSnack = createSnack({\n+        alert: { severity: 'success' },\n+        showCloseIcon: true\n+    })\n+    const errorSnack = createSnack({\n+        alert: { severity: 'error' },\n+        showCloseIcon: true\n+    })\n+\n+    const handleTexts = (\n+        employeeOneToOnes: EmployeeOneToOneResponse\n+    ): EmployeeOneToOneResponse => {\n+        return {\n+            ...employeeOneToOnes,\n+            employeeOneToOneDetails:\n+                employeeOneToOnes.employeeOneToOneDetails.map(\n+                    (oneToOneDetail) => ({\n+                        ...oneToOneDetail,\n+                        templateName: textParser(oneToOneDetail.templateName)\n+                    })\n+                )\n+        }\n+    }\n+\n+    const setCompletedAndPendingOneToOnesCount = () => {\n+        const completedOneToOnes =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) => oneToOneDetail.status === STATUS_COMPLETE\n+            )\n+        const pendingOneToOnes =\n+            employeeOneToOnes.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) =>\n+                    oneToOneDetail.status === STATUS_READY ||\n+                    oneToOneDetail.status === STATUS_STARTED ||\n+                    oneToOneDetail.status === STATUS_PENDING\n+            )\n+\n+        setCompletedOneToOnesCount(completedOneToOnes.length)\n+        setPendingOneToOnesCount(pendingOneToOnes.length)\n+    }\n+    const handleBack = () => {\n+        navigate('/one-to-one')\n+    }\n+\n+    const fetchEmployeeOneToOnes = () => {\n+        if (!id) {\n+            handleBack()\n+            return\n+        }\n+\n+        getEmployeeOneToOnes(id)\n+            .then(handleTexts)\n+            .then((employeeOneToOnes) => {\n+                setEmployeeOneToOnes(employeeOneToOnes)\n+                setError(false)\n+            })\n+            .catch(() => {\n+                setError(true)\n+            })\n+            .finally(() => {\n+                setLoading(false)\n+            })\n+    }\n+\n+    const sortOneToOnes = (\n+        employeeOneToOneDetails: EmployeeOneToOneDetail[],\n+        order: SortOrder\n+    ) => {\n+        return employeeOneToOneDetails.sort((a, b) => {\n+            const dateA = new Date(a.lastModifiedDate).getTime()\n+            const dateB = new Date(b.lastModifiedDate).getTime()\n+            return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n+        })\n+    }\n+\n+    useEffect(() => {\n+        logEvent(EventStore.getEvent('employeeOneToOneOverviewViewed'))\n+        fetchEmployeeOneToOnes()\n+    }, [])\n+\n+    useEffect(() => {\n+        setCompletedAndPendingOneToOnesCount()\n+    }, [employeeOneToOnes])\n+\n+    useEffect(() => {\n+        if (employeeOneToOnes) {\n+            setEmployeeOneToOnes((prev) => ({\n+                ...prev,\n+                employeeOneToOneDetails: sortOneToOnes(\n+                    prev.employeeOneToOneDetails,\n+                    sortOrder\n+                )\n+            }))\n+        }\n+    }, [sortOrder])\n+\n+    const toggleSortOrder = () => {\n+        setSortOrder((prevOrder) =>\n+            prevOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC\n+        )\n+    }\n+\n+    const handleDelete = (selectedOneToOneDetail: EmployeeOneToOneDetail) => {\n+        logEvent(EventStore.getEvent('employeeOneToOneDeleted'))\n+        setAlertState(getClosedState())\n+\n+        const { employeeOneToOneDetails } = employeeOneToOnes\n+\n+        setEmployeeOneToOnes((prev) => ({\n+            ...prev,\n+            employeeOneToOneDetails: prev.employeeOneToOneDetails.filter(\n+                (oneToOneDetail) =>\n+                    oneToOneDetail.oneToOneId !==\n+                    selectedOneToOneDetail.oneToOneId\n+            )\n+        }))\n+        deleteOneToOne(selectedOneToOneDetail.oneToOneId)\n+            .then(() => successSnack(t('success-delete-oto')))\n+            .catch(() => {\n+                errorSnack(t('failed-delete-oto'))\n+                setEmployeeOneToOnes((prev) => ({\n+                    ...prev,\n+                    employeeOneToOneDetails\n+                }))\n+            })\n+    }\n \n-const EmployeeDetails: FC<Props> = ({ oto, onBack }) => {\n+    if (loading) {\n+        return <StyledCircularProgress />\n+    }\n+    if (error) {\n+        return (\n+            <FailedErrorMessage",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/42#discussion_r1714796669",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/todo-overview/empty-state/styled.ts",
//         "line": null,
//         "comment": "Not from system :)",
//         "commitId": "f0e071f9f48040b5f319d49b37020d4bd601dd78",
//         "codeSnippet": "@@ -0,0 +1,19 @@\n+import { Box } from '@mui/system'\n+import styled from '@mui/system/styled'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/41#discussion_r1714944769",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/todo-overview/todo-body/TodoBody.tsx",
//         "line": 80,
//         "comment": "Colors should come from theme ",
//         "commitId": "f0e071f9f48040b5f319d49b37020d4bd601dd78",
//         "codeSnippet": "@@ -0,0 +1,233 @@\n+import React, { Dispatch, FC, SetStateAction } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import PopupState, { bindMenu, bindTrigger } from 'material-ui-popup-state'\n+import moment from 'moment'\n+\n+import StatusChip from '@/features/todo-overview/StatusChip'\n+import { updateArchiveState, updateCompletedState } from '@/services/to-do'\n+import MoreVertIcon from '@mui/icons-material/MoreVert'\n+import { Box, Menu, TableCell, TableRow } from '@mui/material'\n+\n+import DateFormatter from '../../../Components/DateFormatter/DateFormatter'\n+import { TodoOverviewData } from '../../../services/to-do/types'\n+import {\n+    AlignCenter,\n+    AlignChip,\n+    CheckedIcon,\n+    StyledButton,\n+    StyledCreatedIn,\n+    StyledMenu,\n+    UncheckedIcon\n+} from './styled'\n+\n+type TodoBodyProps = {\n+    todoOverviewDataIndex: number\n+    dateFormat: string\n+    filteredTodos: TodoOverviewData[]\n+    todosResponse: TodoOverviewData[]\n+    setFilteredView: Dispatch<SetStateAction<TodoOverviewData[]>>\n+    setTodosResponse: Dispatch<SetStateAction<TodoOverviewData[]>>\n+}\n+\n+const TodoBody: FC<TodoBodyProps> = ({\n+    filteredTodos,\n+    todoOverviewDataIndex,\n+    dateFormat,\n+    setFilteredView,\n+    setTodosResponse,\n+    todosResponse\n+}) => {\n+    const { t } = useTranslation('to-do')\n+\n+    const handleStateChange = (\n+        todoId: string,\n+        state: boolean,\n+        archive: boolean\n+    ) => {\n+        const optimisticUpdate = () =>\n+            todosResponse.map((todo, index) => {\n+                if (index !== todoOverviewDataIndex) return todo\n+                const updatedDetails = todo.todoOverviewDetails.map((detail) =>\n+                    detail.id === todoId\n+                        ? archive\n+                            ? { ...detail, archived: !state }\n+                            : { ...detail, done: !state }\n+                        : detail\n+                )\n+                return { ...todo, todoOverviewDetails: updatedDetails }\n+            })\n+\n+        const previousTodos = todosResponse\n+        setTodosResponse(optimisticUpdate())\n+        setFilteredView(optimisticUpdate())\n+\n+        const updateState = archive\n+            ? updateArchiveState(todoId, !state)\n+            : updateCompletedState(todoId, !state)\n+\n+        updateState.catch((error) => {\n+            // Revert the optimistic update if the API call fails\n+            setTodosResponse(previousTodos)\n+            setFilteredView(previousTodos)\n+        })\n+    }\n+\n+    return (\n+        <>\n+            {filteredTodos[todoOverviewDataIndex].todoOverviewDetails.map(\n+                (todoDetail) => {\n+                    const backgroundColor = todoDetail.done ? '#ebf6f1' : ''",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/41#discussion_r1714946848",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/todo-overview/todo-body/TodoBody.tsx",
//         "line": 148,
//         "comment": "Translation file?",
//         "commitId": "f0e071f9f48040b5f319d49b37020d4bd601dd78",
//         "codeSnippet": "@@ -0,0 +1,233 @@\n+import React, { Dispatch, FC, SetStateAction } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import PopupState, { bindMenu, bindTrigger } from 'material-ui-popup-state'\n+import moment from 'moment'\n+\n+import StatusChip from '@/features/todo-overview/StatusChip'\n+import { updateArchiveState, updateCompletedState } from '@/services/to-do'\n+import MoreVertIcon from '@mui/icons-material/MoreVert'\n+import { Box, Menu, TableCell, TableRow } from '@mui/material'\n+\n+import DateFormatter from '../../../Components/DateFormatter/DateFormatter'\n+import { TodoOverviewData } from '../../../services/to-do/types'\n+import {\n+    AlignCenter,\n+    AlignChip,\n+    CheckedIcon,\n+    StyledButton,\n+    StyledCreatedIn,\n+    StyledMenu,\n+    UncheckedIcon\n+} from './styled'\n+\n+type TodoBodyProps = {\n+    todoOverviewDataIndex: number\n+    dateFormat: string\n+    filteredTodos: TodoOverviewData[]\n+    todosResponse: TodoOverviewData[]\n+    setFilteredView: Dispatch<SetStateAction<TodoOverviewData[]>>\n+    setTodosResponse: Dispatch<SetStateAction<TodoOverviewData[]>>\n+}\n+\n+const TodoBody: FC<TodoBodyProps> = ({\n+    filteredTodos,\n+    todoOverviewDataIndex,\n+    dateFormat,\n+    setFilteredView,\n+    setTodosResponse,\n+    todosResponse\n+}) => {\n+    const { t } = useTranslation('to-do')\n+\n+    const handleStateChange = (\n+        todoId: string,\n+        state: boolean,\n+        archive: boolean\n+    ) => {\n+        const optimisticUpdate = () =>\n+            todosResponse.map((todo, index) => {\n+                if (index !== todoOverviewDataIndex) return todo\n+                const updatedDetails = todo.todoOverviewDetails.map((detail) =>\n+                    detail.id === todoId\n+                        ? archive\n+                            ? { ...detail, archived: !state }\n+                            : { ...detail, done: !state }\n+                        : detail\n+                )\n+                return { ...todo, todoOverviewDetails: updatedDetails }\n+            })\n+\n+        const previousTodos = todosResponse\n+        setTodosResponse(optimisticUpdate())\n+        setFilteredView(optimisticUpdate())\n+\n+        const updateState = archive\n+            ? updateArchiveState(todoId, !state)\n+            : updateCompletedState(todoId, !state)\n+\n+        updateState.catch((error) => {\n+            // Revert the optimistic update if the API call fails\n+            setTodosResponse(previousTodos)\n+            setFilteredView(previousTodos)\n+        })\n+    }\n+\n+    return (\n+        <>\n+            {filteredTodos[todoOverviewDataIndex].todoOverviewDetails.map(\n+                (todoDetail) => {\n+                    const backgroundColor = todoDetail.done ? '#ebf6f1' : ''\n+                    const mySection =\n+                        filteredTodos[todoOverviewDataIndex].ownerName ===\n+                        'Myself'\n+                    return (\n+                        <TableRow\n+                            key={todoDetail.id}\n+                            sx={{ paddingBottom: '10px' }}\n+                        >\n+                            <TableCell sx={{ backgroundColor }}>\n+                                <AlignCenter>\n+                                    {!todoDetail.archived &&\n+                                    (mySection || todoDetail.done) ? (\n+                                        todoDetail.done ? (\n+                                            <CheckedIcon\n+                                                onClick={() =>\n+                                                    handleStateChange(\n+                                                        todoDetail.id,\n+                                                        todoDetail.done,\n+                                                        false\n+                                                    )\n+                                                }\n+                                                sx={{\n+                                                    color: mySection\n+                                                        ? '#005f78'\n+                                                        : '#969696',\n+                                                    cursor: 'pointer'\n+                                                }}\n+                                            />\n+                                        ) : (\n+                                            <UncheckedIcon\n+                                                onClick={() =>\n+                                                    handleStateChange(\n+                                                        todoDetail.id,\n+                                                        todoDetail.done,\n+                                                        false\n+                                                    )\n+                                                }\n+                                            />\n+                                        )\n+                                    ) : (\n+                                        <Box sx={{ paddingLeft: '34px' }} />\n+                                    )}\n+                                    {todoDetail.title}\n+                                </AlignCenter>\n+                            </TableCell>\n+                            <TableCell sx={{ backgroundColor }}>\n+                                <Box className='expandIcon'>\n+                                    <DateFormatter\n+                                        dateToFormat={\n+                                            todoDetail.oneToOneDetail.finishDate\n+                                        }\n+                                        userDateFormat={dateFormat}\n+                                        warning={false}\n+                                    />\n+                                </Box>\n+                                <StyledCreatedIn\n+                                    sx={{\n+                                        color: todoDetail.oneToOneDetail\n+                                            .finishDate\n+                                            ? '#0081A3'\n+                                            : '',\n+                                        cursor: todoDetail.oneToOneDetail\n+                                            .finishDate\n+                                            ? 'pointer'\n+                                            : ''\n+                                    }}\n+                                >\n+                                    1:1 Meeting&nbsp;",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/41#discussion_r1714948923",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/todo-overview/todo-body/TodoBody.tsx",
//         "line": 150,
//         "comment": "Translation file?",
//         "commitId": "f0e071f9f48040b5f319d49b37020d4bd601dd78",
//         "codeSnippet": "@@ -0,0 +1,233 @@\n+import React, { Dispatch, FC, SetStateAction } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import PopupState, { bindMenu, bindTrigger } from 'material-ui-popup-state'\n+import moment from 'moment'\n+\n+import StatusChip from '@/features/todo-overview/StatusChip'\n+import { updateArchiveState, updateCompletedState } from '@/services/to-do'\n+import MoreVertIcon from '@mui/icons-material/MoreVert'\n+import { Box, Menu, TableCell, TableRow } from '@mui/material'\n+\n+import DateFormatter from '../../../Components/DateFormatter/DateFormatter'\n+import { TodoOverviewData } from '../../../services/to-do/types'\n+import {\n+    AlignCenter,\n+    AlignChip,\n+    CheckedIcon,\n+    StyledButton,\n+    StyledCreatedIn,\n+    StyledMenu,\n+    UncheckedIcon\n+} from './styled'\n+\n+type TodoBodyProps = {\n+    todoOverviewDataIndex: number\n+    dateFormat: string\n+    filteredTodos: TodoOverviewData[]\n+    todosResponse: TodoOverviewData[]\n+    setFilteredView: Dispatch<SetStateAction<TodoOverviewData[]>>\n+    setTodosResponse: Dispatch<SetStateAction<TodoOverviewData[]>>\n+}\n+\n+const TodoBody: FC<TodoBodyProps> = ({\n+    filteredTodos,\n+    todoOverviewDataIndex,\n+    dateFormat,\n+    setFilteredView,\n+    setTodosResponse,\n+    todosResponse\n+}) => {\n+    const { t } = useTranslation('to-do')\n+\n+    const handleStateChange = (\n+        todoId: string,\n+        state: boolean,\n+        archive: boolean\n+    ) => {\n+        const optimisticUpdate = () =>\n+            todosResponse.map((todo, index) => {\n+                if (index !== todoOverviewDataIndex) return todo\n+                const updatedDetails = todo.todoOverviewDetails.map((detail) =>\n+                    detail.id === todoId\n+                        ? archive\n+                            ? { ...detail, archived: !state }\n+                            : { ...detail, done: !state }\n+                        : detail\n+                )\n+                return { ...todo, todoOverviewDetails: updatedDetails }\n+            })\n+\n+        const previousTodos = todosResponse\n+        setTodosResponse(optimisticUpdate())\n+        setFilteredView(optimisticUpdate())\n+\n+        const updateState = archive\n+            ? updateArchiveState(todoId, !state)\n+            : updateCompletedState(todoId, !state)\n+\n+        updateState.catch((error) => {\n+            // Revert the optimistic update if the API call fails\n+            setTodosResponse(previousTodos)\n+            setFilteredView(previousTodos)\n+        })\n+    }\n+\n+    return (\n+        <>\n+            {filteredTodos[todoOverviewDataIndex].todoOverviewDetails.map(\n+                (todoDetail) => {\n+                    const backgroundColor = todoDetail.done ? '#ebf6f1' : ''\n+                    const mySection =\n+                        filteredTodos[todoOverviewDataIndex].ownerName ===\n+                        'Myself'\n+                    return (\n+                        <TableRow\n+                            key={todoDetail.id}\n+                            sx={{ paddingBottom: '10px' }}\n+                        >\n+                            <TableCell sx={{ backgroundColor }}>\n+                                <AlignCenter>\n+                                    {!todoDetail.archived &&\n+                                    (mySection || todoDetail.done) ? (\n+                                        todoDetail.done ? (\n+                                            <CheckedIcon\n+                                                onClick={() =>\n+                                                    handleStateChange(\n+                                                        todoDetail.id,\n+                                                        todoDetail.done,\n+                                                        false\n+                                                    )\n+                                                }\n+                                                sx={{\n+                                                    color: mySection\n+                                                        ? '#005f78'\n+                                                        : '#969696',\n+                                                    cursor: 'pointer'\n+                                                }}\n+                                            />\n+                                        ) : (\n+                                            <UncheckedIcon\n+                                                onClick={() =>\n+                                                    handleStateChange(\n+                                                        todoDetail.id,\n+                                                        todoDetail.done,\n+                                                        false\n+                                                    )\n+                                                }\n+                                            />\n+                                        )\n+                                    ) : (\n+                                        <Box sx={{ paddingLeft: '34px' }} />\n+                                    )}\n+                                    {todoDetail.title}\n+                                </AlignCenter>\n+                            </TableCell>\n+                            <TableCell sx={{ backgroundColor }}>\n+                                <Box className='expandIcon'>\n+                                    <DateFormatter\n+                                        dateToFormat={\n+                                            todoDetail.oneToOneDetail.finishDate\n+                                        }\n+                                        userDateFormat={dateFormat}\n+                                        warning={false}\n+                                    />\n+                                </Box>\n+                                <StyledCreatedIn\n+                                    sx={{\n+                                        color: todoDetail.oneToOneDetail\n+                                            .finishDate\n+                                            ? '#0081A3'\n+                                            : '',\n+                                        cursor: todoDetail.oneToOneDetail\n+                                            .finishDate\n+                                            ? 'pointer'\n+                                            : ''\n+                                    }}\n+                                >\n+                                    1:1 Meeting&nbsp;\n+                                    <Box className='expandIcon'>\n+                                        with {todoDetail.otherParticipantName}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/41#discussion_r1714949151",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/todo-overview/todo-body/styled.ts",
//         "line": 16,
//         "comment": "Too much hardcoded colors. Fix them all",
//         "commitId": "f0e071f9f48040b5f319d49b37020d4bd601dd78",
//         "codeSnippet": "@@ -0,0 +1,48 @@\n+import RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked'\n+import TaskAltIcon from '@mui/icons-material/TaskAlt'\n+import { Box, Button, styled } from '@mui/material'\n+\n+export const StyledCreatedIn = styled(Box)({\n+    display: 'flex'\n+})\n+\n+export const AlignCenter = styled(Box)({\n+    display: 'flex',\n+    alignItems: 'center'\n+})\n+\n+export const UncheckedIcon = styled(RadioButtonUncheckedIcon)({\n+    marginRight: '10px',\n+    color: '#969696',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/41#discussion_r1714949935",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/todo-overview/todo-filter/TodoFilter.tsx",
//         "line": 60,
//         "comment": "Would be nice with a utils file where you made functions for these cases so it would be more understandable to read the reasoning behind this :)",
//         "commitId": "f0e071f9f48040b5f319d49b37020d4bd601dd78",
//         "codeSnippet": "@@ -0,0 +1,180 @@\n+import { FC, useEffect, useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import PopupState, { bindMenu, bindTrigger } from 'material-ui-popup-state'\n+import moment from 'moment'\n+\n+import { TodoOverviewData } from '@/services/to-do'\n+import styled from '@emotion/styled'\n+import ArrowDown from '@mui/icons-material/ArrowDropDown'\n+import { Box, MenuItem, Button, Checkbox, Menu } from '@mui/material'\n+\n+import SearchBar from './search/SearchBar'\n+\n+type Props = {\n+    todos: TodoOverviewData[]\n+    setFilteredTodos: (filteredTodos: TodoOverviewData[]) => void\n+}\n+\n+const CheckBoxMenuItem = styled(MenuItem)({\n+    display: 'flex',\n+    alignItems: 'center',\n+    gap: '8px'\n+})\n+\n+const TodoFilter: FC<Props> = ({ todos, setFilteredTodos }) => {\n+    const { t } = useTranslation('to-do')\n+\n+    const [statusChecked, setStatusChecked] = useState({\n+        active: true,\n+        completed: false,\n+        archived: false\n+    })\n+\n+    const [deadlineChecked, setDeadlineChecked] = useState({\n+        overdue: false,\n+        noDeadline: false\n+    })\n+\n+    // Handlers\n+    const handleStatusToggle = (item: keyof typeof statusChecked) => () => {\n+        setStatusChecked((prev) => ({\n+            ...prev,\n+            [item]: !prev[item]\n+        }))\n+    }\n+\n+    const handleDeadlineToggle = (item: keyof typeof deadlineChecked) => () => {\n+        setDeadlineChecked((prev) => ({\n+            ...prev,\n+            [item]: !prev[item]\n+        }))\n+    }\n+\n+    const filteredTodos = useMemo(() => {\n+        return todos\n+            .map((todoOverview) => {\n+                const filteredDetails = todoOverview.todoOverviewDetails.filter(\n+                    (todo) => {\n+                        const matchesActive =",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/41#discussion_r1714952233",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/todo-overview/todo-filter/search/SearchBar.tsx",
//         "line": null,
//         "comment": "100 is probably a bit too low. Many people write slow. Try 3-400",
//         "commitId": "f0e071f9f48040b5f319d49b37020d4bd601dd78",
//         "codeSnippet": "@@ -0,0 +1,92 @@\n+import { useCallback, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import debounce from 'lodash/debounce'\n+\n+import { TodoOverviewData } from '@/services/to-do'\n+import SearchRoundedIcon from '@mui/icons-material/SearchRounded'\n+import { Box, TextField } from '@mui/material'\n+\n+type Props = {\n+    dataForSearch: TodoOverviewData[]\n+    setFilteredTodos: (filteredTodos: TodoOverviewData[]) => void\n+}\n+\n+const textFieldStyles = {\n+    '& .MuiOutlinedInput-root': {\n+        '& fieldset': {\n+            borderColor: '#0081a3'\n+        },\n+        '&:hover fieldset': {\n+            borderColor: '#0081a3'\n+        },\n+        '& .MuiInputBase-input::placeholder': {\n+            color: '#0081a3',\n+            fontFamily: 'Open Sans',\n+            fontSize: '14px',\n+            fontStyle: 'normal',\n+            fontWeight: 600,\n+            lineHeight: '22px',\n+            letterSpacing: '0.46px',\n+            opacity: 1\n+        }\n+    }\n+}\n+\n+const SearchBar: React.FC<Props> = ({ dataForSearch, setFilteredTodos }) => {\n+    const { t } = useTranslation('to-do')\n+    const [searchedText, setSearchedText] = useState('')\n+\n+    useEffect(() => {\n+        debouncedSearch(searchedText)\n+    }, [dataForSearch])\n+\n+    const debouncedSearch = useCallback(\n+        debounce((text: string) => {\n+            const lowercasedText = text.toLowerCase()\n+            const filteredTodos = dataForSearch\n+                .map((todo) => ({\n+                    ...todo,\n+                    expanded: true,\n+                    todoOverviewDetails: todo.todoOverviewDetails.filter(\n+                        (todoDetail) =>\n+                            todoDetail.title\n+                                .toLowerCase()\n+                                .includes(lowercasedText)\n+                    )\n+                }))\n+                .filter((todo) => todo.todoOverviewDetails.length > 0)\n+\n+            setFilteredTodos(filteredTodos)\n+        }, 100),",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/41#discussion_r1714957133",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/todo-overview/todo-filter/search/SearchBar.tsx",
//         "line": 78,
//         "comment": "24%? :P ",
//         "commitId": "f0e071f9f48040b5f319d49b37020d4bd601dd78",
//         "codeSnippet": "@@ -0,0 +1,92 @@\n+import { useCallback, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import debounce from 'lodash/debounce'\n+\n+import { TodoOverviewData } from '@/services/to-do'\n+import SearchRoundedIcon from '@mui/icons-material/SearchRounded'\n+import { Box, TextField } from '@mui/material'\n+\n+type Props = {\n+    dataForSearch: TodoOverviewData[]\n+    setFilteredTodos: (filteredTodos: TodoOverviewData[]) => void\n+}\n+\n+const textFieldStyles = {\n+    '& .MuiOutlinedInput-root': {\n+        '& fieldset': {\n+            borderColor: '#0081a3'\n+        },\n+        '&:hover fieldset': {\n+            borderColor: '#0081a3'\n+        },\n+        '& .MuiInputBase-input::placeholder': {\n+            color: '#0081a3',\n+            fontFamily: 'Open Sans',\n+            fontSize: '14px',\n+            fontStyle: 'normal',\n+            fontWeight: 600,\n+            lineHeight: '22px',\n+            letterSpacing: '0.46px',\n+            opacity: 1\n+        }\n+    }\n+}\n+\n+const SearchBar: React.FC<Props> = ({ dataForSearch, setFilteredTodos }) => {\n+    const { t } = useTranslation('to-do')\n+    const [searchedText, setSearchedText] = useState('')\n+\n+    useEffect(() => {\n+        debouncedSearch(searchedText)\n+    }, [dataForSearch])\n+\n+    const debouncedSearch = useCallback(\n+        debounce((text: string) => {\n+            const lowercasedText = text.toLowerCase()\n+            const filteredTodos = dataForSearch\n+                .map((todo) => ({\n+                    ...todo,\n+                    expanded: true,\n+                    todoOverviewDetails: todo.todoOverviewDetails.filter(\n+                        (todoDetail) =>\n+                            todoDetail.title\n+                                .toLowerCase()\n+                                .includes(lowercasedText)\n+                    )\n+                }))\n+                .filter((todo) => todo.todoOverviewDetails.length > 0)\n+\n+            setFilteredTodos(filteredTodos)\n+        }, 100),\n+        [dataForSearch]\n+    )\n+\n+    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+        const text = e.target.value\n+        debouncedSearch(text)\n+        setSearchedText(text)\n+    }\n+\n+    return (\n+        <Box sx={{ width: '24%' }}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/41#discussion_r1714957524",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/services/to-do/types.ts",
//         "line": null,
//         "comment": "type? ",
//         "commitId": "f0e071f9f48040b5f319d49b37020d4bd601dd78",
//         "codeSnippet": "@@ -1,27 +1,37 @@\n-import { DateString, Nullable, UUID } from '../../types/general'\n-\n-export type OneToOneDetail = {\n-    id: Nullable<UUID>\n-    finishDate: Nullable<DateString>\n+interface OneToOneDetail {\n+    id: string\n+    finishDate: string\n }\n \n-export type TodoOverviewDetail = {\n-    id: UUID\n+export interface TodoOverviewDetail {\n+    id: string\n     title: string\n-    participants: UUID[]\n-    deadline: Nullable<DateString>\n-    doneOn: Nullable<DateString>\n+    archivedDate: string\n+    doneOn: string\n+    deadline: string\n+    overdue: boolean\n+    done: boolean\n     oneToOneDetail: OneToOneDetail\n+    participants: string[]\n+    otherParticipantName: string\n     archived: boolean\n-    archivedDate: Nullable<DateString>\n-    done: boolean\n+    visible: boolean\n }\n \n-export type TodoOverview = {\n+export interface TodoOverviewData {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/41#discussion_r1714959071",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/one-to-one-accordion/OneToOneAccordionDetails.tsx",
//         "line": 45,
//         "comment": "You can also do the fancy Boolean(anchorEl) feels prettier :p ",
//         "commitId": "688bfd2238a81ac22e13ed73bc8c5cd11d34f6cd",
//         "codeSnippet": "@@ -26,42 +27,45 @@ const OneToOneAccordionDetails: FC<Props> = ({ oneToOneDetail, onDelete }) => {\n     }\n \n     return (\n-        <AccordionDetails>\n-            <Button\n-                variant='contained'\n-                disabled={!oneToOneDetail.linkActive}\n-                onClick={openOneToOne}\n-            >\n-                {t('open')}\n-            </Button>\n-            <IconButton onClick={handleClick}>\n-                <StyledMoreVertIcon />\n-            </IconButton>\n-            <Popover\n-                id='simple-popover'\n-                open={anchorEl !== null}\n-                anchorEl={anchorEl}\n-                onClose={handleClose}\n-                anchorOrigin={{\n-                    vertical: 'center',\n-                    horizontal: 'center'\n-                }}\n-                transformOrigin={{\n-                    vertical: 'top',\n-                    horizontal: 'left'\n-                }}\n-            >\n-                <Button>\n-                    <Button\n-                        size='small'\n-                        disabled={!oneToOneDetail.deletable}\n-                        startIcon={<DeleteIcon />}\n-                        onClick={() => onDelete(oneToOneDetail.oneToOneId)}\n-                    >\n-                        {t('delete')}\n-                    </Button>\n+        <AccordionDetails sx={{ height: '54px' }}>\n+            <FlexBox gap={1}>\n+                <Button\n+                    variant='contained'\n+                    disabled={!oneToOneDetail.linkActive}\n+                    onClick={openOneToOne}\n+                    sx={{ height: '30px', width: '56px' }}\n+                >\n+                    {t('open')}\n                 </Button>\n-            </Popover>\n+                <MoreVertIconButtonWrapper onClick={handleClick}>\n+                    <StyledMoreVertIcon />\n+                </MoreVertIconButtonWrapper>\n+                <Popover\n+                    id='simple-popover'\n+                    open={anchorEl !== null}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/75#discussion_r1716367406",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Providers/GlobalProvider/GlobalProvider.tsx",
//         "line": null,
//         "comment": "Don't merge things for \"test purpose\" to master ",
//         "commitId": "688bfd2238a81ac22e13ed73bc8c5cd11d34f6cd",
//         "codeSnippet": "@@ -11,27 +11,44 @@ export type GlobalContext = {\n     languageId: number\n     loading: boolean\n     textParser: (text: string) => string\n+    userDateFormat: string\n+}\n+\n+type WindowWithState = Window & {\n+    __state: {\n+        getSnapshot: () => {\n+            user: {\n+                dateFormatString: string\n+            }\n+        }\n+    }\n }\n \n export const GlobalContext = createContext<GlobalContext>({\n     languages: [],\n     languageId: -1,\n     loading: false,\n-    textParser: (text: string) => text\n+    textParser: (text: string) => text,\n+    userDateFormat: ''\n })\n \n const GlobalProvider: FCC = ({ children }) => {\n     const [loading, setLoading] = useState<boolean>(true)\n     const [languageId, setLanguageId] = useState<number>(-1)\n     const [languages, setLanguages] = useState<Language[]>([])\n-\n+    const [userDateFormat, setUserDateFormat] = useState<string>('')\n+    const userDateFormatTemp = window as unknown as WindowWithState\n     useEffect(() => {\n         Promise.all([getLanguages(), handleLanguageById()])\n             .then(([languages, languageId]) => {\n                 setLanguages(languages)\n                 setLanguageId(languageId)\n             })\n             .finally(() => setLoading(false))\n+        setUserDateFormat(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/75#discussion_r1716368129",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "not a good approach to directly mutate the state. can use callback function:\r\nsetActiveTab((prevState)=>{ ...prevState, { activeTemplate, activeInsight }})",
//         "commitId": "7ec9b5e363cfd03e88f820973fa25cf84ca7dce4",
//         "codeSnippet": "@@ -1,29 +1,54 @@\n-import React, { useEffect, useMemo, useState } from 'react'\n+import React, { useEffect, useState } from 'react'\n import { useTranslation } from 'react-i18next'\n-import { useNavigate } from 'react-router-dom'\n+import { useNavigate, useSearchParams } from 'react-router-dom'\n \n import { Layout } from '@catalystone/react-core-ui'\n \n-import { PermissionTab, getPermissions } from '../../services/permission'\n+import { OverviewTab, getPermissions } from '../../services/permission'\n import { createTemplate } from '../../services/template'\n import HrInsights from './hr-insights/HrInsights'\n import TemplateOverview from './template-overview/TemplateOverview'\n-\n-const hasPermission = (permissions: PermissionTab[], tab: PermissionTab) => {\n-    console.log(permissions, permissions.includes(tab))\n-    return permissions.includes(tab)\n-}\n+import { Tabs } from './types/tabs'\n \n const AdministrationLandingPage: React.FC = () => {\n     const { t } = useTranslation('template-overview')\n+    const [permissionsResolved, setPermissionsResolved] = useState(false)\n     const navigate = useNavigate()\n-    const [permissions, setPermissions] = useState<PermissionTab[]>([])\n+    const [selected, setSelected] = useState(Tabs.template)\n+    const [activeTab, setActiveTab] = useState({\n+        activeTemplate: false,\n+        activeInsight: false\n+    })\n+    const [tabs, setTabs] = useState<OverviewTab[]>([])\n+    const availableTabs = [\n+        { name: t('insights'), id: 0 },\n+        { name: t('templates'), id: 1 }\n+    ]\n+    const [searchParams] = useSearchParams()\n+\n+    const getTabView = () => {\n+        const tab = searchParams.get('initialtab')\n+        switch (tab) {\n+            case 'template':\n+                return Tabs.template\n+            case 'insight':\n+                return Tabs.insight\n+            default:\n+                return Tabs.invalid\n+        }\n+    }\n+\n+    const onClickTab = (tabIndex: number) => {\n+        setSelected(tabIndex)\n+        const activeTemplate = tabIndex === Tabs.template\n+        const activeInsight = tabIndex === Tabs.insight\n+        setActiveTab({ activeTemplate, activeInsight })",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/78#discussion_r1716650786",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "It would be better here if you made an enum holding the PermissionType. Impossible to guess later why you do these 'hacks' :) ",
//         "commitId": "7ec9b5e363cfd03e88f820973fa25cf84ca7dce4",
//         "codeSnippet": "@@ -39,34 +64,69 @@ const AdministrationLandingPage: React.FC = () => {\n \n     useEffect(() => {\n         // Todo: Redirect user to monolith root?\n-        getPermissions().then((permissions) => {\n-            // const templateOverviewTab = permissions.find(\n-            //     isEqual(PermissionTab.TemplateOverview)\n-            // )\n+        getPermissions().then((availablePermissions) => {\n+            // Get accessible Tabs\n+            const permissions = availablePermissions.map((p) => Number(p) - 1)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/78#discussion_r1716654295",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "Please use match as we do otherwise. match(tab).with('template', () => Tabs.template)....other(() => Tabs.invalid ..",
//         "commitId": "7ec9b5e363cfd03e88f820973fa25cf84ca7dce4",
//         "codeSnippet": "@@ -1,29 +1,54 @@\n-import React, { useEffect, useMemo, useState } from 'react'\n+import React, { useEffect, useState } from 'react'\n import { useTranslation } from 'react-i18next'\n-import { useNavigate } from 'react-router-dom'\n+import { useNavigate, useSearchParams } from 'react-router-dom'\n \n import { Layout } from '@catalystone/react-core-ui'\n \n-import { PermissionTab, getPermissions } from '../../services/permission'\n+import { OverviewTab, getPermissions } from '../../services/permission'\n import { createTemplate } from '../../services/template'\n import HrInsights from './hr-insights/HrInsights'\n import TemplateOverview from './template-overview/TemplateOverview'\n-\n-const hasPermission = (permissions: PermissionTab[], tab: PermissionTab) => {\n-    console.log(permissions, permissions.includes(tab))\n-    return permissions.includes(tab)\n-}\n+import { Tabs } from './types/tabs'\n \n const AdministrationLandingPage: React.FC = () => {\n     const { t } = useTranslation('template-overview')\n+    const [permissionsResolved, setPermissionsResolved] = useState(false)\n     const navigate = useNavigate()\n-    const [permissions, setPermissions] = useState<PermissionTab[]>([])\n+    const [selected, setSelected] = useState(Tabs.template)\n+    const [activeTab, setActiveTab] = useState({\n+        activeTemplate: false,\n+        activeInsight: false\n+    })\n+    const [tabs, setTabs] = useState<OverviewTab[]>([])\n+    const availableTabs = [\n+        { name: t('insights'), id: 0 },\n+        { name: t('templates'), id: 1 }\n+    ]\n+    const [searchParams] = useSearchParams()\n+\n+    const getTabView = () => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/78#discussion_r1716655547",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "Better if you do like if (!permissionsResolved) return null and keep this as is. Fits more rest of project. Components should not be undefined anyways. Null is accepted as component. Actually strange you didn't get error on this.",
//         "commitId": "7ec9b5e363cfd03e88f820973fa25cf84ca7dce4",
//         "codeSnippet": "@@ -39,34 +64,69 @@ const AdministrationLandingPage: React.FC = () => {\n \n     useEffect(() => {\n         // Todo: Redirect user to monolith root?\n-        getPermissions().then((permissions) => {\n-            // const templateOverviewTab = permissions.find(\n-            //     isEqual(PermissionTab.TemplateOverview)\n-            // )\n+        getPermissions().then((availablePermissions) => {\n+            // Get accessible Tabs\n+            const permissions = availablePermissions.map((p) => Number(p) - 1)\n+            const accessibleTabs = availableTabs.filter((t) =>\n+                permissions.includes(t.id)\n+            )\n+            setTabs(accessibleTabs)\n+\n+            // Set selected tab\n+            const tabView = getTabView()\n+            setSelected(\n+                isValidTab(tabView) && permissions.length === 2 ? tabView : 0\n+            )\n+\n+            // Set active tab\n+            // If tab in the URL is valid, set the active tab based on the tab view and permission\n+            if (isValidTab(tabView)) {\n+                const activeTemplate =\n+                    tabView === Tabs.template &&\n+                    permissions.includes(Tabs.template)\n+                const activeInsight =\n+                    tabView === Tabs.insight &&\n+                    permissions.includes(Tabs.insight)\n+                setActiveTab({ activeTemplate, activeInsight })\n+            } else {\n+                // If tab is invalid, set the active tab based on the permissions\n+                // If Template is available then set Template Tab active otherwise set Insight Tab active\n+                const activeTemplate = permissions.includes(Tabs.template)\n+                const activeInsight =\n+                    !permissions.includes(Tabs.template) &&\n+                    permissions.includes(Tabs.insight)\n+                setActiveTab({ activeTemplate, activeInsight })\n \n-            // const selected =\n-            //     templateOverviewTab ||\n-            //     permissions.find(isEqual(PermissionTab.Metrics))\n+                // Set selected tab based on the active tab\n+                setSelected(\n+                    permissions.length === 2 && activeTemplate\n+                        ? Tabs.template\n+                        : 0\n+                )\n+            }\n \n-            // setSelected(Number(selected || -1))\n-            setPermissions(permissions)\n+            setPermissionsResolved(true)\n         })\n     }, [])\n \n     return (\n-        <Layout\n-            title={t('title')}\n-            actions={selected === 0 ? [createNewTemplateButton] : []}\n-            layoutProps={{\n-                type: 'tabs',\n-                activeTab: selected,\n-                onClickTab: setSelected,\n-                tabs\n-            }}\n-        >\n-            {selected === 0 && <TemplateOverview />}\n-            {selected === 1 && <HrInsights />}\n-        </Layout>\n+        permissionsResolved && (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/78#discussion_r1716658398",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "I don't like the name activeTab this. Maybe availableTabs? Or enabledTabs?",
//         "commitId": "7ec9b5e363cfd03e88f820973fa25cf84ca7dce4",
//         "codeSnippet": "@@ -39,34 +64,69 @@ const AdministrationLandingPage: React.FC = () => {\n \n     useEffect(() => {\n         // Todo: Redirect user to monolith root?\n-        getPermissions().then((permissions) => {\n-            // const templateOverviewTab = permissions.find(\n-            //     isEqual(PermissionTab.TemplateOverview)\n-            // )\n+        getPermissions().then((availablePermissions) => {\n+            // Get accessible Tabs\n+            const permissions = availablePermissions.map((p) => Number(p) - 1)\n+            const accessibleTabs = availableTabs.filter((t) =>\n+                permissions.includes(t.id)\n+            )\n+            setTabs(accessibleTabs)\n+\n+            // Set selected tab\n+            const tabView = getTabView()\n+            setSelected(\n+                isValidTab(tabView) && permissions.length === 2 ? tabView : 0\n+            )\n+\n+            // Set active tab\n+            // If tab in the URL is valid, set the active tab based on the tab view and permission\n+            if (isValidTab(tabView)) {\n+                const activeTemplate =\n+                    tabView === Tabs.template &&\n+                    permissions.includes(Tabs.template)\n+                const activeInsight =\n+                    tabView === Tabs.insight &&\n+                    permissions.includes(Tabs.insight)\n+                setActiveTab({ activeTemplate, activeInsight })\n+            } else {\n+                // If tab is invalid, set the active tab based on the permissions\n+                // If Template is available then set Template Tab active otherwise set Insight Tab active\n+                const activeTemplate = permissions.includes(Tabs.template)\n+                const activeInsight =\n+                    !permissions.includes(Tabs.template) &&\n+                    permissions.includes(Tabs.insight)\n+                setActiveTab({ activeTemplate, activeInsight })\n \n-            // const selected =\n-            //     templateOverviewTab ||\n-            //     permissions.find(isEqual(PermissionTab.Metrics))\n+                // Set selected tab based on the active tab\n+                setSelected(\n+                    permissions.length === 2 && activeTemplate\n+                        ? Tabs.template\n+                        : 0\n+                )\n+            }\n \n-            // setSelected(Number(selected || -1))\n-            setPermissions(permissions)\n+            setPermissionsResolved(true)\n         })\n     }, [])\n \n     return (\n-        <Layout\n-            title={t('title')}\n-            actions={selected === 0 ? [createNewTemplateButton] : []}\n-            layoutProps={{\n-                type: 'tabs',\n-                activeTab: selected,\n-                onClickTab: setSelected,\n-                tabs\n-            }}\n-        >\n-            {selected === 0 && <TemplateOverview />}\n-            {selected === 1 && <HrInsights />}\n-        </Layout>\n+        permissionsResolved && (\n+            <Layout\n+                title={t('title')}\n+                actions={\n+                    selected === Tabs.template ? [createNewTemplateButton] : []\n+                }\n+                layoutProps={{\n+                    type: 'tabs',\n+                    activeTab: selected,\n+                    onClickTab,\n+                    tabs\n+                }}\n+            >\n+                {activeTab.activeTemplate && <TemplateOverview />}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/78#discussion_r1716659154",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "activeTab kind of refers to this ---> ",
//         "commitId": "7ec9b5e363cfd03e88f820973fa25cf84ca7dce4",
//         "codeSnippet": "@@ -39,34 +64,69 @@ const AdministrationLandingPage: React.FC = () => {\n \n     useEffect(() => {\n         // Todo: Redirect user to monolith root?\n-        getPermissions().then((permissions) => {\n-            // const templateOverviewTab = permissions.find(\n-            //     isEqual(PermissionTab.TemplateOverview)\n-            // )\n+        getPermissions().then((availablePermissions) => {\n+            // Get accessible Tabs\n+            const permissions = availablePermissions.map((p) => Number(p) - 1)\n+            const accessibleTabs = availableTabs.filter((t) =>\n+                permissions.includes(t.id)\n+            )\n+            setTabs(accessibleTabs)\n+\n+            // Set selected tab\n+            const tabView = getTabView()\n+            setSelected(\n+                isValidTab(tabView) && permissions.length === 2 ? tabView : 0\n+            )\n+\n+            // Set active tab\n+            // If tab in the URL is valid, set the active tab based on the tab view and permission\n+            if (isValidTab(tabView)) {\n+                const activeTemplate =\n+                    tabView === Tabs.template &&\n+                    permissions.includes(Tabs.template)\n+                const activeInsight =\n+                    tabView === Tabs.insight &&\n+                    permissions.includes(Tabs.insight)\n+                setActiveTab({ activeTemplate, activeInsight })\n+            } else {\n+                // If tab is invalid, set the active tab based on the permissions\n+                // If Template is available then set Template Tab active otherwise set Insight Tab active\n+                const activeTemplate = permissions.includes(Tabs.template)\n+                const activeInsight =\n+                    !permissions.includes(Tabs.template) &&\n+                    permissions.includes(Tabs.insight)\n+                setActiveTab({ activeTemplate, activeInsight })\n \n-            // const selected =\n-            //     templateOverviewTab ||\n-            //     permissions.find(isEqual(PermissionTab.Metrics))\n+                // Set selected tab based on the active tab\n+                setSelected(\n+                    permissions.length === 2 && activeTemplate\n+                        ? Tabs.template\n+                        : 0\n+                )\n+            }\n \n-            // setSelected(Number(selected || -1))\n-            setPermissions(permissions)\n+            setPermissionsResolved(true)\n         })\n     }, [])\n \n     return (\n-        <Layout\n-            title={t('title')}\n-            actions={selected === 0 ? [createNewTemplateButton] : []}\n-            layoutProps={{\n-                type: 'tabs',\n-                activeTab: selected,\n-                onClickTab: setSelected,\n-                tabs\n-            }}\n-        >\n-            {selected === 0 && <TemplateOverview />}\n-            {selected === 1 && <HrInsights />}\n-        </Layout>\n+        permissionsResolved && (\n+            <Layout\n+                title={t('title')}\n+                actions={\n+                    selected === Tabs.template ? [createNewTemplateButton] : []\n+                }\n+                layoutProps={{\n+                    type: 'tabs',\n+                    activeTab: selected,",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/78#discussion_r1716659441",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/HrInsights.tsx",
//         "line": 14,
//         "comment": "Dont create a file types inside types folder :D ",
//         "commitId": "7ec9b5e363cfd03e88f820973fa25cf84ca7dce4",
//         "codeSnippet": "@@ -11,7 +11,7 @@ import logEvent from '../../../services/userAnalyticsServcie/userAnalyticsServic\n import InsightsGraph from './insights-graph/InsightsGraph'\n import InsightsHeader from './insights-header/InsightsHeader'\n import Overlay from './overlay/Overlay'\n-import { Period } from './types'\n+import { Period } from './types/types'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/78#discussion_r1716661165",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/types/types.ts",
//         "line": null,
//         "comment": "Please rename the file :D ",
//         "commitId": "7ec9b5e363cfd03e88f820973fa25cf84ca7dce4",
//         "codeSnippet": "@@ -2,3 +2,8 @@ export enum PermissionTab {\n     Metrics = '1',\n     TemplateOverview = '2'\n }\n+\n+export type OverviewTab = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/78#discussion_r1716661579",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/services/permission/index.ts",
//         "line": null,
//         "comment": "Remember you use '@/features..",
//         "commitId": "7ec9b5e363cfd03e88f820973fa25cf84ca7dce4",
//         "codeSnippet": "@@ -1,2 +1,2 @@\n export * from './service'\n-export * from './types'\n+export * from '../../features/administration-landing-page/types/types'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/78#discussion_r1716661902",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/hr-insights/HrInsights.tsx",
//         "line": 14,
//         "comment": "Also stay to importing from './types'. Should be exported from that index ",
//         "commitId": "7ec9b5e363cfd03e88f820973fa25cf84ca7dce4",
//         "codeSnippet": "@@ -11,7 +11,7 @@ import logEvent from '../../../services/userAnalyticsServcie/userAnalyticsServic\n import InsightsGraph from './insights-graph/InsightsGraph'\n import InsightsHeader from './insights-header/InsightsHeader'\n import Overlay from './overlay/Overlay'\n-import { Period } from './types'\n+import { Period } from './types/types'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/78#discussion_r1716662467",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "In cases like this where you are performing a lot of stuff it is benefitial to split it to multiple effects. Here you have one effect that is fetching permissions and setting them. You can create another useEffect that refreshes when permissions change where you put the rest of this logic :)",
//         "commitId": "7ec9b5e363cfd03e88f820973fa25cf84ca7dce4",
//         "codeSnippet": "@@ -39,34 +64,69 @@ const AdministrationLandingPage: React.FC = () => {\n \n     useEffect(() => {\n         // Todo: Redirect user to monolith root?\n-        getPermissions().then((permissions) => {\n-            // const templateOverviewTab = permissions.find(\n-            //     isEqual(PermissionTab.TemplateOverview)\n-            // )\n+        getPermissions().then((availablePermissions) => {\n+            // Get accessible Tabs\n+            const permissions = availablePermissions.map((p) => Number(p) - 1)\n+            const accessibleTabs = availableTabs.filter((t) =>\n+                permissions.includes(t.id)\n+            )\n+            setTabs(accessibleTabs)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/78#discussion_r1716664649",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "Generally writing functions pure is better. Create a utils file that takes the tab as parameter. React components grow very fast if practices are not followed :) ",
//         "commitId": "7ec9b5e363cfd03e88f820973fa25cf84ca7dce4",
//         "codeSnippet": "@@ -39,34 +64,69 @@ const AdministrationLandingPage: React.FC = () => {\n \n     useEffect(() => {\n         // Todo: Redirect user to monolith root?\n-        getPermissions().then((permissions) => {\n-            // const templateOverviewTab = permissions.find(\n-            //     isEqual(PermissionTab.TemplateOverview)\n-            // )\n+        getPermissions().then((availablePermissions) => {\n+            // Get accessible Tabs\n+            const permissions = availablePermissions.map((p) => Number(p) - 1)\n+            const accessibleTabs = availableTabs.filter((t) =>\n+                permissions.includes(t.id)\n+            )\n+            setTabs(accessibleTabs)\n+\n+            // Set selected tab\n+            const tabView = getTabView()",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/78#discussion_r1716666613",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "This can also be moved outside",
//         "commitId": "7ec9b5e363cfd03e88f820973fa25cf84ca7dce4",
//         "codeSnippet": "@@ -1,29 +1,54 @@\n-import React, { useEffect, useMemo, useState } from 'react'\n+import React, { useEffect, useState } from 'react'\n import { useTranslation } from 'react-i18next'\n-import { useNavigate } from 'react-router-dom'\n+import { useNavigate, useSearchParams } from 'react-router-dom'\n \n import { Layout } from '@catalystone/react-core-ui'\n \n-import { PermissionTab, getPermissions } from '../../services/permission'\n+import { OverviewTab, getPermissions } from '../../services/permission'\n import { createTemplate } from '../../services/template'\n import HrInsights from './hr-insights/HrInsights'\n import TemplateOverview from './template-overview/TemplateOverview'\n-\n-const hasPermission = (permissions: PermissionTab[], tab: PermissionTab) => {\n-    console.log(permissions, permissions.includes(tab))\n-    return permissions.includes(tab)\n-}\n+import { Tabs } from './types/tabs'\n \n const AdministrationLandingPage: React.FC = () => {\n     const { t } = useTranslation('template-overview')\n+    const [permissionsResolved, setPermissionsResolved] = useState(false)\n     const navigate = useNavigate()\n-    const [permissions, setPermissions] = useState<PermissionTab[]>([])\n+    const [selected, setSelected] = useState(Tabs.template)\n+    const [activeTab, setActiveTab] = useState({\n+        activeTemplate: false,\n+        activeInsight: false\n+    })\n+    const [tabs, setTabs] = useState<OverviewTab[]>([])\n+    const availableTabs = [\n+        { name: t('insights'), id: 0 },\n+        { name: t('templates'), id: 1 }\n+    ]\n+    const [searchParams] = useSearchParams()\n+\n+    const getTabView = () => {\n+        const tab = searchParams.get('initialtab')\n+        switch (tab) {\n+            case 'template':\n+                return Tabs.template\n+            case 'insight':\n+                return Tabs.insight\n+            default:\n+                return Tabs.invalid\n+        }\n+    }\n+\n+    const onClickTab = (tabIndex: number) => {\n+        setSelected(tabIndex)\n+        const activeTemplate = tabIndex === Tabs.template\n+        const activeInsight = tabIndex === Tabs.insight\n+        setActiveTab({ activeTemplate, activeInsight })\n+    }\n+\n+    const isValidTab = (tabView: number) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/78#discussion_r1716667000",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Provider/TemplateProvider.tsx",
//         "line": null,
//         "comment": "title can be hardcoded.",
//         "commitId": "db8b157f8c8351e55e8a9e8d47ef5936008b410a",
//         "codeSnippet": "@@ -111,11 +112,9 @@ const TemplateProvider: FCC = ({ children }) => {\n         >\n             {children}\n \n-            <AlertDialog\n-                header={t('old-version-header')}\n-                message={t('old-version-message')}\n+            <OutdatedDialog\n                 dialogState={oldVersionState}\n-                actionBtnTxt={t('go-back')}\n+                title={t('old-version-header')}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/79#discussion_r1722674103",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Provider/TemplateProvider.tsx",
//         "line": null,
//         "comment": "state also.",
//         "commitId": "db8b157f8c8351e55e8a9e8d47ef5936008b410a",
//         "codeSnippet": "@@ -111,11 +112,9 @@ const TemplateProvider: FCC = ({ children }) => {\n         >\n             {children}\n \n-            <AlertDialog\n-                header={t('old-version-header')}\n-                message={t('old-version-message')}\n+            <OutdatedDialog\n                 dialogState={oldVersionState}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/79#discussion_r1722674707",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Provider/TemplateProvider.tsx",
//         "line": null,
//         "comment": "made the change",
//         "commitId": "db8b157f8c8351e55e8a9e8d47ef5936008b410a",
//         "codeSnippet": "@@ -111,11 +112,9 @@ const TemplateProvider: FCC = ({ children }) => {\n         >\n             {children}\n \n-            <AlertDialog\n-                header={t('old-version-header')}\n-                message={t('old-version-message')}\n+            <OutdatedDialog\n                 dialogState={oldVersionState}\n-                actionBtnTxt={t('go-back')}\n+                title={t('old-version-header')}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/79#discussion_r1722688213",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Provider/TemplateProvider.tsx",
//         "line": null,
//         "comment": "state is required",
//         "commitId": "db8b157f8c8351e55e8a9e8d47ef5936008b410a",
//         "codeSnippet": "@@ -111,11 +112,9 @@ const TemplateProvider: FCC = ({ children }) => {\n         >\n             {children}\n \n-            <AlertDialog\n-                header={t('old-version-header')}\n-                message={t('old-version-message')}\n+            <OutdatedDialog\n                 dialogState={oldVersionState}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/79#discussion_r1722688387",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "Just remove the function? :P ",
//         "commitId": "dca3a89b520b4769d9f9f3b89d982f16fd9ad703",
//         "codeSnippet": "@@ -186,6 +173,38 @@ const EmployeeDetails: FC = () => {\n             })\n     }\n \n+    useEffect(() => {\n+        const setCompletedAndPendingOneToOnesCount = () => {\n+            const completedOneToOnes =\n+                employeeOneToOnes.employeeOneToOneDetails.filter(\n+                    (oneToOneDetail) =>\n+                        oneToOneDetail.status === STATUS_COMPLETE\n+                )\n+            const pendingOneToOnes =\n+                employeeOneToOnes.employeeOneToOneDetails.filter(\n+                    (oneToOneDetail) =>\n+                        oneToOneDetail.status === STATUS_READY ||\n+                        oneToOneDetail.status === STATUS_STARTED ||\n+                        oneToOneDetail.status === STATUS_PENDING ||\n+                        oneToOneDetail.status === STATUS_READY_PREPARED\n+                )\n+\n+            setCompletedOneToOnesCount(completedOneToOnes.length)\n+            setPendingOneToOnesCount(pendingOneToOnes.length)\n+        }\n+        setCompletedAndPendingOneToOnesCount()",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/83#discussion_r1724520383",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/empty-state/styled.ts",
//         "line": null,
//         "comment": "Why are you changing fonts here? ",
//         "commitId": "dca3a89b520b4769d9f9f3b89d982f16fd9ad703",
//         "codeSnippet": "@@ -0,0 +1,27 @@\n+import { Box, styled, Typography } from '@mui/material'\n+\n+export const AlignCenter = styled(Box)({\n+    display: 'flex',\n+    flexDirection: 'column',\n+    alignItems: 'center',\n+    justifyContent: 'center',\n+    height: '55vh'\n+})\n+\n+export const Message1 = styled(Typography)({\n+    letterSpacing: '0.5px',\n+    fontWeight: 600,\n+    fontSize: '24px',\n+    fontFamily: 'Open sans',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/83#discussion_r1724529315",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "dca3a89b520b4769d9f9f3b89d982f16fd9ad703",
//         "codeSnippet": "@@ -186,6 +173,38 @@ const EmployeeDetails: FC = () => {\n             })\n     }\n \n+    useEffect(() => {\n+        const setCompletedAndPendingOneToOnesCount = () => {\n+            const completedOneToOnes =\n+                employeeOneToOnes.employeeOneToOneDetails.filter(\n+                    (oneToOneDetail) =>\n+                        oneToOneDetail.status === STATUS_COMPLETE\n+                )\n+            const pendingOneToOnes =\n+                employeeOneToOnes.employeeOneToOneDetails.filter(\n+                    (oneToOneDetail) =>\n+                        oneToOneDetail.status === STATUS_READY ||\n+                        oneToOneDetail.status === STATUS_STARTED ||\n+                        oneToOneDetail.status === STATUS_PENDING ||\n+                        oneToOneDetail.status === STATUS_READY_PREPARED\n+                )\n+\n+            setCompletedOneToOnesCount(completedOneToOnes.length)\n+            setPendingOneToOnesCount(pendingOneToOnes.length)\n+        }\n+        setCompletedAndPendingOneToOnesCount()",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/83#discussion_r1724597801",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/empty-state/styled.ts",
//         "line": null,
//         "comment": "Sorry, My mistake :P",
//         "commitId": "dca3a89b520b4769d9f9f3b89d982f16fd9ad703",
//         "codeSnippet": "@@ -0,0 +1,27 @@\n+import { Box, styled, Typography } from '@mui/material'\n+\n+export const AlignCenter = styled(Box)({\n+    display: 'flex',\n+    flexDirection: 'column',\n+    alignItems: 'center',\n+    justifyContent: 'center',\n+    height: '55vh'\n+})\n+\n+export const Message1 = styled(Typography)({\n+    letterSpacing: '0.5px',\n+    fontWeight: 600,\n+    fontSize: '24px',\n+    fontFamily: 'Open sans',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/83#discussion_r1724601076",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/TemplateDetails.tsx",
//         "line": 1,
//         "comment": "line : 121 , 156 may require changes also. :)",
//         "commitId": "7f10bdf9889b9b405b81ae99079c956583c18ad6",
//         "codeSnippet": "",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/90#discussion_r1728622833",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "sonar-project.properties",
//         "line": 1,
//         "comment": "Empty file?",
//         "commitId": "cd7d019c4000314a5d254714178f55a264da39d9",
//         "codeSnippet": "",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/93#discussion_r1732704817",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/GeneralSection/GeneralSection.tsx",
//         "line": null,
//         "comment": "why this code is commented?",
//         "commitId": "a78c49160a0e9cfb2412f5663123d1249d38886d",
//         "codeSnippet": "@@ -51,43 +52,90 @@ const GeneralSection: FC<Props> = ({ section, state }) => {\n             .finally(() => setLoading(false))\n     }\n \n-    const handleTypeUpdate = (qs: QuestionSetting) => {\n-        return (\n-            key: keyof QuestionSetting,\n-            value: QuestionSetting[typeof key]\n-        ): Promise<void> => {\n+    /**\n+     * This is a special function to support re-inserting options if\n+     * a user changes the type of a question setting.\n+     * The timeout is necessary because the API for unknown reason\n+     * throws a 404 from time to time if the requests are too fast.\n+     */\n+    const handleChangeType = (qs: QuestionSetting) => {\n+        return (type: SettingType): Promise<void> => {\n+            handleUpdateQS(section, {\n+                ...qs,\n+                type\n+            })\n+\n             return updateTopic(\n                 state.template.id,\n                 section.id,\n                 qs.id,\n-                key,\n-                value\n+                'type',\n+                type\n             ).then(() => {\n-                if (!(key === 'type' && value === SettingType.MultipleChoice)) {\n-                    return\n-                }\n+                if (type === SettingType.Comment) return\n \n                 Promise.all(\n-                    qs.options.map((option) => {\n-                        return createSubTopic(\n-                            state.template.id,\n-                            section.id,\n-                            qs.id\n-                        ).then((id) =>\n-                            updateSubTopic(\n-                                state.template.id,\n-                                section.id,\n-                                qs.id,\n-                                id,\n-                                option.value\n-                            ).then(() => ({\n-                                ...option,\n-                                id\n-                            }))\n-                        )\n+                    qs.options.map((option, id): Promise<Option> => {\n+                        return new Promise((resolve) => {\n+                            setTimeout(() => {\n+                                createSubTopic(\n+                                    state.template.id,\n+                                    section.id,\n+                                    qs.id\n+                                ).then((id) =>\n+                                    updateSubTopic(\n+                                        state.template.id,\n+                                        section.id,\n+                                        qs.id,\n+                                        id,\n+                                        option.value\n+                                    ).then(() =>\n+                                        resolve({\n+                                            ...option,\n+                                            id\n+                                        })\n+                                    )\n+                                )\n+                            }, id * 50)\n+                        })\n+                    })\n+                ).then((options) => {\n+                    handleUpdateQS(section, {\n+                        ...qs,\n+                        type: SettingType.MultipleChoice,\n+                        options\n                     })\n-                )\n+                })\n             })\n+\n+            //     Promise.all(\n+            //         qs.options.map((option) => {\n+            //             return createSubTopic(\n+            //                 state.template.id,\n+            //                 section.id,\n+            //                 qs.id\n+            //             ).then((id) =>\n+            //                 updateSubTopic(\n+            //                     state.template.id,\n+            //                     section.id,\n+            //                     qs.id,\n+            //                     id,\n+            //                     option.value\n+            //                 ).then(() => ({\n+            //                     ...option,\n+            //                     id\n+            //                 }))\n+            //             )\n+            //         })\n+            //     )\n+            // )\n+            // .then((options) => {\n+            //     handleUpdateQS(section, {\n+            //         ...qs,\n+            //         type: SettingType.MultipleChoice,",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/94#discussion_r1732718425",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Topic/Topic.tsx",
//         "line": null,
//         "comment": ":(",
//         "commitId": "a78c49160a0e9cfb2412f5663123d1249d38886d",
//         "codeSnippet": "@@ -78,6 +80,10 @@ const Topic: FC<Props> = ({\n         }, 500)\n     }\n \n+    if (settings.id === '5918b2c6-e138-4abd-8a21-49451ea8bddc') {\n+        console.log(settings.type, settings.options)\n+    }",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/94#discussion_r1732720036",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/GeneralSection/GeneralSection.tsx",
//         "line": null,
//         "comment": "Ops, removed it! ",
//         "commitId": "a78c49160a0e9cfb2412f5663123d1249d38886d",
//         "codeSnippet": "@@ -51,43 +52,90 @@ const GeneralSection: FC<Props> = ({ section, state }) => {\n             .finally(() => setLoading(false))\n     }\n \n-    const handleTypeUpdate = (qs: QuestionSetting) => {\n-        return (\n-            key: keyof QuestionSetting,\n-            value: QuestionSetting[typeof key]\n-        ): Promise<void> => {\n+    /**\n+     * This is a special function to support re-inserting options if\n+     * a user changes the type of a question setting.\n+     * The timeout is necessary because the API for unknown reason\n+     * throws a 404 from time to time if the requests are too fast.\n+     */\n+    const handleChangeType = (qs: QuestionSetting) => {\n+        return (type: SettingType): Promise<void> => {\n+            handleUpdateQS(section, {\n+                ...qs,\n+                type\n+            })\n+\n             return updateTopic(\n                 state.template.id,\n                 section.id,\n                 qs.id,\n-                key,\n-                value\n+                'type',\n+                type\n             ).then(() => {\n-                if (!(key === 'type' && value === SettingType.MultipleChoice)) {\n-                    return\n-                }\n+                if (type === SettingType.Comment) return\n \n                 Promise.all(\n-                    qs.options.map((option) => {\n-                        return createSubTopic(\n-                            state.template.id,\n-                            section.id,\n-                            qs.id\n-                        ).then((id) =>\n-                            updateSubTopic(\n-                                state.template.id,\n-                                section.id,\n-                                qs.id,\n-                                id,\n-                                option.value\n-                            ).then(() => ({\n-                                ...option,\n-                                id\n-                            }))\n-                        )\n+                    qs.options.map((option, id): Promise<Option> => {\n+                        return new Promise((resolve) => {\n+                            setTimeout(() => {\n+                                createSubTopic(\n+                                    state.template.id,\n+                                    section.id,\n+                                    qs.id\n+                                ).then((id) =>\n+                                    updateSubTopic(\n+                                        state.template.id,\n+                                        section.id,\n+                                        qs.id,\n+                                        id,\n+                                        option.value\n+                                    ).then(() =>\n+                                        resolve({\n+                                            ...option,\n+                                            id\n+                                        })\n+                                    )\n+                                )\n+                            }, id * 50)\n+                        })\n+                    })\n+                ).then((options) => {\n+                    handleUpdateQS(section, {\n+                        ...qs,\n+                        type: SettingType.MultipleChoice,\n+                        options\n                     })\n-                )\n+                })\n             })\n+\n+            //     Promise.all(\n+            //         qs.options.map((option) => {\n+            //             return createSubTopic(\n+            //                 state.template.id,\n+            //                 section.id,\n+            //                 qs.id\n+            //             ).then((id) =>\n+            //                 updateSubTopic(\n+            //                     state.template.id,\n+            //                     section.id,\n+            //                     qs.id,\n+            //                     id,\n+            //                     option.value\n+            //                 ).then(() => ({\n+            //                     ...option,\n+            //                     id\n+            //                 }))\n+            //             )\n+            //         })\n+            //     )\n+            // )\n+            // .then((options) => {\n+            //     handleUpdateQS(section, {\n+            //         ...qs,\n+            //         type: SettingType.MultipleChoice,",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/94#discussion_r1732727652",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Topic/Topic.tsx",
//         "line": null,
//         "comment": "Yeah, so lazy. Removed :P ",
//         "commitId": "a78c49160a0e9cfb2412f5663123d1249d38886d",
//         "codeSnippet": "@@ -78,6 +80,10 @@ const Topic: FC<Props> = ({\n         }, 500)\n     }\n \n+    if (settings.id === '5918b2c6-e138-4abd-8a21-49451ea8bddc') {\n+        console.log(settings.type, settings.options)\n+    }",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/94#discussion_r1732727836",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one/Provider/OneToOneProvider.tsx",
//         "line": 54,
//         "comment": "Don't call this ...Provider breadcrumbs is enough",
//         "commitId": "1b86549551afc9c5b34bb5a56fa641d567fa0dd7",
//         "codeSnippet": "@@ -41,6 +48,10 @@ type ContextProps = {\n     loading: boolean\n     todosFetched: boolean\n     userData: UserProfileField[]\n+    layoutTitle: string\n+    setLayoutTitle: Dispatch<SetStateAction<string>>\n+    breadcrumbsProvider: Crumb[]\n+    setBreadcrumbsProvider: Dispatch<SetStateAction<Crumb[]>>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/103#discussion_r1735706049",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one/Provider/OneToOneProvider.tsx",
//         "line": 83,
//         "comment": "t unused?",
//         "commitId": "1b86549551afc9c5b34bb5a56fa641d567fa0dd7",
//         "codeSnippet": "@@ -59,13 +70,17 @@ export const TemplateContext = createContext<ContextProps>({\n     templates: [],\n     tab: 0,\n     setTab: () => {},\n-    userData: []\n+    userData: [],\n+    layoutTitle: '',\n+    setLayoutTitle: () => {},\n+    breadcrumbsProvider: [],\n+    setBreadcrumbsProvider: () => {}\n })\n \n const OneToOneProvider: FCC = ({ children }) => {\n     const { createSnack } = useSnackbar()\n     const apiRef = useGridApiRef()\n-\n+    const { t } = useTranslation('one-to-one')",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/103#discussion_r1735706561",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/one-to-one-table-header/styled.ts",
//         "line": 9,
//         "comment": "Sizes are always x % 4 = 0 unless x < 4",
//         "commitId": "1b86549551afc9c5b34bb5a56fa641d567fa0dd7",
//         "codeSnippet": "@@ -1,12 +1,12 @@\n import { styled, TableCell, TableHead, Button } from '@mui/material'\n \n export const StyledInvitationTableCell = styled(TableCell)({\n-    width: '200px',\n-    padding: '0px 16px 0px 20px'\n+    width: '190px',\n+    padding: '0px 16px 0px 16px'\n })\n \n export const StyledStautsTableCell = styled(TableCell)({\n-    width: '141px',\n+    width: '205px',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/103#discussion_r1735708603",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/one-to-one-accordion/OneToOneAccordionSummary.tsx",
//         "line": 42,
//         "comment": "149? :D Nein! ",
//         "commitId": "1b86549551afc9c5b34bb5a56fa641d567fa0dd7",
//         "codeSnippet": "@@ -32,14 +32,14 @@ const OneToOneAccordionSummary: FC<Props> = ({\n                 {oneToOneDetail.templateName}\n             </Typography>\n             <FlexBox marginLeft='auto' alignItems='center'>\n-                <Typography paddingRight={2}>\n+                <Typography paddingRight={12}>\n                     <DateFormatter\n                         userDateFormat={loggedInUserDateFormat}\n                         dateToFormat={oneToOneDetail.lastModifiedDate}\n                         warning={false}\n                     />\n                 </Typography>\n-                <FlexBox width={145} justifyContent='flex-end' paddingRight={1}>\n+                <FlexBox width={149} paddingRight={1}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/103#discussion_r1735708921",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 158,
//         "comment": "We wanna opt out fast in functions. Everything other that is more or less unreadable.\r\n\r\n(!participantData) {\r\n  setLayoutTitle('')\r\n  return\r\n}",
//         "commitId": "1b86549551afc9c5b34bb5a56fa641d567fa0dd7",
//         "codeSnippet": "@@ -111,22 +120,75 @@ const EmployeeDetails: FC = () => {\n             .finally(() => {\n                 setLoading(false)\n             })\n-    }\n+    }, [id, handleBack, handleTexts])\n \n-    const sortOneToOnes = (\n-        employeeOneToOneDetails: EmployeeOneToOneDetail[],\n-        order: SortOrder\n-    ) => {\n-        return employeeOneToOneDetails.sort((a, b) => {\n-            const dateA = new Date(a.lastModifiedDate).getTime()\n-            const dateB = new Date(b.lastModifiedDate).getTime()\n-            return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n-        })\n-    }\n+    const sortOneToOnes = useCallback(\n+        (\n+            employeeOneToOneDetails: EmployeeOneToOneDetail[],\n+            order: SortOrder\n+        ) => {\n+            return employeeOneToOneDetails.sort((a, b) => {\n+                const dateA = new Date(a.lastModifiedDate).getTime()\n+                const dateB = new Date(b.lastModifiedDate).getTime()\n+                return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n+            })\n+        },\n+        []\n+    )\n+    const fetchUserProfileData = useCallback(() => {\n+        if (id) {\n+            fetchEmployeeDataForOneToOnes([id, loggedInUser]).then(\n+                (response) => {\n+                    setLoggedInUserData(\n+                        response.find(\n+                            (user: UserProfileField) => user.employeeGUID !== id\n+                        )\n+                    )\n+                    setParticipantData(\n+                        response.find(\n+                            (user: UserProfileField) => user.employeeGUID === id\n+                        )\n+                    )\n+                }\n+            )\n+        }\n+    }, [id, loggedInUser])\n+\n+    useEffect(() => {\n+        if (participantData) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/103#discussion_r1735715584",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 158,
//         "comment": "This way you can remove else as well ",
//         "commitId": "1b86549551afc9c5b34bb5a56fa641d567fa0dd7",
//         "codeSnippet": "@@ -111,22 +120,75 @@ const EmployeeDetails: FC = () => {\n             .finally(() => {\n                 setLoading(false)\n             })\n-    }\n+    }, [id, handleBack, handleTexts])\n \n-    const sortOneToOnes = (\n-        employeeOneToOneDetails: EmployeeOneToOneDetail[],\n-        order: SortOrder\n-    ) => {\n-        return employeeOneToOneDetails.sort((a, b) => {\n-            const dateA = new Date(a.lastModifiedDate).getTime()\n-            const dateB = new Date(b.lastModifiedDate).getTime()\n-            return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n-        })\n-    }\n+    const sortOneToOnes = useCallback(\n+        (\n+            employeeOneToOneDetails: EmployeeOneToOneDetail[],\n+            order: SortOrder\n+        ) => {\n+            return employeeOneToOneDetails.sort((a, b) => {\n+                const dateA = new Date(a.lastModifiedDate).getTime()\n+                const dateB = new Date(b.lastModifiedDate).getTime()\n+                return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n+            })\n+        },\n+        []\n+    )\n+    const fetchUserProfileData = useCallback(() => {\n+        if (id) {\n+            fetchEmployeeDataForOneToOnes([id, loggedInUser]).then(\n+                (response) => {\n+                    setLoggedInUserData(\n+                        response.find(\n+                            (user: UserProfileField) => user.employeeGUID !== id\n+                        )\n+                    )\n+                    setParticipantData(\n+                        response.find(\n+                            (user: UserProfileField) => user.employeeGUID === id\n+                        )\n+                    )\n+                }\n+            )\n+        }\n+    }, [id, loggedInUser])\n+\n+    useEffect(() => {\n+        if (participantData) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/103#discussion_r1735749107",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one/Provider/OneToOneProvider.tsx",
//         "line": 54,
//         "comment": "ok",
//         "commitId": "1b86549551afc9c5b34bb5a56fa641d567fa0dd7",
//         "codeSnippet": "@@ -41,6 +48,10 @@ type ContextProps = {\n     loading: boolean\n     todosFetched: boolean\n     userData: UserProfileField[]\n+    layoutTitle: string\n+    setLayoutTitle: Dispatch<SetStateAction<string>>\n+    breadcrumbsProvider: Crumb[]\n+    setBreadcrumbsProvider: Dispatch<SetStateAction<Crumb[]>>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/103#discussion_r1735860137",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/one-to-one-table-header/styled.ts",
//         "line": 9,
//         "comment": "To match the figma, I have set this. I will talk to Henry regarding this",
//         "commitId": "1b86549551afc9c5b34bb5a56fa641d567fa0dd7",
//         "codeSnippet": "@@ -1,12 +1,12 @@\n import { styled, TableCell, TableHead, Button } from '@mui/material'\n \n export const StyledInvitationTableCell = styled(TableCell)({\n-    width: '200px',\n-    padding: '0px 16px 0px 20px'\n+    width: '190px',\n+    padding: '0px 16px 0px 16px'\n })\n \n export const StyledStautsTableCell = styled(TableCell)({\n-    width: '141px',\n+    width: '205px',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/103#discussion_r1735862765",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/one-to-one-accordion/OneToOneAccordionSummary.tsx",
//         "line": 42,
//         "comment": "Same, to match the figma",
//         "commitId": "1b86549551afc9c5b34bb5a56fa641d567fa0dd7",
//         "codeSnippet": "@@ -32,14 +32,14 @@ const OneToOneAccordionSummary: FC<Props> = ({\n                 {oneToOneDetail.templateName}\n             </Typography>\n             <FlexBox marginLeft='auto' alignItems='center'>\n-                <Typography paddingRight={2}>\n+                <Typography paddingRight={12}>\n                     <DateFormatter\n                         userDateFormat={loggedInUserDateFormat}\n                         dateToFormat={oneToOneDetail.lastModifiedDate}\n                         warning={false}\n                     />\n                 </Typography>\n-                <FlexBox width={145} justifyContent='flex-end' paddingRight={1}>\n+                <FlexBox width={149} paddingRight={1}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/103#discussion_r1735866387",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 158,
//         "comment": "ok\r\n",
//         "commitId": "1b86549551afc9c5b34bb5a56fa641d567fa0dd7",
//         "codeSnippet": "@@ -111,22 +120,75 @@ const EmployeeDetails: FC = () => {\n             .finally(() => {\n                 setLoading(false)\n             })\n-    }\n+    }, [id, handleBack, handleTexts])\n \n-    const sortOneToOnes = (\n-        employeeOneToOneDetails: EmployeeOneToOneDetail[],\n-        order: SortOrder\n-    ) => {\n-        return employeeOneToOneDetails.sort((a, b) => {\n-            const dateA = new Date(a.lastModifiedDate).getTime()\n-            const dateB = new Date(b.lastModifiedDate).getTime()\n-            return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n-        })\n-    }\n+    const sortOneToOnes = useCallback(\n+        (\n+            employeeOneToOneDetails: EmployeeOneToOneDetail[],\n+            order: SortOrder\n+        ) => {\n+            return employeeOneToOneDetails.sort((a, b) => {\n+                const dateA = new Date(a.lastModifiedDate).getTime()\n+                const dateB = new Date(b.lastModifiedDate).getTime()\n+                return order === SortOrder.ASC ? dateA - dateB : dateB - dateA\n+            })\n+        },\n+        []\n+    )\n+    const fetchUserProfileData = useCallback(() => {\n+        if (id) {\n+            fetchEmployeeDataForOneToOnes([id, loggedInUser]).then(\n+                (response) => {\n+                    setLoggedInUserData(\n+                        response.find(\n+                            (user: UserProfileField) => user.employeeGUID !== id\n+                        )\n+                    )\n+                    setParticipantData(\n+                        response.find(\n+                            (user: UserProfileField) => user.employeeGUID === id\n+                        )\n+                    )\n+                }\n+            )\n+        }\n+    }, [id, loggedInUser])\n+\n+    useEffect(() => {\n+        if (participantData) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/103#discussion_r1736021924",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/todo-overview/TodoOverview.tsx",
//         "line": null,
//         "comment": "remove hard coded colors",
//         "commitId": "f90694ca8c906c1fb63c822a3545e55e4e0822c7",
//         "codeSnippet": "@@ -160,103 +146,125 @@ const TodoOverview: FC = () => {\n             ...todo,\n             todoOverviewDetails: todo.todoOverviewDetails.map((todoDetail) => {\n                 const otherParticipantId = todoDetail.participants.find(\n-                    (participant: string) => participant !== todo.ownerId\n+                    (participant) => participant !== todo.ownerId\n                 )\n                 const otherParticipant = userProfileFields.find(\n-                    (user: UserProfileField) =>\n-                        user.employeeGUID === otherParticipantId\n+                    (user) => user.employeeGUID === otherParticipantId\n                 )\n-                if (otherParticipant) {\n-                    const otherParticipantName =\n-                        otherParticipant.fields[1]?.data[0] ?? ''\n-                    return {\n-                        ...todoDetail,\n-                        otherParticipantName\n-                    }\n-                }\n-                return todoDetail\n+                const otherParticipantName =\n+                    otherParticipant?.fields[1]?.data[0] ?? ''\n+                return { ...todoDetail, otherParticipantName }\n             })\n         }\n         return updatedTodo\n     }\n \n-    return (\n-        <Box>\n-            {todosFetched ? (\n+    const handleFetchData = () => {\n+        getTodos()\n+            .then((todosResponse) => {\n+                setTodos(todosResponse.todoOverviews)\n+                setTodosReqFailed(false)\n+                const participants = [\n+                    ...new Set(\n+                        todosResponse.todoOverviews.flatMap((todo) =>\n+                            todo.todoOverviewDetails.flatMap(\n+                                (detail) => detail.participants\n+                            )\n+                        )\n+                    )\n+                ]\n+                fetchEmployeeDataForOneToOnes(participants).then((data) => {\n+                    setUserData(data)\n+                })\n+            })\n+            .catch(() => setTodosReqFailed(true))\n+    }\n+\n+    if (todosLoader) {\n+        return (\n+            <Box\n+                sx={{\n+                    display: 'flex',\n+                    justifyContent: 'center',\n+                    alignItems: 'center',\n+                    height: '50vh'\n+                }}\n+            >\n+                <CircularProgress />\n+            </Box>\n+        )\n+    }\n+\n+    return todosReqFailed ? (\n+        <ErrorMessage\n+            errorMessage1={t('error1')}\n+            errorMessage2={t('error2')}\n+            fetchData={handleFetchData}\n+        />\n+    ) : !todos.length ? (\n+        <ErrorMessage\n+            errorMessage1={t('no-todos-msg1')}\n+            errorMessage2={t('no-todos-msg2')}\n+            showReloadButton={false}\n+            src={EmptyBox}\n+        />\n+    ) : (\n+        <>\n+            <TodoFilter\n+                todos={todos ?? []}\n+                setFilteredTodos={setFilteredTodos}\n+                setSearchText={setSearchText}\n+                setFilterActive={setFilterActive}\n+            />\n+            {!(searchText.length > 0 || filterActive) ||\n+            filteredTodos.length > 0 ? (\n                 <>\n-                    <TodoFilter\n-                        todos={todos ?? []}\n-                        setFilteredTodos={setFilteredTodos}\n-                        setSearchText={setSearchText}\n-                        setFilterActive={setFilterActive}\n-                    />\n-                    {filteredTodos.length > 0 ? (\n-                        <>\n-                            <CardHolder>\n-                                <Card\n-                                    heading={t('completed')}\n-                                    count={cardCount.completed}\n-                                    img={Path}\n-                                />\n-                                <Card\n-                                    heading={t('active')}\n-                                    count={cardCount.active}\n-                                    img={Rocket}\n+                    <CardHolder>\n+                        <Card\n+                            heading={t('completed')}\n+                            count={cardCount.completed}\n+                            img={Path}\n+                        />\n+                        <Card\n+                            heading={t('active')}\n+                            count={cardCount.active}\n+                            img={Rocket}\n+                        />\n+                        <Card\n+                            heading={t('overdue')}\n+                            count={cardCount.overdue}\n+                            img={Robot}\n+                        />\n+                    </CardHolder>\n+                    {todos.filter((todo) => todo.ownerId !== loggedInUser)\n+                        .length === 0 && (\n+                        <NoTodos>\n+                            <IconBox>\n+                                <ErrorOutlineSharpIcon\n+                                    sx={{\n+                                        color: '#0081A3',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/105#discussion_r1737885040",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/todo-overview/TodoOverview.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "f90694ca8c906c1fb63c822a3545e55e4e0822c7",
//         "codeSnippet": "@@ -160,103 +146,125 @@ const TodoOverview: FC = () => {\n             ...todo,\n             todoOverviewDetails: todo.todoOverviewDetails.map((todoDetail) => {\n                 const otherParticipantId = todoDetail.participants.find(\n-                    (participant: string) => participant !== todo.ownerId\n+                    (participant) => participant !== todo.ownerId\n                 )\n                 const otherParticipant = userProfileFields.find(\n-                    (user: UserProfileField) =>\n-                        user.employeeGUID === otherParticipantId\n+                    (user) => user.employeeGUID === otherParticipantId\n                 )\n-                if (otherParticipant) {\n-                    const otherParticipantName =\n-                        otherParticipant.fields[1]?.data[0] ?? ''\n-                    return {\n-                        ...todoDetail,\n-                        otherParticipantName\n-                    }\n-                }\n-                return todoDetail\n+                const otherParticipantName =\n+                    otherParticipant?.fields[1]?.data[0] ?? ''\n+                return { ...todoDetail, otherParticipantName }\n             })\n         }\n         return updatedTodo\n     }\n \n-    return (\n-        <Box>\n-            {todosFetched ? (\n+    const handleFetchData = () => {\n+        getTodos()\n+            .then((todosResponse) => {\n+                setTodos(todosResponse.todoOverviews)\n+                setTodosReqFailed(false)\n+                const participants = [\n+                    ...new Set(\n+                        todosResponse.todoOverviews.flatMap((todo) =>\n+                            todo.todoOverviewDetails.flatMap(\n+                                (detail) => detail.participants\n+                            )\n+                        )\n+                    )\n+                ]\n+                fetchEmployeeDataForOneToOnes(participants).then((data) => {\n+                    setUserData(data)\n+                })\n+            })\n+            .catch(() => setTodosReqFailed(true))\n+    }\n+\n+    if (todosLoader) {\n+        return (\n+            <Box\n+                sx={{\n+                    display: 'flex',\n+                    justifyContent: 'center',\n+                    alignItems: 'center',\n+                    height: '50vh'\n+                }}\n+            >\n+                <CircularProgress />\n+            </Box>\n+        )\n+    }\n+\n+    return todosReqFailed ? (\n+        <ErrorMessage\n+            errorMessage1={t('error1')}\n+            errorMessage2={t('error2')}\n+            fetchData={handleFetchData}\n+        />\n+    ) : !todos.length ? (\n+        <ErrorMessage\n+            errorMessage1={t('no-todos-msg1')}\n+            errorMessage2={t('no-todos-msg2')}\n+            showReloadButton={false}\n+            src={EmptyBox}\n+        />\n+    ) : (\n+        <>\n+            <TodoFilter\n+                todos={todos ?? []}\n+                setFilteredTodos={setFilteredTodos}\n+                setSearchText={setSearchText}\n+                setFilterActive={setFilterActive}\n+            />\n+            {!(searchText.length > 0 || filterActive) ||\n+            filteredTodos.length > 0 ? (\n                 <>\n-                    <TodoFilter\n-                        todos={todos ?? []}\n-                        setFilteredTodos={setFilteredTodos}\n-                        setSearchText={setSearchText}\n-                        setFilterActive={setFilterActive}\n-                    />\n-                    {filteredTodos.length > 0 ? (\n-                        <>\n-                            <CardHolder>\n-                                <Card\n-                                    heading={t('completed')}\n-                                    count={cardCount.completed}\n-                                    img={Path}\n-                                />\n-                                <Card\n-                                    heading={t('active')}\n-                                    count={cardCount.active}\n-                                    img={Rocket}\n+                    <CardHolder>\n+                        <Card\n+                            heading={t('completed')}\n+                            count={cardCount.completed}\n+                            img={Path}\n+                        />\n+                        <Card\n+                            heading={t('active')}\n+                            count={cardCount.active}\n+                            img={Rocket}\n+                        />\n+                        <Card\n+                            heading={t('overdue')}\n+                            count={cardCount.overdue}\n+                            img={Robot}\n+                        />\n+                    </CardHolder>\n+                    {todos.filter((todo) => todo.ownerId !== loggedInUser)\n+                        .length === 0 && (\n+                        <NoTodos>\n+                            <IconBox>\n+                                <ErrorOutlineSharpIcon\n+                                    sx={{\n+                                        color: '#0081A3',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/105#discussion_r1737908782",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "I see this won't work now. You have to move the OTOProvider to @/Providers. We should try avoid importing from inside other features",
//         "commitId": "0c437d344189d44d9080f6ffed0d1bd0cfc19c6a",
//         "codeSnippet": "@@ -22,6 +27,8 @@ import { useSnackbar } from '@catalystone/react-core-ui'\n import { Box, Typography } from '@mui/material'\n \n import BoxEmpty from '../../assets/box-empty.svg'\n+import { UserProfileField } from '../../types/user.profile.field'\n+import useOneToOne from '../one-to-one/Provider/useOneToOne'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/106#discussion_r1737984275",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "Fix the format of that file please :) ",
//         "commitId": "0c437d344189d44d9080f6ffed0d1bd0cfc19c6a",
//         "codeSnippet": "@@ -22,6 +27,8 @@ import { useSnackbar } from '@catalystone/react-core-ui'\n import { Box, Typography } from '@mui/material'\n \n import BoxEmpty from '../../assets/box-empty.svg'\n+import { UserProfileField } from '../../types/user.profile.field'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/106#discussion_r1737984863",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "You have the @/assets and stuff as well ",
//         "commitId": "0c437d344189d44d9080f6ffed0d1bd0cfc19c6a",
//         "codeSnippet": "@@ -22,6 +27,8 @@ import { useSnackbar } from '@catalystone/react-core-ui'\n import { Box, Typography } from '@mui/material'\n \n import BoxEmpty from '../../assets/box-empty.svg'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/106#discussion_r1737985167",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/empty-state/styled.ts",
//         "line": 8,
//         "comment": "Oh, why are you using vh? :o ",
//         "commitId": "0c437d344189d44d9080f6ffed0d1bd0cfc19c6a",
//         "codeSnippet": "@@ -5,7 +5,7 @@ export const AlignCenter = styled(Box)({\n     flexDirection: 'column',\n     alignItems: 'center',\n     justifyContent: 'center',\n-    height: '55vh'\n+    height: '56vh'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/106#discussion_r1737994727",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/empty-state/styled.ts",
//         "line": 8,
//         "comment": "I just felt it will be better to use, will make it somewhat responsive\r\nShould I not use vh??\r\n",
//         "commitId": "0c437d344189d44d9080f6ffed0d1bd0cfc19c6a",
//         "codeSnippet": "@@ -5,7 +5,7 @@ export const AlignCenter = styled(Box)({\n     flexDirection: 'column',\n     alignItems: 'center',\n     justifyContent: 'center',\n-    height: '55vh'\n+    height: '56vh'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/106#discussion_r1738090243",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/empty-state/styled.ts",
//         "line": 8,
//         "comment": "vh is also being used some other places also.",
//         "commitId": "0c437d344189d44d9080f6ffed0d1bd0cfc19c6a",
//         "codeSnippet": "@@ -5,7 +5,7 @@ export const AlignCenter = styled(Box)({\n     flexDirection: 'column',\n     alignItems: 'center',\n     justifyContent: 'center',\n-    height: '55vh'\n+    height: '56vh'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/106#discussion_r1738091924",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/todo-overview/TodoOverview.tsx",
//         "line": null,
//         "comment": "use @/assets",
//         "commitId": "5f73c3982d468b893ebb9d10be64748619388e33",
//         "codeSnippet": "@@ -13,9 +13,9 @@ import {\n } from '@/services/to-do/service'\n import { Box, CircularProgress } from '@mui/material'\n \n+import Robot from '../../assets/Group.svg'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/107#discussion_r1738102562",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/todo-overview/TodoOverview.tsx",
//         "line": null,
//         "comment": "use @/services",
//         "commitId": "5f73c3982d468b893ebb9d10be64748619388e33",
//         "codeSnippet": "@@ -13,9 +13,9 @@ import {\n } from '@/services/to-do/service'\n import { Box, CircularProgress } from '@mui/material'\n \n+import Robot from '../../assets/Group.svg'\n import EmptyBox from '../../assets/box-empty.svg'\n import Path from '../../assets/path.svg'\n-import Robot from '../../assets/robot.svg'\n import Rocket from '../../assets/rocket-new.svg'\n import { TodoOverviewData } from '../../services/to-do/types'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/107#discussion_r1738103634",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/empty-state/styled.ts",
//         "line": 8,
//         "comment": "Its okey, just need to be a little careful with it :) ",
//         "commitId": "0c437d344189d44d9080f6ffed0d1bd0cfc19c6a",
//         "codeSnippet": "@@ -5,7 +5,7 @@ export const AlignCenter = styled(Box)({\n     flexDirection: 'column',\n     alignItems: 'center',\n     justifyContent: 'center',\n-    height: '55vh'\n+    height: '56vh'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/106#discussion_r1738163600",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/empty-state/styled.ts",
//         "line": 8,
//         "comment": "okay\r\n",
//         "commitId": "0c437d344189d44d9080f6ffed0d1bd0cfc19c6a",
//         "codeSnippet": "@@ -5,7 +5,7 @@ export const AlignCenter = styled(Box)({\n     flexDirection: 'column',\n     alignItems: 'center',\n     justifyContent: 'center',\n-    height: '55vh'\n+    height: '56vh'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/106#discussion_r1738276131",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/sceditor/development/themes/catalystone/iframe.css",
//         "line": 11,
//         "comment": "can this be done by using theme?",
//         "commitId": "5d4d5f9f0ff22c29ef61492c610353c180d3baa2",
//         "codeSnippet": "@@ -1,31 +1,35 @@\n /*! SCEditor | (C) 2011-2013, Sam Clarke | sceditor.com/license */\n-html, body, p, code:before, table {\n-\tmargin: 0;\n-\tpadding: 0;\n-\tfont-family: \"CatalystOne Open Sans\", sans-serif;\n-\tfont-size: 16px;\n-\tcolor: #111;\n-\tline-height: 1.25;\n-\toverflow: visible;\n+html,\n+body,\n+p,\n+code:before,\n+table {\n+    margin: 0;\n+    padding: 0;\n+    font-family: 'CatalystOne Open Sans', sans-serif;\n+    font-size: 16px;\n+    color: #111;",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/110#discussion_r1740421191",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/sceditor/development/themes/catalystone/iframe.css",
//         "line": 11,
//         "comment": "No :)",
//         "commitId": "5d4d5f9f0ff22c29ef61492c610353c180d3baa2",
//         "codeSnippet": "@@ -1,31 +1,35 @@\n /*! SCEditor | (C) 2011-2013, Sam Clarke | sceditor.com/license */\n-html, body, p, code:before, table {\n-\tmargin: 0;\n-\tpadding: 0;\n-\tfont-family: \"CatalystOne Open Sans\", sans-serif;\n-\tfont-size: 16px;\n-\tcolor: #111;\n-\tline-height: 1.25;\n-\toverflow: visible;\n+html,\n+body,\n+p,\n+code:before,\n+table {\n+    margin: 0;\n+    padding: 0;\n+    font-family: 'CatalystOne Open Sans', sans-serif;\n+    font-size: 16px;\n+    color: #111;",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/110#discussion_r1740455347",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "Shouldn't we send the event after the if return? ",
//         "commitId": "a4b9b594a1c0e9c2a4043beafcffb94dc9dd78ca",
//         "codeSnippet": "@@ -245,6 +268,14 @@ const EmployeeDetails: FC = () => {\n         )\n     }, [filterString, statuses, employeeOneToOnes])\n \n+    const handleSubmitSelected = (template: Nullable<Template>) => {\n+        logEvent(EventStore.getEvent('employeeOneToOneStarted'))",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/113#discussion_r1741599832",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-overview/OneToOneOverviewDataTable.tsx",
//         "line": null,
//         "comment": "No, you have to make a return fn and do it. This not sets it to empty ON render.\r\nreturn () => {\r\n  setSelectedPeople([])\r\n}",
//         "commitId": "a4b9b594a1c0e9c2a4043beafcffb94dc9dd78ca",
//         "codeSnippet": "@@ -35,6 +36,10 @@ const OneToOneOverviewDataTable: FC = () => {\n \n     const [open, setOpen] = useState(false)\n \n+    useEffect(() => {\n+        setSelectedPeople([])",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/113#discussion_r1741601046",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "I think its to track if they are starting One to one from drill down, regardless of its being created or not",
//         "commitId": "a4b9b594a1c0e9c2a4043beafcffb94dc9dd78ca",
//         "codeSnippet": "@@ -245,6 +268,14 @@ const EmployeeDetails: FC = () => {\n         )\n     }, [filterString, statuses, employeeOneToOnes])\n \n+    const handleSubmitSelected = (template: Nullable<Template>) => {\n+        logEvent(EventStore.getEvent('employeeOneToOneStarted'))",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/113#discussion_r1741651155",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "But it's not starting. The if is basically just there to make sure it actually works. Like a bug safety, no? If you try to track this after it looks like it started but it never did? ",
//         "commitId": "a4b9b594a1c0e9c2a4043beafcffb94dc9dd78ca",
//         "codeSnippet": "@@ -245,6 +268,14 @@ const EmployeeDetails: FC = () => {\n         )\n     }, [filterString, statuses, employeeOneToOnes])\n \n+    const handleSubmitSelected = (template: Nullable<Template>) => {\n+        logEvent(EventStore.getEvent('employeeOneToOneStarted'))",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/113#discussion_r1741727757",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "ok",
//         "commitId": "a4b9b594a1c0e9c2a4043beafcffb94dc9dd78ca",
//         "codeSnippet": "@@ -245,6 +268,14 @@ const EmployeeDetails: FC = () => {\n         )\n     }, [filterString, statuses, employeeOneToOnes])\n \n+    const handleSubmitSelected = (template: Nullable<Template>) => {\n+        logEvent(EventStore.getEvent('employeeOneToOneStarted'))",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/113#discussion_r1741801661",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/Components/ErrorMessage/styled.ts",
//         "line": 24,
//         "comment": "import from theme",
//         "commitId": "ad0311d3e60c08cc6fa0888ac107045ff1b43891",
//         "codeSnippet": "@@ -13,15 +13,13 @@ export const ErrorMessage1 = styled(Box)({\n     letterSpacing: '0.5px',\n     fontWeight: 600,\n     fontSize: '24px',\n-    fontFamily: 'Open sans',\n     paddingTop: '32px'\n })\n \n export const ErrorMessage2 = styled(Box)({\n     letterSpacing: '0.5px',\n     fontWeight: 600,\n     fontSize: '18px',\n-    fontFamily: 'Open sans',\n     paddingTop: '16px',\n     color: '#222222BF',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/123#discussion_r1744887978",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/todo-overview/empty-state/styled.ts",
//         "line": null,
//         "comment": "use theme colors",
//         "commitId": "ad0311d3e60c08cc6fa0888ac107045ff1b43891",
//         "codeSnippet": "@@ -12,7 +12,6 @@ export const Message = styled(Box)({\n     letterSpacing: '0.5px',\n     fontWeight: 500,\n     fontSize: '16px',\n-    fontFamily: 'Open sans',\n     paddingTop: '32px',\n     color: '#0081A3'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/123#discussion_r1744888482",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "i18next-parser.config.yaml",
//         "line": null,
//         "comment": "remove",
//         "commitId": "10ba0dc0067404a47f9e2f70dd5cdea3002d6660",
//         "codeSnippet": "@@ -1,5 +1,5 @@\n lineEnding: 'auto'\n-locales: ['en-GB']\n+locales: ['en-GB', 'en-US', 'nb-NO', 'da-DK', 'sv-SE', 'fi-FI', 'de-DE', 'nl-NL', 'pl-PL', 'fr-FR']\n # 'en-US', 'nb-NO', 'da-DK', 'sv-SE', 'fi-FI', 'de-DE', 'nl-NL', 'pl-PL', 'fr-FR']",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/124#discussion_r1744972480",
//         "author": "u-arora"
//     },
//     {
//         "file": "i18next-parser.config.yaml",
//         "line": null,
//         "comment": "Why?\r\n",
//         "commitId": "10ba0dc0067404a47f9e2f70dd5cdea3002d6660",
//         "codeSnippet": "@@ -1,5 +1,5 @@\n lineEnding: 'auto'\n-locales: ['en-GB']\n+locales: ['en-GB', 'en-US', 'nb-NO', 'da-DK', 'sv-SE', 'fi-FI', 'de-DE', 'nl-NL', 'pl-PL', 'fr-FR']\n # 'en-US', 'nb-NO', 'da-DK', 'sv-SE', 'fi-FI', 'de-DE', 'nl-NL', 'pl-PL', 'fr-FR']",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/124#discussion_r1744980499",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingButtons.tsx",
//         "line": 27,
//         "comment": "I would be super happy if you stuck to the .match and factory pattern for this :D ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,101 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { MeetingStateConstants } from '@/services/topics'\n+import { Button, Grid } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+type Props = {\n+    step: number\n+    onChangeStep: (step: number) => void\n+    onSubmit: () => void\n+    totalSections: number\n+    availableButtonAction: MeetingStateConstants\n+}\n+const MeetingButtons: FC<Props> = ({\n+    step,\n+    onChangeStep,\n+    onSubmit,\n+    totalSections,\n+    availableButtonAction\n+}) => {\n+    const { t } = useTranslation('meeting')\n+\n+    const getRequiredBtnForLastPage = (notLastPage?: boolean) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745018760",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": null,
//         "comment": "Wait what? Why is this search params and not useParams() as url variable? ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,170 @@\n+import { FC, useEffect, useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useSearchParams } from 'react-router-dom'\n+\n+import AlertDialog from '@/Components/AlertDialog'\n+import { MeetingStateConstants } from '@/services/topics'\n+import { DialogState, getClosedState, getOpenState } from '@/types/dialog'\n+import { Layout } from '@catalystone/react-core-ui'\n+import { ButtonProps } from '@catalystone/react-core-ui/dist/Layout/TopSection/Buttons'\n+import { Box } from '@mui/system'\n+\n+import MeetingButtons from './MeetingButtons'\n+import MeetingProvider from './MeetingProvider'\n+import PageHandler from './PageHandler'\n+import ShowAvatar from './ShowAvatar'\n+import useMeeting from './useMeeting'\n+\n+const MeetingDetails: FC = () => {\n+    const {\n+        meeting,\n+        setStep,\n+        step,\n+        sections,\n+        loading,\n+        userData,\n+        handleMeetingStateChange,\n+        availableActions\n+    } = useMeeting()\n+\n+    const [sectionSteps, setSectionSteps] = useState<any[]>([])\n+\n+    const [searchParams] = useSearchParams()\n+    const oneToOneId = searchParams.get('oneToOneId')",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745019957",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": null,
//         "comment": "Any not gonna fly ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,170 @@\n+import { FC, useEffect, useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useSearchParams } from 'react-router-dom'\n+\n+import AlertDialog from '@/Components/AlertDialog'\n+import { MeetingStateConstants } from '@/services/topics'\n+import { DialogState, getClosedState, getOpenState } from '@/types/dialog'\n+import { Layout } from '@catalystone/react-core-ui'\n+import { ButtonProps } from '@catalystone/react-core-ui/dist/Layout/TopSection/Buttons'\n+import { Box } from '@mui/system'\n+\n+import MeetingButtons from './MeetingButtons'\n+import MeetingProvider from './MeetingProvider'\n+import PageHandler from './PageHandler'\n+import ShowAvatar from './ShowAvatar'\n+import useMeeting from './useMeeting'\n+\n+const MeetingDetails: FC = () => {\n+    const {\n+        meeting,\n+        setStep,\n+        step,\n+        sections,\n+        loading,\n+        userData,\n+        handleMeetingStateChange,\n+        availableActions\n+    } = useMeeting()\n+\n+    const [sectionSteps, setSectionSteps] = useState<any[]>([])",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745020277",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": null,
//         "comment": "You can do this const [reviewee, reviewer] = userData",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,170 @@\n+import { FC, useEffect, useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useSearchParams } from 'react-router-dom'\n+\n+import AlertDialog from '@/Components/AlertDialog'\n+import { MeetingStateConstants } from '@/services/topics'\n+import { DialogState, getClosedState, getOpenState } from '@/types/dialog'\n+import { Layout } from '@catalystone/react-core-ui'\n+import { ButtonProps } from '@catalystone/react-core-ui/dist/Layout/TopSection/Buttons'\n+import { Box } from '@mui/system'\n+\n+import MeetingButtons from './MeetingButtons'\n+import MeetingProvider from './MeetingProvider'\n+import PageHandler from './PageHandler'\n+import ShowAvatar from './ShowAvatar'\n+import useMeeting from './useMeeting'\n+\n+const MeetingDetails: FC = () => {\n+    const {\n+        meeting,\n+        setStep,\n+        step,\n+        sections,\n+        loading,\n+        userData,\n+        handleMeetingStateChange,\n+        availableActions\n+    } = useMeeting()\n+\n+    const [sectionSteps, setSectionSteps] = useState<any[]>([])\n+\n+    const [searchParams] = useSearchParams()\n+    const oneToOneId = searchParams.get('oneToOneId')\n+    const reviewee = userData[0]",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745020973",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": 41,
//         "comment": "Could you follow these organized rules\r\n\r\n- custom hooks\r\n- useStates\r\n- Variables\r\n- Functions\r\n- useEffects ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,170 @@\n+import { FC, useEffect, useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useSearchParams } from 'react-router-dom'\n+\n+import AlertDialog from '@/Components/AlertDialog'\n+import { MeetingStateConstants } from '@/services/topics'\n+import { DialogState, getClosedState, getOpenState } from '@/types/dialog'\n+import { Layout } from '@catalystone/react-core-ui'\n+import { ButtonProps } from '@catalystone/react-core-ui/dist/Layout/TopSection/Buttons'\n+import { Box } from '@mui/system'\n+\n+import MeetingButtons from './MeetingButtons'\n+import MeetingProvider from './MeetingProvider'\n+import PageHandler from './PageHandler'\n+import ShowAvatar from './ShowAvatar'\n+import useMeeting from './useMeeting'\n+\n+const MeetingDetails: FC = () => {\n+    const {\n+        meeting,\n+        setStep,\n+        step,\n+        sections,\n+        loading,\n+        userData,\n+        handleMeetingStateChange,\n+        availableActions\n+    } = useMeeting()\n+\n+    const [sectionSteps, setSectionSteps] = useState<any[]>([])\n+\n+    const [searchParams] = useSearchParams()\n+    const oneToOneId = searchParams.get('oneToOneId')\n+    const reviewee = userData[0]\n+    const reviewer = userData[1]\n+    const [deleteDialogOpen, setDeleteDialogOpen] =\n+        useState<DialogState>(getClosedState())\n+    const [reopenDialogOpen, setReopenDialogOpen] =\n+        useState<DialogState>(getClosedState())\n+    const { t } = useTranslation('meeting')",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745021998",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingProvider.tsx",
//         "line": null,
//         "comment": "First line of any function should be to opt out if there is a condition. So \r\n\r\nif (!oneToOneId) return\r\n\r\nAlso the participants array is not needed here. When dealing with chaining like this you should always return the data you need on in the chain. Also, why is Meeting (singular) set to [res]? \r\n\r\nLastly it would be nice with functions dealing with this. getOneToOneMeeting(id).then(handleMeetingResponse).then(handleEmployeesForMeeting) or something like that. Also concider moving all of this mapping stuff out. Its not very interessting insdie a provider like this if it becomes to cluttered ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,164 @@\n+import {\n+    createContext,\n+    Dispatch,\n+    SetStateAction,\n+    useEffect,\n+    useMemo,\n+    useState\n+} from 'react'\n+import { useSearchParams } from 'react-router-dom'\n+\n+import dayjs from 'dayjs'\n+\n+import { StandardField } from '@/services/employee/utils'\n+import {\n+    fetchEmployeeDataForOneToOnes,\n+    getOneToOneMeeting,\n+    OneToOneMeetingResponse,\n+    Section\n+} from '@/services/one-to-one'\n+import { UserInfo } from '@/services/topics'\n+import { FCC } from '@/types/react'\n+import { UserProfileField } from '@/types/userProfileField'\n+\n+type ContextProps = {\n+    meeting: OneToOneMeetingResponse[]\n+    oneToOneId: string | null\n+    setMeeting: Dispatch<SetStateAction<OneToOneMeetingResponse[]>>\n+    sections: Section[]\n+    setSections: Dispatch<SetStateAction<Section[]>>\n+    loading: boolean\n+    setLoading: Dispatch<SetStateAction<boolean>>\n+    step: number\n+    setStep: Dispatch<SetStateAction<number>>\n+    userData: UserInfo[]\n+    setUserData: Dispatch<SetStateAction<UserInfo[]>>\n+    timestamp: string\n+    setTimeStamp: Dispatch<SetStateAction<string>>\n+    availableActions: number[]\n+    setAvailableActions: Dispatch<SetStateAction<number[]>>\n+}\n+export const MeetingContext = createContext<ContextProps>({\n+    meeting: [],\n+    oneToOneId: '',\n+    setMeeting: () => {},\n+    sections: [],\n+    setSections: () => {},\n+    loading: false,\n+    setLoading: () => {},\n+    step: 0,\n+    setStep: () => {},\n+    userData: [],\n+    setUserData: () => {},\n+    timestamp: '',\n+    setTimeStamp: () => {},\n+    availableActions: [],\n+    setAvailableActions: () => {}\n+})\n+\n+const MeetingProvider: FCC = ({ children }) => {\n+    const [sections, setSections] = useState<Section[]>([])\n+    const [meeting, setMeeting] = useState<OneToOneMeetingResponse[]>([])\n+    const [loading, setLoading] = useState(true)\n+    const [step, setStep] = useState(0)\n+    const [userData, setUserData] = useState<UserInfo[]>([])\n+    const [searchParams] = useSearchParams()\n+    const oneToOneId = searchParams.get('oneToOneId')\n+    const [timestamp, setTimeStamp] = useState<string>(dayjs().format('HH:mm'))\n+    const [availableActions, setAvailableActions] = useState<number[]>([])\n+    const [savingStatus, setSavingStatus] = useState(false)\n+\n+    useEffect(() => {\n+        const participants: string[] = []\n+        if (oneToOneId) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745032851",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/GeneraPageTopics.tsx",
//         "line": null,
//         "comment": "Try be a bit more declerative with React. Create a separate Component for this stuff so we don't have to read and maintain these wicked inlined ifs and stuff. ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,190 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { translateBBCodeToHtml } from '@/Components/RichTextEditor/util/translateBBCodeToHtml'\n+import { GeneralPageResponse, Rights, SettingType } from '@/services/topics'\n+import {\n+    Alert,\n+    AlertTitle,\n+    Divider,\n+    FormControl,\n+    FormControlLabel,\n+    Grid,\n+    Radio,\n+    RadioGroup,\n+    TextField,\n+    Typography\n+} from '@mui/material'\n+import { Stack } from '@mui/system'\n+\n+import useMeeting from '../useMeeting'\n+\n+type Props = {\n+    sectionData: GeneralPageResponse | null\n+}\n+\n+const GeneralPageTopics: FC<Props> = ({ sectionData }) => {\n+    const { generalPageRequest } = useMeeting()\n+\n+    const { t } = useTranslation('meeting')\n+    function radioTopicHandler(\n+        event: React.ChangeEvent<HTMLInputElement>,\n+        topicId: string,\n+        topicType: number\n+    ) {\n+        generalPageRequest(topicType, event.target.value, topicId)\n+    }\n+    function commentTopicHandler(\n+        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n+        topicId: string,\n+        topicType: number\n+    ) {\n+        generalPageRequest(topicType, event.target.value, topicId)\n+    }\n+\n+    return (\n+        <>\n+            <Stack\n+                sx={{\n+                    width: '100%',\n+                    pt: 3\n+                }}\n+            >\n+                <Alert severity='info'>\n+                    <AlertTitle>{t('general-meeting-not-started')}</AlertTitle>\n+                    {t('general-meeting-not-started-description')}\n+                </Alert>\n+            </Stack>\n+\n+            <Typography fontWeight={600} pt={3}>\n+                <Typography\n+                    dangerouslySetInnerHTML={{\n+                        __html: translateBBCodeToHtml(\n+                            sectionData?.description || '',\n+                            true\n+                        )\n+                    }}\n+                />\n+            </Typography>\n+\n+            {sectionData?.topics?.map((topic) => {\n+                if (topic.questionType === SettingType.MultipleChoice) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745035209",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/GeneraPageTopics.tsx",
//         "line": null,
//         "comment": "Random Grid item inside? Where is the container? ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,190 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { translateBBCodeToHtml } from '@/Components/RichTextEditor/util/translateBBCodeToHtml'\n+import { GeneralPageResponse, Rights, SettingType } from '@/services/topics'\n+import {\n+    Alert,\n+    AlertTitle,\n+    Divider,\n+    FormControl,\n+    FormControlLabel,\n+    Grid,\n+    Radio,\n+    RadioGroup,\n+    TextField,\n+    Typography\n+} from '@mui/material'\n+import { Stack } from '@mui/system'\n+\n+import useMeeting from '../useMeeting'\n+\n+type Props = {\n+    sectionData: GeneralPageResponse | null\n+}\n+\n+const GeneralPageTopics: FC<Props> = ({ sectionData }) => {\n+    const { generalPageRequest } = useMeeting()\n+\n+    const { t } = useTranslation('meeting')\n+    function radioTopicHandler(\n+        event: React.ChangeEvent<HTMLInputElement>,\n+        topicId: string,\n+        topicType: number\n+    ) {\n+        generalPageRequest(topicType, event.target.value, topicId)\n+    }\n+    function commentTopicHandler(\n+        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n+        topicId: string,\n+        topicType: number\n+    ) {\n+        generalPageRequest(topicType, event.target.value, topicId)\n+    }\n+\n+    return (\n+        <>\n+            <Stack\n+                sx={{\n+                    width: '100%',\n+                    pt: 3\n+                }}\n+            >\n+                <Alert severity='info'>\n+                    <AlertTitle>{t('general-meeting-not-started')}</AlertTitle>\n+                    {t('general-meeting-not-started-description')}\n+                </Alert>\n+            </Stack>\n+\n+            <Typography fontWeight={600} pt={3}>\n+                <Typography\n+                    dangerouslySetInnerHTML={{\n+                        __html: translateBBCodeToHtml(\n+                            sectionData?.description || '',\n+                            true\n+                        )\n+                    }}\n+                />\n+            </Typography>\n+\n+            {sectionData?.topics?.map((topic) => {\n+                if (topic.questionType === SettingType.MultipleChoice) {\n+                    return (\n+                        <Typography\n+                            key={topic.topicId}\n+                            fontSize={24}\n+                            fontWeight={400}\n+                            pt={3}\n+                        >\n+                            {topic.questionLabel}\n+                            <Grid item>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745035823",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/GeneraPageTopics.tsx",
//         "line": null,
//         "comment": "This component needs full refactor ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,190 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { translateBBCodeToHtml } from '@/Components/RichTextEditor/util/translateBBCodeToHtml'\n+import { GeneralPageResponse, Rights, SettingType } from '@/services/topics'\n+import {\n+    Alert,\n+    AlertTitle,\n+    Divider,\n+    FormControl,\n+    FormControlLabel,\n+    Grid,\n+    Radio,\n+    RadioGroup,\n+    TextField,\n+    Typography\n+} from '@mui/material'\n+import { Stack } from '@mui/system'\n+\n+import useMeeting from '../useMeeting'\n+\n+type Props = {\n+    sectionData: GeneralPageResponse | null\n+}\n+\n+const GeneralPageTopics: FC<Props> = ({ sectionData }) => {\n+    const { generalPageRequest } = useMeeting()\n+\n+    const { t } = useTranslation('meeting')\n+    function radioTopicHandler(\n+        event: React.ChangeEvent<HTMLInputElement>,\n+        topicId: string,\n+        topicType: number\n+    ) {\n+        generalPageRequest(topicType, event.target.value, topicId)\n+    }\n+    function commentTopicHandler(\n+        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n+        topicId: string,\n+        topicType: number\n+    ) {\n+        generalPageRequest(topicType, event.target.value, topicId)\n+    }\n+\n+    return (\n+        <>\n+            <Stack\n+                sx={{\n+                    width: '100%',\n+                    pt: 3\n+                }}\n+            >\n+                <Alert severity='info'>\n+                    <AlertTitle>{t('general-meeting-not-started')}</AlertTitle>\n+                    {t('general-meeting-not-started-description')}\n+                </Alert>\n+            </Stack>\n+\n+            <Typography fontWeight={600} pt={3}>\n+                <Typography\n+                    dangerouslySetInnerHTML={{\n+                        __html: translateBBCodeToHtml(\n+                            sectionData?.description || '',\n+                            true\n+                        )\n+                    }}\n+                />\n+            </Typography>\n+\n+            {sectionData?.topics?.map((topic) => {\n+                if (topic.questionType === SettingType.MultipleChoice) {\n+                    return (\n+                        <Typography\n+                            key={topic.topicId}\n+                            fontSize={24}\n+                            fontWeight={400}\n+                            pt={3}\n+                        >\n+                            {topic.questionLabel}\n+                            <Grid item>\n+                                <Divider sx={{ margin: '10px 0' }} />\n+                            </Grid>\n+                            <FormControl>\n+                                <RadioGroup\n+                                    style={{\n+                                        pointerEvents:\n+                                            topic.right === Rights.READ ||\n+                                            Rights.NO_RIGHT\n+                                                ? 'none'\n+                                                : 'auto'\n+                                    }}\n+                                    aria-labelledby='demo-radio-buttons-group-label'\n+                                    defaultValue={topic.selectedOptionId}\n+                                    name='radio-buttons-group'\n+                                    onChange={(event) =>\n+                                        radioTopicHandler(\n+                                            event,\n+                                            topic.topicId,\n+                                            SettingType.MultipleChoice\n+                                        )\n+                                    }\n+                                >\n+                                    {topic.options?.map((option) => {\n+                                        return (\n+                                            <FormControlLabel\n+                                                disabled={\n+                                                    topic.right ===\n+                                                        (Rights.READ ||\n+                                                            Rights.NO_RIGHT) &&\n+                                                    topic.selectedOptionId ===\n+                                                        option.id\n+                                                }\n+                                                key={option.id}\n+                                                value={option.id}\n+                                                control={<Radio />}\n+                                                label={option.value}\n+                                            />\n+                                        )\n+                                    })}\n+                                </RadioGroup>\n+                            </FormControl>\n+                            <TextField\n+                                key={topic.topicId}\n+                                defaultValue={topic.topicRemarks[0]?.remark}\n+                                sx={{ mt: 2 }}\n+                                disabled={\n+                                    topic.right ===\n+                                    (Rights.READ || Rights.NO_RIGHT)\n+                                }\n+                                onBlur={(event) =>\n+                                    commentTopicHandler(\n+                                        event,\n+                                        topic.topicId,\n+                                        SettingType.Comment\n+                                    )\n+                                }\n+                                id='outlined-multiline-static'\n+                                label='Comment (optional)'\n+                                multiline\n+                                rows={6}\n+                                fullWidth\n+                                placeholder={t('placeholder-comment-section')}\n+                            />\n+                        </Typography>\n+                    )\n+                }\n+                if (topic.questionType === SettingType.Comment) {\n+                    return (\n+                        <Typography\n+                            key={topic.topicId}\n+                            fontSize={24}\n+                            fontWeight={400}\n+                            pt={3}\n+                        >\n+                            {topic.questionLabel}\n+                            <Grid item>\n+                                <Divider sx={{ margin: '10px 0' }} />\n+                            </Grid>\n+                            <TextField\n+                                key={topic.topicId}\n+                                defaultValue={topic.topicRemarks[0]?.remark}\n+                                sx={{ mt: 2 }}\n+                                disabled={\n+                                    topic.right ===\n+                                    (Rights.READ || Rights.NO_RIGHT)\n+                                }\n+                                onBlur={(event) =>\n+                                    commentTopicHandler(\n+                                        event,\n+                                        topic.topicId,\n+                                        SettingType.Comment\n+                                    )\n+                                }\n+                                id='outlined-multiline-static'\n+                                label='Comment'\n+                                multiline\n+                                rows={6}\n+                                fullWidth\n+                                placeholder={t('placeholder-comment-section')}\n+                            />\n+                        </Typography>\n+                    )\n+                }\n+                return null\n+            })}\n+        </>\n+    )\n+}\n+\n+export default GeneralPageTopics",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745036183",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Pages/General.tsx",
//         "line": null,
//         "comment": "Remember the Nullable type ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,42 @@\n+import { FC, useEffect, useState } from 'react'\n+\n+import { getOneToOneMeetingSection, Section } from '@/services/one-to-one'\n+import { Typography } from '@mui/material'\n+\n+import { GeneralPageResponse } from '../../../services/topics/types'\n+import GeneralPageTopics from '../PageTopics/GeneraPageTopics'\n+import SectionSkeleton from '../skeleton-loaders/SectionSkeleton'\n+import useMeeting from '../useMeeting'\n+\n+type Props = {\n+    oneToOneId: string | null",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745036624",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/ShowAvatar.tsx",
//         "line": null,
//         "comment": "Only the parent (Box) needs key ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,76 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const ShowAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (\n+                userDetails.map((user: UserInfo, index) => {\n+                    return (\n+                        <Box key={user.userId}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745037890",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/ShowAvatar.tsx",
//         "line": null,
//         "comment": "Please refactor this. It's impossible to read this component",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,76 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const ShowAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (\n+                userDetails.map((user: UserInfo, index) => {\n+                    return (\n+                        <Box key={user.userId}>\n+                            {user.ownerAvatar !== undefined ? (\n+                                <Avatar\n+                                    key={user.userId}\n+                                    sx={{\n+                                        marginLeft: index > 0 ? '-8px' : '',\n+                                        zIndex: 100 - 1\n+                                    }}\n+                                    src={user?.ownerAvatar}\n+                                />\n+                            ) : (\n+                                <Avatar",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745038269",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/ShowAvatar.tsx",
//         "line": null,
//         "comment": "We don't name Components like we name a function. Name it for what it is like EmployeeAvatar or something. What makes the most sense ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,76 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const ShowAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (\n+                userDetails.map((user: UserInfo, index) => {\n+                    return (\n+                        <Box key={user.userId}>\n+                            {user.ownerAvatar !== undefined ? (\n+                                <Avatar\n+                                    key={user.userId}\n+                                    sx={{\n+                                        marginLeft: index > 0 ? '-8px' : '',\n+                                        zIndex: 100 - 1\n+                                    }}\n+                                    src={user?.ownerAvatar}\n+                                />\n+                            ) : (\n+                                <Avatar\n+                                    src={user.ownerAvatar}\n+                                    key={user.userId}\n+                                    sx={{\n+                                        zIndex: 100\n+                                    }}\n+                                >\n+                                    <StyledAvatar key={user.userId}>\n+                                        {user.ownerNameInitials}\n+                                    </StyledAvatar>\n+                                </Avatar>\n+                            )}\n+                        </Box>\n+                    )\n+                })\n+            ) : (\n+                <FlexBox>\n+                    <Skeleton height={40} width={40} variant='circular' />\n+                    <Skeleton\n+                        height={40}\n+                        sx={{ ml: '-8px' }}\n+                        width={40}\n+                        variant='circular'\n+                    />\n+                </FlexBox>\n+            )}\n+            <FlexBox alignItems='center'>\n+                <Divider\n+                    sx={{ marginLeft: 2 }}\n+                    orientation='vertical'\n+                    flexItem\n+                />\n+                <Typography ml={1} color='GrayText'>\n+                    {t('saved')}\n+                    {timestamp}\n+                </Typography>\n+            </FlexBox>\n+        </FlexBox>\n+    )\n+}\n+\n+export default ShowAvatar",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745039348",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/useMeeting.tsx",
//         "line": null,
//         "comment": "Weird name. handleChangeGeneralPage? ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,119 @@\n+import { useContext, useMemo } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import dayjs from 'dayjs'\n+\n+import {\n+    changeMeetingState,\n+    updateGeneralPageSection\n+} from '@/services/one-to-one'\n+import { MeetingStateConstants, SettingType } from '@/services/topics'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n+\n+import { MeetingContext } from './MeetingProvider'\n+\n+const useMeeting = () => {\n+    const {\n+        meeting,\n+        setMeeting,\n+        oneToOneId,\n+        setStep,\n+        step,\n+        sections,\n+        loading,\n+        setLoading,\n+        userData,\n+        timestamp,\n+        setTimeStamp,\n+        availableActions,\n+        setAvailableActions\n+    } = useContext(MeetingContext)\n+\n+    const { createSnack } = useSnackbar()\n+\n+    const { t } = useTranslation('meeting')\n+\n+    const generalPageRequest = (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745040802",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/useMeeting.tsx",
//         "line": null,
//         "comment": "Please continue using match :D ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,119 @@\n+import { useContext, useMemo } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import dayjs from 'dayjs'\n+\n+import {\n+    changeMeetingState,\n+    updateGeneralPageSection\n+} from '@/services/one-to-one'\n+import { MeetingStateConstants, SettingType } from '@/services/topics'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n+\n+import { MeetingContext } from './MeetingProvider'\n+\n+const useMeeting = () => {\n+    const {\n+        meeting,\n+        setMeeting,\n+        oneToOneId,\n+        setStep,\n+        step,\n+        sections,\n+        loading,\n+        setLoading,\n+        userData,\n+        timestamp,\n+        setTimeStamp,\n+        availableActions,\n+        setAvailableActions\n+    } = useContext(MeetingContext)\n+\n+    const { createSnack } = useSnackbar()\n+\n+    const { t } = useTranslation('meeting')\n+\n+    const generalPageRequest = (\n+        topicType: SettingType,\n+        enteredData: string,\n+        topicId: string\n+    ) => {\n+        updateGeneralPageSection(\n+            oneToOneId || '',\n+            sections[step].sectionId,\n+            topicId,\n+            enteredData,\n+            topicType\n+        )\n+            .then(() => {\n+                setTimeStamp(dayjs().format('HH:mm'))\n+                createSnack({ alert: { severity: 'success' } })(t('saved '))\n+            })\n+            .catch(() => {\n+                createSnack({ alert: { severity: 'error' } })(t('error'))\n+            })\n+    }\n+\n+    const handleLoading = (status: boolean) => {\n+        setLoading(status)\n+    }\n+\n+    const handleMeetingStateChange = (\n+        oneToOneId: string,\n+        reqState: MeetingStateConstants\n+    ) => {\n+        changeMeetingState(oneToOneId, reqState)\n+            .then(() => {\n+                let msg = ''\n+                let nextAvalableAction = 0\n+                switch (reqState) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745044696",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/services/one-to-one/service.ts",
//         "line": null,
//         "comment": "BASE_URL more fitting? :) ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -7,12 +7,15 @@ import { getEmployeeData } from '../employee'\n import { EmployeeData } from '../employee/types'\n import { StandardField } from '../employee/utils'\n import { getScaleByGuids } from '../mono/scales'\n+import { SettingType } from '../topics'\n import {\n     EmployeeOneToOneResponse,\n     OneToOneResponse,\n     StartOneToOneResponse\n } from './types'\n \n+const mainLink = '/onetooneservice/v2/onetoones/'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745047416",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/services/topics/types.ts",
//         "line": 55,
//         "comment": "Does this belong in topics service? ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -51,3 +51,127 @@ export const isGeneral = (section: SectionById): section is General =>\n     section.type === 1\n export const isGoal = (section: SectionById): section is Goal =>\n     section.type === 3\n+\n+/*******************************one to one meeting types*************************************/",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1745048837",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": null,
//         "comment": "cant use useParam() becaus onrToOneId is not in path(/:oneToOneId) but is query param(?oneToOneId=' ')",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,170 @@\n+import { FC, useEffect, useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useSearchParams } from 'react-router-dom'\n+\n+import AlertDialog from '@/Components/AlertDialog'\n+import { MeetingStateConstants } from '@/services/topics'\n+import { DialogState, getClosedState, getOpenState } from '@/types/dialog'\n+import { Layout } from '@catalystone/react-core-ui'\n+import { ButtonProps } from '@catalystone/react-core-ui/dist/Layout/TopSection/Buttons'\n+import { Box } from '@mui/system'\n+\n+import MeetingButtons from './MeetingButtons'\n+import MeetingProvider from './MeetingProvider'\n+import PageHandler from './PageHandler'\n+import ShowAvatar from './ShowAvatar'\n+import useMeeting from './useMeeting'\n+\n+const MeetingDetails: FC = () => {\n+    const {\n+        meeting,\n+        setStep,\n+        step,\n+        sections,\n+        loading,\n+        userData,\n+        handleMeetingStateChange,\n+        availableActions\n+    } = useMeeting()\n+\n+    const [sectionSteps, setSectionSteps] = useState<any[]>([])\n+\n+    const [searchParams] = useSearchParams()\n+    const oneToOneId = searchParams.get('oneToOneId')",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1749578987",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,170 @@\n+import { FC, useEffect, useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useSearchParams } from 'react-router-dom'\n+\n+import AlertDialog from '@/Components/AlertDialog'\n+import { MeetingStateConstants } from '@/services/topics'\n+import { DialogState, getClosedState, getOpenState } from '@/types/dialog'\n+import { Layout } from '@catalystone/react-core-ui'\n+import { ButtonProps } from '@catalystone/react-core-ui/dist/Layout/TopSection/Buttons'\n+import { Box } from '@mui/system'\n+\n+import MeetingButtons from './MeetingButtons'\n+import MeetingProvider from './MeetingProvider'\n+import PageHandler from './PageHandler'\n+import ShowAvatar from './ShowAvatar'\n+import useMeeting from './useMeeting'\n+\n+const MeetingDetails: FC = () => {\n+    const {\n+        meeting,\n+        setStep,\n+        step,\n+        sections,\n+        loading,\n+        userData,\n+        handleMeetingStateChange,\n+        availableActions\n+    } = useMeeting()\n+\n+    const [sectionSteps, setSectionSteps] = useState<any[]>([])\n+\n+    const [searchParams] = useSearchParams()\n+    const oneToOneId = searchParams.get('oneToOneId')\n+    const reviewee = userData[0]",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1749579174",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": 41,
//         "comment": "done",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,170 @@\n+import { FC, useEffect, useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import { useSearchParams } from 'react-router-dom'\n+\n+import AlertDialog from '@/Components/AlertDialog'\n+import { MeetingStateConstants } from '@/services/topics'\n+import { DialogState, getClosedState, getOpenState } from '@/types/dialog'\n+import { Layout } from '@catalystone/react-core-ui'\n+import { ButtonProps } from '@catalystone/react-core-ui/dist/Layout/TopSection/Buttons'\n+import { Box } from '@mui/system'\n+\n+import MeetingButtons from './MeetingButtons'\n+import MeetingProvider from './MeetingProvider'\n+import PageHandler from './PageHandler'\n+import ShowAvatar from './ShowAvatar'\n+import useMeeting from './useMeeting'\n+\n+const MeetingDetails: FC = () => {\n+    const {\n+        meeting,\n+        setStep,\n+        step,\n+        sections,\n+        loading,\n+        userData,\n+        handleMeetingStateChange,\n+        availableActions\n+    } = useMeeting()\n+\n+    const [sectionSteps, setSectionSteps] = useState<any[]>([])\n+\n+    const [searchParams] = useSearchParams()\n+    const oneToOneId = searchParams.get('oneToOneId')\n+    const reviewee = userData[0]\n+    const reviewer = userData[1]\n+    const [deleteDialogOpen, setDeleteDialogOpen] =\n+        useState<DialogState>(getClosedState())\n+    const [reopenDialogOpen, setReopenDialogOpen] =\n+        useState<DialogState>(getClosedState())\n+    const { t } = useTranslation('meeting')",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1749585639",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/GeneraPageTopics.tsx",
//         "line": null,
//         "comment": "hmmm",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,190 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { translateBBCodeToHtml } from '@/Components/RichTextEditor/util/translateBBCodeToHtml'\n+import { GeneralPageResponse, Rights, SettingType } from '@/services/topics'\n+import {\n+    Alert,\n+    AlertTitle,\n+    Divider,\n+    FormControl,\n+    FormControlLabel,\n+    Grid,\n+    Radio,\n+    RadioGroup,\n+    TextField,\n+    Typography\n+} from '@mui/material'\n+import { Stack } from '@mui/system'\n+\n+import useMeeting from '../useMeeting'\n+\n+type Props = {\n+    sectionData: GeneralPageResponse | null\n+}\n+\n+const GeneralPageTopics: FC<Props> = ({ sectionData }) => {\n+    const { generalPageRequest } = useMeeting()\n+\n+    const { t } = useTranslation('meeting')\n+    function radioTopicHandler(\n+        event: React.ChangeEvent<HTMLInputElement>,\n+        topicId: string,\n+        topicType: number\n+    ) {\n+        generalPageRequest(topicType, event.target.value, topicId)\n+    }\n+    function commentTopicHandler(\n+        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n+        topicId: string,\n+        topicType: number\n+    ) {\n+        generalPageRequest(topicType, event.target.value, topicId)\n+    }\n+\n+    return (\n+        <>\n+            <Stack\n+                sx={{\n+                    width: '100%',\n+                    pt: 3\n+                }}\n+            >\n+                <Alert severity='info'>\n+                    <AlertTitle>{t('general-meeting-not-started')}</AlertTitle>\n+                    {t('general-meeting-not-started-description')}\n+                </Alert>\n+            </Stack>\n+\n+            <Typography fontWeight={600} pt={3}>\n+                <Typography\n+                    dangerouslySetInnerHTML={{\n+                        __html: translateBBCodeToHtml(\n+                            sectionData?.description || '',\n+                            true\n+                        )\n+                    }}\n+                />\n+            </Typography>\n+\n+            {sectionData?.topics?.map((topic) => {\n+                if (topic.questionType === SettingType.MultipleChoice) {\n+                    return (\n+                        <Typography\n+                            key={topic.topicId}\n+                            fontSize={24}\n+                            fontWeight={400}\n+                            pt={3}\n+                        >\n+                            {topic.questionLabel}\n+                            <Grid item>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1750001774",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/useMeeting.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,119 @@\n+import { useContext, useMemo } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import dayjs from 'dayjs'\n+\n+import {\n+    changeMeetingState,\n+    updateGeneralPageSection\n+} from '@/services/one-to-one'\n+import { MeetingStateConstants, SettingType } from '@/services/topics'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n+\n+import { MeetingContext } from './MeetingProvider'\n+\n+const useMeeting = () => {\n+    const {\n+        meeting,\n+        setMeeting,\n+        oneToOneId,\n+        setStep,\n+        step,\n+        sections,\n+        loading,\n+        setLoading,\n+        userData,\n+        timestamp,\n+        setTimeStamp,\n+        availableActions,\n+        setAvailableActions\n+    } = useContext(MeetingContext)\n+\n+    const { createSnack } = useSnackbar()\n+\n+    const { t } = useTranslation('meeting')\n+\n+    const generalPageRequest = (\n+        topicType: SettingType,\n+        enteredData: string,\n+        topicId: string\n+    ) => {\n+        updateGeneralPageSection(\n+            oneToOneId || '',\n+            sections[step].sectionId,\n+            topicId,\n+            enteredData,\n+            topicType\n+        )\n+            .then(() => {\n+                setTimeStamp(dayjs().format('HH:mm'))\n+                createSnack({ alert: { severity: 'success' } })(t('saved '))\n+            })\n+            .catch(() => {\n+                createSnack({ alert: { severity: 'error' } })(t('error'))\n+            })\n+    }\n+\n+    const handleLoading = (status: boolean) => {\n+        setLoading(status)\n+    }\n+\n+    const handleMeetingStateChange = (\n+        oneToOneId: string,\n+        reqState: MeetingStateConstants\n+    ) => {\n+        changeMeetingState(oneToOneId, reqState)\n+            .then(() => {\n+                let msg = ''\n+                let nextAvalableAction = 0\n+                switch (reqState) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1750031889",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/useMeeting.tsx",
//         "line": null,
//         "comment": ":P",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,119 @@\n+import { useContext, useMemo } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import dayjs from 'dayjs'\n+\n+import {\n+    changeMeetingState,\n+    updateGeneralPageSection\n+} from '@/services/one-to-one'\n+import { MeetingStateConstants, SettingType } from '@/services/topics'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n+\n+import { MeetingContext } from './MeetingProvider'\n+\n+const useMeeting = () => {\n+    const {\n+        meeting,\n+        setMeeting,\n+        oneToOneId,\n+        setStep,\n+        step,\n+        sections,\n+        loading,\n+        setLoading,\n+        userData,\n+        timestamp,\n+        setTimeStamp,\n+        availableActions,\n+        setAvailableActions\n+    } = useContext(MeetingContext)\n+\n+    const { createSnack } = useSnackbar()\n+\n+    const { t } = useTranslation('meeting')\n+\n+    const generalPageRequest = (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1750032465",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/Providers/OneToOneProvider/useOneToOne.ts",
//         "line": null,
//         "comment": "This would be a great case for functions. Nested if else and stuff is top tier unreadable stuff. Make a utils file for example and shorten this to \r\n\r\nif (isNonPrepared(workflowType) && hasLength(1, selectedPeopleIds)) {\r\n  navigate(`/one-to-one-meeting?oneToOneId=${response[0].oneToOneId}&from=1`)\r\n  return // prefer opting out over else\r\n}\r\n\r\nnavigate('/')",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -33,9 +35,16 @@ const useOneToOne = () => {\n                 })\n             )\n \n-            // Go to the one-to-one page if only one is created\n-            if (response.length === 1) {\n-                return navigate(`/${response[0].ontToOneId}`)\n+            if (workflowType === WorkflowType.NonPrepared) {\n+                if (selectedPeopleIds.length > 1) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1750183489",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/Router/Router.tsx",
//         "line": 27,
//         "comment": "Maybe call this OneToOneMeeting? ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -24,7 +24,7 @@ const AdministrationLandingPage = lazy(\n )\n const TemplateDetails = lazy(() => import('../features/template-details'))\n const EmployeeDetails = lazy(() => import('../features/employee-details'))\n-\n+const MeetingDetails = lazy(() => import('../features/one-to-one-meeting'))",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1750183954",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": 10,
//         "comment": "Not from system :) ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1750184472",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": null,
//         "comment": "Avoid getting component from other features. This is now effectively a little bit of spagetti :D If you need something like this, extract the original to @/Components and update the use of your own and the original",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1750186245",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": null,
//         "comment": "Generally advice using isEmpty whenever you can",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const EmployeeAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1750186991",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": null,
//         "comment": "It's recommended to use as low zIndex numbers as possible. If you can in this case, 0 and 1, or 1, 2 should probably be enough",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const EmployeeAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (\n+                userDetails.map((user: UserInfo, index) => {\n+                    return (\n+                        <Box key={user.userId}>\n+                            {user.ownerAvatar !== undefined ? (\n+                                <Avatar\n+                                    sx={{\n+                                        marginLeft: index > 0 ? '-8px' : '',\n+                                        zIndex: 100 - 1",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1750189047",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": null,
//         "comment": "Use falsy on undefined\r\n{!user.ownerAvatar ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const EmployeeAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (\n+                userDetails.map((user: UserInfo, index) => {\n+                    return (\n+                        <Box key={user.userId}>\n+                            {user.ownerAvatar !== undefined ? (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1750189804",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": null,
//         "comment": "Just be aware that -8px is a non-responsive thing. It causes issues pretty fast ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const EmployeeAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (\n+                userDetails.map((user: UserInfo, index) => {\n+                    return (\n+                        <Box key={user.userId}>\n+                            {user.ownerAvatar !== undefined ? (\n+                                <Avatar\n+                                    sx={{\n+                                        marginLeft: index > 0 ? '-8px' : '',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1750190321",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": 28,
//         "comment": "Why not use the Avatar from shared lib I'm using in the oto overview? ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const EmployeeAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (\n+                userDetails.map((user: UserInfo, index) => {\n+                    return (\n+                        <Box key={user.userId}>\n+                            {user.ownerAvatar !== undefined ? (\n+                                <Avatar\n+                                    sx={{\n+                                        marginLeft: index > 0 ? '-8px' : '',\n+                                        zIndex: 100 - 1\n+                                    }}\n+                                    src={user?.ownerAvatar}\n+                                />\n+                            ) : (\n+                                <Avatar",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1750191157",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": 51,
//         "comment": "You have to clean up these ternaries. Make small components for example.",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const EmployeeAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (\n+                userDetails.map((user: UserInfo, index) => {\n+                    return (\n+                        <Box key={user.userId}>\n+                            {user.ownerAvatar !== undefined ? (\n+                                <Avatar\n+                                    sx={{\n+                                        marginLeft: index > 0 ? '-8px' : '',\n+                                        zIndex: 100 - 1\n+                                    }}\n+                                    src={user?.ownerAvatar}\n+                                />\n+                            ) : (\n+                                <Avatar\n+                                    src={user.ownerAvatar}\n+                                    sx={{\n+                                        zIndex: 100\n+                                    }}\n+                                >\n+                                    <StyledAvatar key={user.userId}>\n+                                        {user.ownerNameInitials}\n+                                    </StyledAvatar>\n+                                </Avatar>\n+                            )}\n+                        </Box>\n+                    )\n+                })\n+            ) : (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1750191694",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": null,
//         "comment": "i know but have to adhere with designs :P",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const EmployeeAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (\n+                userDetails.map((user: UserInfo, index) => {\n+                    return (\n+                        <Box key={user.userId}>\n+                            {user.ownerAvatar !== undefined ? (\n+                                <Avatar\n+                                    sx={{\n+                                        marginLeft: index > 0 ? '-8px' : '',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1751205770",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/Router/Router.tsx",
//         "line": 27,
//         "comment": "already inside one to one so dont need to tell again onetoonemeeting. Just like we did for templates\r\n",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -24,7 +24,7 @@ const AdministrationLandingPage = lazy(\n )\n const TemplateDetails = lazy(() => import('../features/template-details'))\n const EmployeeDetails = lazy(() => import('../features/employee-details'))\n-\n+const MeetingDetails = lazy(() => import('../features/one-to-one-meeting'))",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1751267409",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/Providers/OneToOneProvider/useOneToOne.ts",
//         "line": null,
//         "comment": "done",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -33,9 +35,16 @@ const useOneToOne = () => {\n                 })\n             )\n \n-            // Go to the one-to-one page if only one is created\n-            if (response.length === 1) {\n-                return navigate(`/${response[0].ontToOneId}`)\n+            if (workflowType === WorkflowType.NonPrepared) {\n+                if (selectedPeopleIds.length > 1) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1751273162",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const EmployeeAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1751277883",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": 28,
//         "comment": "Those does not look good, many bright colors!!",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const EmployeeAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (\n+                userDetails.map((user: UserInfo, index) => {\n+                    return (\n+                        <Box key={user.userId}>\n+                            {user.ownerAvatar !== undefined ? (\n+                                <Avatar\n+                                    sx={{\n+                                        marginLeft: index > 0 ? '-8px' : '',\n+                                        zIndex: 100 - 1\n+                                    }}\n+                                    src={user?.ownerAvatar}\n+                                />\n+                            ) : (\n+                                <Avatar",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1751278791",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": 28,
//         "comment": "Fix the colors? It is supposed to function as the standard for the company so would be nice to use the shared one ",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const EmployeeAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (\n+                userDetails.map((user: UserInfo, index) => {\n+                    return (\n+                        <Box key={user.userId}>\n+                            {user.ownerAvatar !== undefined ? (\n+                                <Avatar\n+                                    sx={{\n+                                        marginLeft: index > 0 ? '-8px' : '',\n+                                        zIndex: 100 - 1\n+                                    }}\n+                                    src={user?.ownerAvatar}\n+                                />\n+                            ) : (\n+                                <Avatar",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1751653173",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": null,
//         "comment": "Not if designs are messed up and destroys ui if they create a smaller window. Make sure to test the cases. Figma is not final word",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const EmployeeAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (\n+                userDetails.map((user: UserInfo, index) => {\n+                    return (\n+                        <Box key={user.userId}>\n+                            {user.ownerAvatar !== undefined ? (\n+                                <Avatar\n+                                    sx={{\n+                                        marginLeft: index > 0 ? '-8px' : '',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1751654456",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/todo-overview/styled.ts",
//         "line": null,
//         "comment": "if theme is not being used remove",
//         "commitId": "8ecbd682bb1995f240a93e48eb6c50765722e07f",
//         "codeSnippet": "@@ -30,3 +30,8 @@ export const WarningIcon = styled(ErrorOutlineSharpIcon)(({ theme }) => ({\n     width: '20px',\n     marginLeft: '5px'\n }))\n+\n+export const AlignCenter = styled(Box)(({ theme }) => ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/133#discussion_r1753177632",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/locales/de-DE/one-to-one.json",
//         "line": null,
//         "comment": "haven't we decided not to use {{}} due to crowdin issue?",
//         "commitId": "8442d3f0e4ede293bd5ffd8e2196cb12b780a0b8",
//         "codeSnippet": "@@ -1,38 +1,41 @@\n {\n   \"search\": \"Search\",\n-  \"cancel\": \"Cancel\",\n-  \"next\": \"Next\",\n-  \"days-passed\": \"{{days}} days ago\",\n-  \"today\": \"Today\",\n   \"roles\": \"Roles\",\n   \"status\": \"Status\",\n-  \"start-meeting_one\": \"\",\n-  \"start-meeting_other\": \"\",\n   \"name\": \"Name\",\n   \"last-meeting\": \"Last completed\",\n-  \"one-to-one\": \"One to One\",\n+  \"meeting-count\": \"Number of meetings\",\n   \"one-to-one-title\": \"One to Ones\",\n+  \"one-to-one\": \"One to One\",\n   \"new-one-to-one\": \"New meeting\",\n   \"one-to-one-tab\": \"Meetings\",\n   \"todos-tab\": \"To-dos\",\n-  \"last-updated\": \"Last updated {{date}}\",\n+  \"cancel\": \"Cancel\",\n+  \"next\": \"Next\",\n+  \"last-updated\": \"Last updated:\",\n   \"meeting-without-preperation\": \"Meeting without preparations\",\n   \"meeting-with-preperation\": \"Meeting with preparations\",\n-  \"select-template\": \"\",\n+  \"select-template\": \"Select the template for this One to One Meeting\",\n   \"close\": \"Close\",\n   \"submit\": \"Submit\",\n-  \"meeting-count\": \"Number of meetings\",\n   \"start-meeting\": \"Start {{count}} new meeting(s)\",\n   \"todos-title\": \"Todos\",\n   \"#complete\": \"Complete\",\n+  \"#pending-status\": \"Pending\",\n+  \"#completed-status\": \"Completed\",\n   \"#pending\": \"Pending ({{count}})\",\n   \"meeting-without-preparations\": \"Meeting without preparations\",\n   \"meeting-with-preparations\": \"Meeting with preparations\",\n   \"#completed\": \"Completed\",\n-  \"#manager\": \"Manager\",\n-  \"#hr-manager\": \"HR manager\",\n-  \"#hr-employees\": \"HR employees\",\n-  \"#other\": \"Other\",\n-  \"#deleted\": \"Deleted\",\n-  \"#subordinate\": \"My employees\"\n+  \"#manager-role\": \"My manager\",\n+  \"#hr-manager-role\": \"My HR manager\",\n+  \"#hr-employees-role\": \"Employees I am HR for\",\n+  \"#subordinate-role\": \"My employees\",\n+  \"#other-role\": \"Other\",\n+  \"#deleted-role\": \"Former employees\",\n+  \"days-passed\": \"{{days}} days ago\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/135#discussion_r1758521185",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "public/locales/en-US/one-to-one.json",
//         "line": null,
//         "comment": "here too",
//         "commitId": "8442d3f0e4ede293bd5ffd8e2196cb12b780a0b8",
//         "codeSnippet": "@@ -1,38 +1,41 @@\n {\n-  \"search\": \"Search\",\n-  \"cancel\": \"Cancel\",\n-  \"next\": \"Next\",\n-  \"days-passed\": \"{{days}} days ago\",\n-  \"today\": \"Today\",\n-  \"roles\": \"Roles\",\n-  \"status\": \"Status\",\n-  \"start-meeting_one\": \"\",\n-  \"start-meeting_other\": \"\",\n-  \"name\": \"Name\",\n-  \"last-meeting\": \"Last completed\",\n-  \"one-to-one\": \"One to One\",\n-  \"one-to-one-title\": \"One to Ones\",\n-  \"new-one-to-one\": \"New meeting\",\n-  \"one-to-one-tab\": \"Meetings\",\n-  \"todos-tab\": \"To-dos\",\n-  \"last-updated\": \"Last updated {{date}}\",\n-  \"meeting-without-preperation\": \"Meeting without preparations\",\n-  \"meeting-with-preperation\": \"Meeting with preparations\",\n-  \"select-template\": \"\",\n-  \"close\": \"Close\",\n-  \"submit\": \"Submit\",\n-  \"meeting-count\": \"Number of meetings\",\n-  \"start-meeting\": \"Start {{count}} new meeting(s)\",\n-  \"todos-title\": \"Todos\",\n-  \"#complete\": \"Complete\",\n-  \"#pending\": \"Pending ({{count}})\",\n-  \"meeting-without-preparations\": \"Meeting without preparations\",\n-  \"meeting-with-preparations\": \"Meeting with preparations\",\n-  \"#completed\": \"Completed\",\n-  \"#manager\": \"Manager\",\n-  \"#hr-manager\": \"HR manager\",\n-  \"#hr-employees\": \"HR employees\",\n-  \"#other\": \"Other\",\n-  \"#deleted\": \"Deleted\",\n-  \"#subordinate\": \"My employees\"\n+    \"search\": \"Search\",\n+    \"roles\": \"Roles\",\n+    \"status\": \"Status\",\n+    \"name\": \"Name\",\n+    \"last-meeting\": \"Last completed\",\n+    \"meeting-count\": \"Number of meetings\",\n+    \"one-to-one-title\": \"One to Ones\",\n+    \"one-to-one\": \"One to One\",\n+    \"new-one-to-one\": \"New meeting\",\n+    \"one-to-one-tab\": \"Meetings\",\n+    \"todos-tab\": \"To-dos\",\n+    \"cancel\": \"Cancel\",\n+    \"next\": \"Next\",\n+    \"last-updated\": \"Last updated:\",\n+    \"meeting-without-preperation\": \"Meeting without preparations\",\n+    \"meeting-with-preperation\": \"Meeting with preparations\",\n+    \"select-template\": \"Select the template for this One to One Meeting\",\n+    \"close\": \"Close\",\n+    \"submit\": \"Submit\",\n+    \"start-meeting\": \"Start {{count}} new meeting(s)\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/135#discussion_r1758521760",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one/StatusReview/StatusReview.tsx",
//         "line": null,
//         "comment": "Try to avoid this.  This would be solved \r\n\r\nconst statusReviewer = encodeURIComponent(\r\n  mode === StatusReviewModes.WITH_EMPLOYEE\r\n    ? `catalystone.statusreviewer.StatusReviewDashboard?mode=${mode}&profileId=${employee}`\r\n    : `catalystone.statusreviewer.StatusReviewDashboard?mode=${mode}`\r\n)\r\n\r\n",
//         "commitId": "6302ec665b276dda6057bee6ddb19feab729d90d",
//         "codeSnippet": "@@ -0,0 +1,130 @@\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import PopupState, { bindMenu, bindTrigger } from 'material-ui-popup-state'\n+\n+import useOneToOne from '@/Providers/OneToOneProvider/useOneToOne'\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined'\n+import { Box } from '@mui/system'\n+\n+import {\n+    CustomMenuItem,\n+    CustomMenuItemText,\n+    OuterContainer,\n+    SrText,\n+    StyledButton,\n+    StyledMenu\n+} from './styled'\n+\n+enum StatusReviewModes {\n+    MYSELF = 1,\n+    WITH_EMPLOYEE = 2,\n+    MY_EMPLOYEES = 3\n+}\n+\n+type Props = {\n+    employee?: string\n+    fromDrillDown?: boolean\n+}\n+\n+const StatusReview: FC<Props> = ({ employee = '', fromDrillDown = false }) => {\n+    const { t } = useTranslation('one-to-one')\n+    const { subordinates, srSupportEnabled } = useOneToOne()\n+    const [myEmployee, setMyEmployee] = useState<boolean>(false)\n+\n+    useEffect(() => {\n+        setMyEmployee(subordinates.includes(employee))\n+    })\n+\n+    const navigateToStatusReviewer = (mode: number) => {\n+        let statusReviewer = '/'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/137#discussion_r1760709269",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one/StatusReview/StatusReview.tsx",
//         "line": null,
//         "comment": "Why are you rendering an empty div? Just do the !fromDrillDown && ... ",
//         "commitId": "6302ec665b276dda6057bee6ddb19feab729d90d",
//         "codeSnippet": "@@ -0,0 +1,130 @@\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import PopupState, { bindMenu, bindTrigger } from 'material-ui-popup-state'\n+\n+import useOneToOne from '@/Providers/OneToOneProvider/useOneToOne'\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined'\n+import { Box } from '@mui/system'\n+\n+import {\n+    CustomMenuItem,\n+    CustomMenuItemText,\n+    OuterContainer,\n+    SrText,\n+    StyledButton,\n+    StyledMenu\n+} from './styled'\n+\n+enum StatusReviewModes {\n+    MYSELF = 1,\n+    WITH_EMPLOYEE = 2,\n+    MY_EMPLOYEES = 3\n+}\n+\n+type Props = {\n+    employee?: string\n+    fromDrillDown?: boolean\n+}\n+\n+const StatusReview: FC<Props> = ({ employee = '', fromDrillDown = false }) => {\n+    const { t } = useTranslation('one-to-one')\n+    const { subordinates, srSupportEnabled } = useOneToOne()\n+    const [myEmployee, setMyEmployee] = useState<boolean>(false)\n+\n+    useEffect(() => {\n+        setMyEmployee(subordinates.includes(employee))\n+    })\n+\n+    const navigateToStatusReviewer = (mode: number) => {\n+        let statusReviewer = '/'\n+        if (mode === StatusReviewModes.WITH_EMPLOYEE) {\n+            statusReviewer = encodeURIComponent(\n+                `catalystone.statusreviewer.StatusReviewDashboard?mode=${mode}&profileId=${employee}`\n+            )\n+        } else {\n+            statusReviewer = encodeURIComponent(\n+                `catalystone.statusreviewer.StatusReviewDashboard?mode=${mode}`\n+            )\n+        }\n+        const routeUrl = `servlet?t=${encodeURIComponent(\n+            `catalystone.microFrontEnd.Router?redirectURL=${statusReviewer}`\n+        )}`\n+        singleSpaNavigate(routeUrl)\n+    }\n+\n+    return (\n+        <PopupState variant='popover' popupId='status-popup-menu'>\n+            {(popupState) => (\n+                <>\n+                    <StyledButton\n+                        style={{\n+                            fontSize: '18px'\n+                        }}\n+                        endIcon={<ExpandMoreIcon />}\n+                        {...bindTrigger(popupState)}\n+                    >\n+                        {t('status review')}\n+                    </StyledButton>\n+                    <StyledMenu\n+                        anchorOrigin={{\n+                            vertical: 'bottom',\n+                            horizontal: 'left'\n+                        }}\n+                        transformOrigin={{\n+                            vertical: 'top',\n+                            horizontal: 'right'\n+                        }}\n+                        {...bindMenu(popupState)}\n+                    >\n+                        <OuterContainer>\n+                            {!fromDrillDown && (\n+                                <SrText\n+                                    onClick={() =>\n+                                        navigateToStatusReviewer(\n+                                            StatusReviewModes.MYSELF\n+                                        )\n+                                    }\n+                                >\n+                                    {t('my-prior-sr')}\n+                                </SrText>\n+                            )}\n+                            {(\n+                                fromDrillDown\n+                                    ? myEmployee && srSupportEnabled\n+                                    : subordinates.length > 0\n+                            ) ? (\n+                                <SrText\n+                                    onClick={() =>\n+                                        navigateToStatusReviewer(\n+                                            fromDrillDown\n+                                                ? StatusReviewModes.WITH_EMPLOYEE\n+                                                : StatusReviewModes.MY_EMPLOYEES\n+                                        )\n+                                    }\n+                                >\n+                                    {t('prior-sr')}\n+                                </SrText>\n+                            ) : (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/137#discussion_r1760710278",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one/StatusReview/styled.ts",
//         "line": 50,
//         "comment": "What's up with this? anchorEl ? ",
//         "commitId": "6302ec665b276dda6057bee6ddb19feab729d90d",
//         "codeSnippet": "@@ -0,0 +1,51 @@\n+import { Box, Button, Menu, MenuItem, styled } from '@mui/material'\n+\n+export const CustomMenuItem = styled(MenuItem)({\n+    display: 'flex',\n+    padding: '6px 16px',\n+    alignItems: 'flex-start',\n+    alignSelf: 'stretch',\n+    borderRadius: '4px',\n+    background: '#EDF9FC',\n+    cursor: 'default',\n+    pointerEvents: 'none'\n+})\n+\n+export const CustomMenuItemText = styled(Box)(({ theme }) => ({\n+    display: 'block',\n+    width: '276px',\n+    fontSize: '14px',\n+    letterSpacing: '0.17px',\n+    color: theme.palette.primary.dark,\n+    wordWrap: 'break-word',\n+    overflowWrap: 'break-word',\n+    whiteSpace: 'normal'\n+}))\n+\n+export const SrText = styled(MenuItem)({\n+    letterSpacing: '0.17px'\n+})\n+\n+export const Text = styled(Box)({\n+    fontSize: '16px',\n+    fontStyle: 'normal',\n+    fontWeight: '400',\n+    lineHeight: '150%',\n+    letterSpacing: '0.17px'\n+})\n+\n+export const OuterContainer = styled(Box)({\n+    padding: '0px 4px',\n+    borderRadius: '4px'\n+})\n+\n+export const StyledButton = styled(Button)({\n+    fontWeight: 400,\n+    marginLeft: '-17px',\n+    marginRight: '-3px'\n+})\n+\n+export const StyledMenu = styled(Menu)({\n+    top: 2,\n+    left: 138",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/137#discussion_r1760711457",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one/StatusReview/styled.ts",
//         "line": 50,
//         "comment": "The component by default open menu at center bottom.\r\njust a hack to match designs.",
//         "commitId": "6302ec665b276dda6057bee6ddb19feab729d90d",
//         "codeSnippet": "@@ -0,0 +1,51 @@\n+import { Box, Button, Menu, MenuItem, styled } from '@mui/material'\n+\n+export const CustomMenuItem = styled(MenuItem)({\n+    display: 'flex',\n+    padding: '6px 16px',\n+    alignItems: 'flex-start',\n+    alignSelf: 'stretch',\n+    borderRadius: '4px',\n+    background: '#EDF9FC',\n+    cursor: 'default',\n+    pointerEvents: 'none'\n+})\n+\n+export const CustomMenuItemText = styled(Box)(({ theme }) => ({\n+    display: 'block',\n+    width: '276px',\n+    fontSize: '14px',\n+    letterSpacing: '0.17px',\n+    color: theme.palette.primary.dark,\n+    wordWrap: 'break-word',\n+    overflowWrap: 'break-word',\n+    whiteSpace: 'normal'\n+}))\n+\n+export const SrText = styled(MenuItem)({\n+    letterSpacing: '0.17px'\n+})\n+\n+export const Text = styled(Box)({\n+    fontSize: '16px',\n+    fontStyle: 'normal',\n+    fontWeight: '400',\n+    lineHeight: '150%',\n+    letterSpacing: '0.17px'\n+})\n+\n+export const OuterContainer = styled(Box)({\n+    padding: '0px 4px',\n+    borderRadius: '4px'\n+})\n+\n+export const StyledButton = styled(Button)({\n+    fontWeight: 400,\n+    marginLeft: '-17px',\n+    marginRight: '-3px'\n+})\n+\n+export const StyledMenu = styled(Menu)({\n+    top: 2,\n+    left: 138",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/137#discussion_r1760796659",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one/StatusReview/StatusReview.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "6302ec665b276dda6057bee6ddb19feab729d90d",
//         "codeSnippet": "@@ -0,0 +1,130 @@\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import PopupState, { bindMenu, bindTrigger } from 'material-ui-popup-state'\n+\n+import useOneToOne from '@/Providers/OneToOneProvider/useOneToOne'\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined'\n+import { Box } from '@mui/system'\n+\n+import {\n+    CustomMenuItem,\n+    CustomMenuItemText,\n+    OuterContainer,\n+    SrText,\n+    StyledButton,\n+    StyledMenu\n+} from './styled'\n+\n+enum StatusReviewModes {\n+    MYSELF = 1,\n+    WITH_EMPLOYEE = 2,\n+    MY_EMPLOYEES = 3\n+}\n+\n+type Props = {\n+    employee?: string\n+    fromDrillDown?: boolean\n+}\n+\n+const StatusReview: FC<Props> = ({ employee = '', fromDrillDown = false }) => {\n+    const { t } = useTranslation('one-to-one')\n+    const { subordinates, srSupportEnabled } = useOneToOne()\n+    const [myEmployee, setMyEmployee] = useState<boolean>(false)\n+\n+    useEffect(() => {\n+        setMyEmployee(subordinates.includes(employee))\n+    })\n+\n+    const navigateToStatusReviewer = (mode: number) => {\n+        let statusReviewer = '/'\n+        if (mode === StatusReviewModes.WITH_EMPLOYEE) {\n+            statusReviewer = encodeURIComponent(\n+                `catalystone.statusreviewer.StatusReviewDashboard?mode=${mode}&profileId=${employee}`\n+            )\n+        } else {\n+            statusReviewer = encodeURIComponent(\n+                `catalystone.statusreviewer.StatusReviewDashboard?mode=${mode}`\n+            )\n+        }\n+        const routeUrl = `servlet?t=${encodeURIComponent(\n+            `catalystone.microFrontEnd.Router?redirectURL=${statusReviewer}`\n+        )}`\n+        singleSpaNavigate(routeUrl)\n+    }\n+\n+    return (\n+        <PopupState variant='popover' popupId='status-popup-menu'>\n+            {(popupState) => (\n+                <>\n+                    <StyledButton\n+                        style={{\n+                            fontSize: '18px'\n+                        }}\n+                        endIcon={<ExpandMoreIcon />}\n+                        {...bindTrigger(popupState)}\n+                    >\n+                        {t('status review')}\n+                    </StyledButton>\n+                    <StyledMenu\n+                        anchorOrigin={{\n+                            vertical: 'bottom',\n+                            horizontal: 'left'\n+                        }}\n+                        transformOrigin={{\n+                            vertical: 'top',\n+                            horizontal: 'right'\n+                        }}\n+                        {...bindMenu(popupState)}\n+                    >\n+                        <OuterContainer>\n+                            {!fromDrillDown && (\n+                                <SrText\n+                                    onClick={() =>\n+                                        navigateToStatusReviewer(\n+                                            StatusReviewModes.MYSELF\n+                                        )\n+                                    }\n+                                >\n+                                    {t('my-prior-sr')}\n+                                </SrText>\n+                            )}\n+                            {(\n+                                fromDrillDown\n+                                    ? myEmployee && srSupportEnabled\n+                                    : subordinates.length > 0\n+                            ) ? (\n+                                <SrText\n+                                    onClick={() =>\n+                                        navigateToStatusReviewer(\n+                                            fromDrillDown\n+                                                ? StatusReviewModes.WITH_EMPLOYEE\n+                                                : StatusReviewModes.MY_EMPLOYEES\n+                                        )\n+                                    }\n+                                >\n+                                    {t('prior-sr')}\n+                                </SrText>\n+                            ) : (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/137#discussion_r1760796867",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one/StatusReview/StatusReview.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "6302ec665b276dda6057bee6ddb19feab729d90d",
//         "codeSnippet": "@@ -0,0 +1,130 @@\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import PopupState, { bindMenu, bindTrigger } from 'material-ui-popup-state'\n+\n+import useOneToOne from '@/Providers/OneToOneProvider/useOneToOne'\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined'\n+import { Box } from '@mui/system'\n+\n+import {\n+    CustomMenuItem,\n+    CustomMenuItemText,\n+    OuterContainer,\n+    SrText,\n+    StyledButton,\n+    StyledMenu\n+} from './styled'\n+\n+enum StatusReviewModes {\n+    MYSELF = 1,\n+    WITH_EMPLOYEE = 2,\n+    MY_EMPLOYEES = 3\n+}\n+\n+type Props = {\n+    employee?: string\n+    fromDrillDown?: boolean\n+}\n+\n+const StatusReview: FC<Props> = ({ employee = '', fromDrillDown = false }) => {\n+    const { t } = useTranslation('one-to-one')\n+    const { subordinates, srSupportEnabled } = useOneToOne()\n+    const [myEmployee, setMyEmployee] = useState<boolean>(false)\n+\n+    useEffect(() => {\n+        setMyEmployee(subordinates.includes(employee))\n+    })\n+\n+    const navigateToStatusReviewer = (mode: number) => {\n+        let statusReviewer = '/'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/137#discussion_r1760803231",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one/StatusReview/styled.ts",
//         "line": 50,
//         "comment": "Gotta do it right. https://mui.com/material-ui/react-menu/",
//         "commitId": "6302ec665b276dda6057bee6ddb19feab729d90d",
//         "codeSnippet": "@@ -0,0 +1,51 @@\n+import { Box, Button, Menu, MenuItem, styled } from '@mui/material'\n+\n+export const CustomMenuItem = styled(MenuItem)({\n+    display: 'flex',\n+    padding: '6px 16px',\n+    alignItems: 'flex-start',\n+    alignSelf: 'stretch',\n+    borderRadius: '4px',\n+    background: '#EDF9FC',\n+    cursor: 'default',\n+    pointerEvents: 'none'\n+})\n+\n+export const CustomMenuItemText = styled(Box)(({ theme }) => ({\n+    display: 'block',\n+    width: '276px',\n+    fontSize: '14px',\n+    letterSpacing: '0.17px',\n+    color: theme.palette.primary.dark,\n+    wordWrap: 'break-word',\n+    overflowWrap: 'break-word',\n+    whiteSpace: 'normal'\n+}))\n+\n+export const SrText = styled(MenuItem)({\n+    letterSpacing: '0.17px'\n+})\n+\n+export const Text = styled(Box)({\n+    fontSize: '16px',\n+    fontStyle: 'normal',\n+    fontWeight: '400',\n+    lineHeight: '150%',\n+    letterSpacing: '0.17px'\n+})\n+\n+export const OuterContainer = styled(Box)({\n+    padding: '0px 4px',\n+    borderRadius: '4px'\n+})\n+\n+export const StyledButton = styled(Button)({\n+    fontWeight: 400,\n+    marginLeft: '-17px',\n+    marginRight: '-3px'\n+})\n+\n+export const StyledMenu = styled(Menu)({\n+    top: 2,\n+    left: 138",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/137#discussion_r1760839445",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one/StatusReview/StatusReview.tsx",
//         "line": null,
//         "comment": "kindly use switch here! lots of checks",
//         "commitId": "f476683145090ddc83ed1f2f469989c08bfef5fc",
//         "codeSnippet": "@@ -38,14 +40,25 @@ const StatusReview: FC<Props> = ({ employee = '', fromDrillDown = false }) => {\n     })\n \n     const navigateToStatusReviewer = (mode: number) => {\n-        const statusReviewer =\n-            mode === StatusReviewModes.WITH_EMPLOYEE\n-                ? encodeURIComponent(\n-                      `catalystone.statusreviewer.StatusReviewDashboard?mode=${mode}&profileId=${employee}`\n-                  )\n-                : encodeURIComponent(\n-                      `catalystone.statusreviewer.StatusReviewDashboard?mode=${mode}`\n-                  )\n+        let event\n+        let statusReviewer = encodeURIComponent(\n+            `catalystone.statusreviewer.StatusReviewDashboard?mode=${mode}`\n+        )\n+        if (mode === StatusReviewModes.MYSELF) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/145#discussion_r1766574771",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1/Permissions.tsx",
//         "line": null,
//         "comment": "same check again ?",
//         "commitId": "bd80326dda478c44805793bbcc4db6425b6510d4",
//         "codeSnippet": "@@ -46,6 +46,29 @@ const Permissions: FC<Props> = ({ state }) => {\n             state.template.availableForRoles\n         ]\n     )\n+    const updateGoalPageStatus = () => {\n+        const goalPage = state.template.pages.find(\n+            (page) => page.type === PageType.Goal\n+        )\n+        if (!goalPage) return\n+        if (\n+            !state.template.availableForRoles.includes(1) ||\n+            state.template.availableForRoles.some(\n+                (role: number) => role !== 1\n+            ) ||",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/147#discussion_r1768011423",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step2/SectionDrawer/SectionDrawer.tsx",
//         "line": null,
//         "comment": "same.",
//         "commitId": "bd80326dda478c44805793bbcc4db6425b6510d4",
//         "codeSnippet": "@@ -210,17 +204,19 @@ const SectionDrawer: FC<InnerProps> = ({\n                                 }\n                             />\n                         </Box>\n-                        {isEmpty(\n-                            state.template.availableForRoles.filter(\n-                                (role) => role === 1\n-                            )\n-                        ) && (\n-                            <Box>\n-                                <Alert severity='warning'>\n-                                    {t('page-manager-role-warning')}\n-                                </Alert>\n-                            </Box>\n-                        )}\n+                        {(!state.template.availableForRoles.includes(1) ||\n+                            state.template.availableForRoles.some(\n+                                (role: number) => role !== 1",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/147#discussion_r1768013192",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1/Permissions.tsx",
//         "line": null,
//         "comment": "This is a check for checking :\r\n1. if availabelForRoles does not have manager (1) \r\n2. if availableForRoles have any other role in it (other than 1)\r\n3. if availableForCustomRoles is not empty\r\nif any of this case is present, goal page will be set to inactive (status -> false)",
//         "commitId": "bd80326dda478c44805793bbcc4db6425b6510d4",
//         "codeSnippet": "@@ -46,6 +46,29 @@ const Permissions: FC<Props> = ({ state }) => {\n             state.template.availableForRoles\n         ]\n     )\n+    const updateGoalPageStatus = () => {\n+        const goalPage = state.template.pages.find(\n+            (page) => page.type === PageType.Goal\n+        )\n+        if (!goalPage) return\n+        if (\n+            !state.template.availableForRoles.includes(1) ||\n+            state.template.availableForRoles.some(\n+                (role: number) => role !== 1\n+            ) ||",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/147#discussion_r1768014463",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1/Permissions.tsx",
//         "line": null,
//         "comment": "maybe state.template.availableForRoles.length > 0 ?",
//         "commitId": "bd80326dda478c44805793bbcc4db6425b6510d4",
//         "codeSnippet": "@@ -46,6 +46,29 @@ const Permissions: FC<Props> = ({ state }) => {\n             state.template.availableForRoles\n         ]\n     )\n+    const updateGoalPageStatus = () => {\n+        const goalPage = state.template.pages.find(\n+            (page) => page.type === PageType.Goal\n+        )\n+        if (!goalPage) return\n+        if (\n+            !state.template.availableForRoles.includes(1) ||\n+            state.template.availableForRoles.some(\n+                (role: number) => role !== 1\n+            ) ||",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/147#discussion_r1768014679",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step2/SectionDrawer/SectionDrawer.tsx",
//         "line": null,
//         "comment": "same cases as above to show the alert on goal page section drawer\r\n",
//         "commitId": "bd80326dda478c44805793bbcc4db6425b6510d4",
//         "codeSnippet": "@@ -210,17 +204,19 @@ const SectionDrawer: FC<InnerProps> = ({\n                                 }\n                             />\n                         </Box>\n-                        {isEmpty(\n-                            state.template.availableForRoles.filter(\n-                                (role) => role === 1\n-                            )\n-                        ) && (\n-                            <Box>\n-                                <Alert severity='warning'>\n-                                    {t('page-manager-role-warning')}\n-                                </Alert>\n-                            </Box>\n-                        )}\n+                        {(!state.template.availableForRoles.includes(1) ||\n+                            state.template.availableForRoles.some(\n+                                (role: number) => role !== 1",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/147#discussion_r1768015298",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1/Permissions.tsx",
//         "line": null,
//         "comment": " state.template.availableForRoles.length === 1 && state.template.availableForRoles[0] === 1 &&\r\n state.template.availableForCustomRoles.length === 0",
//         "commitId": "bd80326dda478c44805793bbcc4db6425b6510d4",
//         "codeSnippet": "@@ -46,6 +46,29 @@ const Permissions: FC<Props> = ({ state }) => {\n             state.template.availableForRoles\n         ]\n     )\n+    const updateGoalPageStatus = () => {\n+        const goalPage = state.template.pages.find(\n+            (page) => page.type === PageType.Goal\n+        )\n+        if (!goalPage) return\n+        if (\n+            !state.template.availableForRoles.includes(1) ||\n+            state.template.availableForRoles.some(\n+                (role: number) => role !== 1\n+            ) ||",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/147#discussion_r1768026338",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "1baf29c10f5a5586d0778cf27307a975fba24839",
//         "codeSnippet": "@@ -0,0 +1,74 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { UserInfo } from '@/services/topics'\n+import { Avatar, Divider, Skeleton, Typography } from '@mui/material'\n+import { Box } from '@mui/system'\n+\n+import { StyledAvatar } from '../todo-overview/todo-header/styled'\n+import useMeeting from './useMeeting'\n+\n+type UserDetail = {\n+    userDetails: UserInfo[]\n+}\n+const EmployeeAvatar: FC<UserDetail> = ({ userDetails }) => {\n+    const { t } = useTranslation('meeting')\n+    const { timestamp } = useMeeting()\n+\n+    return (\n+        <FlexBox mb={2}>\n+            {userDetails.length > 0 ? (\n+                userDetails.map((user: UserInfo, index) => {\n+                    return (\n+                        <Box key={user.userId}>\n+                            {user.ownerAvatar !== undefined ? (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/117#discussion_r1768106807",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one/TemplateCard/TemplateCard.tsx",
//         "line": 34,
//         "comment": "Maybe enum for this?",
//         "commitId": "e528e9179b9b43e067f8dba13b8a0709d1f74475",
//         "codeSnippet": "@@ -26,6 +26,18 @@ const CardContainer = styled(Paper, {\n     cursor: 'pointer'\n }))\n \n+export const TextWrapper = styled('div')<{ containerType: string }>(\n+    ({ containerType }) => ({\n+        maxWidth: '100%',\n+        display: '-webkit-box',\n+        WebkitBoxOrient: 'vertical',\n+        WebkitLineClamp: containerType === 'name' ? 2 : 3, //2: template name, 3: template description",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/150#discussion_r1771099805",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/todo-overview/todo-body/TodoBody.tsx",
//         "line": 200,
//         "comment": "I hope this is not forming an infinite loop\r\n",
//         "commitId": "8413ae4ae21924ee0b2f5b0a88f2aaf961d2537a",
//         "codeSnippet": "@@ -187,6 +188,17 @@ const TodoBody: FC<TodoBodyProps> = ({\n         ]\n     )\n \n+    const debouncedHandleStateChange = useCallback(\n+        debounce(handleStateChange, 300),\n+        [handleStateChange]\n+    )\n+\n+    useEffect(() => {\n+        return () => {\n+            debouncedHandleStateChange.cancel()\n+        }\n+    }, [debouncedHandleStateChange])",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/156#discussion_r1773093391",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/todo-overview/todo-body/TodoBody.tsx",
//         "line": 200,
//         "comment": "nope :)",
//         "commitId": "8413ae4ae21924ee0b2f5b0a88f2aaf961d2537a",
//         "codeSnippet": "@@ -187,6 +188,17 @@ const TodoBody: FC<TodoBodyProps> = ({\n         ]\n     )\n \n+    const debouncedHandleStateChange = useCallback(\n+        debounce(handleStateChange, 300),\n+        [handleStateChange]\n+    )\n+\n+    useEffect(() => {\n+        return () => {\n+            debouncedHandleStateChange.cancel()\n+        }\n+    }, [debouncedHandleStateChange])",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/156#discussion_r1773095204",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/Providers/OneToOneProvider/OneToOneProvider.tsx",
//         "line": 226,
//         "comment": "rename to rolesToEmployeesMap",
//         "commitId": "9345932edf69cb2aea085270ce060d046a6a8aa3",
//         "codeSnippet": "@@ -195,6 +218,175 @@ const OneToOneProvider: FCC = ({ children }) => {\n         )\n     }\n \n+    // Roles filter\n+    const generateRolesFilter = (\n+        oneToOneResponse: OneToOneResponse,\n+        roles: Role[]\n+    ) => {\n+        const rolesFilter: Map<string, string[]> = new Map()",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/172#discussion_r1784286406",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/Providers/OneToOneProvider/OneToOneProvider.tsx",
//         "line": null,
//         "comment": "If we are doing foEach and setting the map, value will be updated for the same key and not store all the value, please check this if this ok or there is something missing",
//         "commitId": "9345932edf69cb2aea085270ce060d046a6a8aa3",
//         "codeSnippet": "@@ -195,6 +218,175 @@ const OneToOneProvider: FCC = ({ children }) => {\n         )\n     }\n \n+    // Roles filter\n+    const generateRolesFilter = (\n+        oneToOneResponse: OneToOneResponse,\n+        roles: Role[]\n+    ) => {\n+        const rolesFilter: Map<string, string[]> = new Map()\n+        const deactivatedStandardRoleProfiles: string[] = []\n+\n+        getHrAssistantData().then((hra: HRAssistant) => {\n+            getStandardRoles(\n+                oneToOneResponse,\n+                hra,\n+                rolesFilter,\n+                deactivatedStandardRoleProfiles\n+            )\n+            getCustomRoles(oneToOneResponse, roles, rolesFilter)\n+            getFormerEmployees(\n+                oneToOneResponse,\n+                deactivatedStandardRoleProfiles,\n+                rolesFilter\n+            )\n+            getOtherEmployees(\n+                oneToOneResponse,\n+                deactivatedStandardRoleProfiles,\n+                rolesFilter\n+            )\n+\n+            setRolesFilter(rolesFilter)\n+        })\n+    }\n+\n+    // Standard roles\n+    const getStandardRoles = (\n+        oneToOneResponse: OneToOneResponse,\n+        hra: HRAssistant,\n+        rolesFilter: Map<string, string[]>,\n+        deactivatedStandardRoleProfiles: string[]\n+    ) => {\n+        if (oneToOneResponse.manager) {\n+            rolesFilter.set(t('manager'), [oneToOneResponse.manager.id])\n+            if (!oneToOneResponse.manager.profileActive) {\n+                deactivatedStandardRoleProfiles.push(\n+                    oneToOneResponse.manager.id\n+                )\n+            }\n+        }\n+\n+        if (oneToOneResponse.subOrdinates.length > 0) {\n+            rolesFilter.set(t('subordinates'), oneToOneResponse.subOrdinates)\n+        }\n+\n+        if (oneToOneResponse.hrManager) {\n+            rolesFilter.set(t('hr-manager'), [oneToOneResponse.hrManager.id])\n+            if (!oneToOneResponse.hrManager.profileActive) {\n+                deactivatedStandardRoleProfiles.push(\n+                    oneToOneResponse.hrManager.id\n+                )\n+            }\n+        }\n+\n+        if (oneToOneResponse.hrEmployees.length > 0) {\n+            rolesFilter.set(t('hr-employees'), oneToOneResponse.hrEmployees)\n+        }\n+\n+        if (hra.rolesInMyProfile.HR_ASSISTANT.length > 0) {\n+            hra.rolesInMyProfile.HR_ASSISTANT.forEach((hrAssistant) => {\n+                rolesFilter.set(t('hr-assistant'), [hrAssistant.id])",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/172#discussion_r1785628611",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/locales/da-DK/Start new 1.json",
//         "line": null,
//         "comment": "fix file name.\r\n\r\n1 ??",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,3 @@\n+{\n+  \"1\": \"\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792915904",
//         "author": "u-arora"
//     },
//     {
//         "file": "public/locales/en-US/Start new 1.json",
//         "line": null,
//         "comment": "file name\r\n1??\r\n",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,3 @@\n+{\n+  \"1\": \"\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792940446",
//         "author": "u-arora"
//     },
//     {
//         "file": "public/locales/fi-FI/Start new 1.json",
//         "line": null,
//         "comment": "same",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,3 @@\n+{\n+  \"1\": \"\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792940829",
//         "author": "u-arora"
//     },
//     {
//         "file": "public/locales/fr-FR/Start new 1.json",
//         "line": null,
//         "comment": "+1",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,3 @@\n+{\n+  \"1\": \"\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792941027",
//         "author": "u-arora"
//     },
//     {
//         "file": "public/locales/nb-NO/Start new 1.json",
//         "line": null,
//         "comment": "+1",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,3 @@\n+{\n+  \"1\": \"\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792941241",
//         "author": "u-arora"
//     },
//     {
//         "file": "public/locales/nl-NL/Start new 1.json",
//         "line": null,
//         "comment": "+1",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,3 @@\n+{\n+  \"1\": \"\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792941490",
//         "author": "u-arora"
//     },
//     {
//         "file": "public/locales/pl-PL/Start new 1.json",
//         "line": null,
//         "comment": "+1",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,3 @@\n+{\n+  \"1\": \"\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792942384",
//         "author": "u-arora"
//     },
//     {
//         "file": "public/locales/sv-SE/Start new 1.json",
//         "line": null,
//         "comment": "+1",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,3 @@\n+{\n+  \"1\": \"\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792942769",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/Components/AlertDialog/AlertDialog.tsx",
//         "line": 46,
//         "comment": "t tag?",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -38,7 +42,10 @@ const AlertDialog: FC<Props> = ({\n             </DialogTitle>\n             <DialogContent sx={{ minWidth: '350px' }}>\n                 <DialogContentText id='alert-dialog-description'>\n-                    <Typography fontSize={16}>{message}</Typography>\n+                    {!showCustomInfo && (\n+                        <Typography fontSize={16}>{message}</Typography>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792945136",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "as string?",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -61,7 +61,7 @@ const AdministrationLandingPage: React.FC = () => {\n     const [loadingNew, setLoadingNew] = useState(false)\n \n     const createNewTemplateButton = {\n-        label: t('create-new-btn'),\n+        label: t('create-new-btn') as string,",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792947006",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": 58,
//         "comment": "meeting.availableActions.length &&  meeting.availableActions.includes(MeetingStateConstants.REOPEN)",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -34,30 +39,57 @@ const MeetingDetails: FC = () => {\n     } = useMeeting()\n \n     const [sectionSteps, setSectionSteps] = useState<SectionSteps[]>([])\n-    const [deleteDialogOpen, setDeleteDialogOpen] =\n+    const [completeDialogOpen, setCompleteDialogOpen] =\n         useState<DialogState>(getClosedState())\n     const [reopenDialogOpen, setReopenDialogOpen] =\n         useState<DialogState>(getClosedState())\n     const { t } = useTranslation('meeting')\n+    const { textParser } = useGlobal()\n \n     const [searchParams] = useSearchParams()\n     const oneToOneId = searchParams.get('oneToOneId')\n     const [reviewee, reviewer] = userData\n+    const [showTimeStamp, setShowTimeStamp] = useState(true)\n+\n+    // following dialog will open incase of meeting completion or submit to manager(in case of employee)\n+    const completeMeetingDialog = useMemo(() => {\n+        setShowTimeStamp(() => {\n+            return !(\n+                isEmpty(meeting.availableActions) ||",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792968833",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": 70,
//         "comment": "why optional?",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -34,30 +39,57 @@ const MeetingDetails: FC = () => {\n     } = useMeeting()\n \n     const [sectionSteps, setSectionSteps] = useState<SectionSteps[]>([])\n-    const [deleteDialogOpen, setDeleteDialogOpen] =\n+    const [completeDialogOpen, setCompleteDialogOpen] =\n         useState<DialogState>(getClosedState())\n     const [reopenDialogOpen, setReopenDialogOpen] =\n         useState<DialogState>(getClosedState())\n     const { t } = useTranslation('meeting')\n+    const { textParser } = useGlobal()\n \n     const [searchParams] = useSearchParams()\n     const oneToOneId = searchParams.get('oneToOneId')\n     const [reviewee, reviewer] = userData\n+    const [showTimeStamp, setShowTimeStamp] = useState(true)\n+\n+    // following dialog will open incase of meeting completion or submit to manager(in case of employee)\n+    const completeMeetingDialog = useMemo(() => {\n+        setShowTimeStamp(() => {\n+            return !(\n+                isEmpty(meeting.availableActions) ||\n+                meeting.availableActions?.includes(MeetingStateConstants.REOPEN)\n+            )\n+        })\n+        const meetingStateInCompletion = meeting.availableActions?.includes(\n+            MeetingStateConstants.FINISH_AND_SHARE_WITH_EMPLOYEE\n+        )\n+        return {\n+            header: meetingStateInCompletion\n+                ? t('complete-meeting')\n+                : t('employee-header-btn'),\n+            message: meetingStateInCompletion\n+                ? t('confirm-submit', { username: reviewee?.ownerName })",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792975304",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": null,
//         "comment": "if(oneToOneId )",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -34,30 +39,57 @@ const MeetingDetails: FC = () => {\n     } = useMeeting()\n \n     const [sectionSteps, setSectionSteps] = useState<SectionSteps[]>([])\n-    const [deleteDialogOpen, setDeleteDialogOpen] =\n+    const [completeDialogOpen, setCompleteDialogOpen] =\n         useState<DialogState>(getClosedState())\n     const [reopenDialogOpen, setReopenDialogOpen] =\n         useState<DialogState>(getClosedState())\n     const { t } = useTranslation('meeting')\n+    const { textParser } = useGlobal()\n \n     const [searchParams] = useSearchParams()\n     const oneToOneId = searchParams.get('oneToOneId')\n     const [reviewee, reviewer] = userData\n+    const [showTimeStamp, setShowTimeStamp] = useState(true)\n+\n+    // following dialog will open incase of meeting completion or submit to manager(in case of employee)\n+    const completeMeetingDialog = useMemo(() => {\n+        setShowTimeStamp(() => {\n+            return !(\n+                isEmpty(meeting.availableActions) ||\n+                meeting.availableActions?.includes(MeetingStateConstants.REOPEN)\n+            )\n+        })\n+        const meetingStateInCompletion = meeting.availableActions?.includes(\n+            MeetingStateConstants.FINISH_AND_SHARE_WITH_EMPLOYEE\n+        )\n+        return {\n+            header: meetingStateInCompletion\n+                ? t('complete-meeting')\n+                : t('employee-header-btn'),\n+            message: meetingStateInCompletion\n+                ? t('confirm-submit', { username: reviewee?.ownerName })\n+                : t('employee-submit-txt'),\n+            actionBtnTxt: meetingStateInCompletion\n+                ? t('complete-meeting_')\n+                : t('employee-submit-btn'),\n+            cancelBtnTxt: t('cancel')\n+        }\n+    }, [meeting, userData])\n \n     const onSubmit = () => {\n-        setDeleteDialogOpen(getOpenState(null, () => handleConfirmSubmit()))\n+        setCompleteDialogOpen(getOpenState(null, () => handleConfirmSubmit()))\n     }\n     const onReopen = () => {\n         setReopenDialogOpen(getOpenState(null, () => reopenMeetingHandler()))\n     }\n \n     const handleConfirmSubmit = () => {\n         handleMeetingStateChange(oneToOneId || '', meeting?.availableActions[0])",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792985394",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingProvider.tsx",
//         "line": null,
//         "comment": "string[]",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -83,65 +87,69 @@ const MeetingProvider: FCC = ({ children }) => {\n     const oneToOneId = searchParams.get('oneToOneId')\n     const [timestamp, setTimeStamp] = useState<string>(dayjs().format('HH:mm'))\n     const [availableActions, setAvailableActions] = useState<number[]>([])\n+    const [topics, setTopics] = useState<Todo[]>([])\n \n     useEffect(() => {\n-        const fetchData = async () => {\n-            if (!oneToOneId) return\n-\n-            try {\n-                // Fetch meeting details\n-                const response: OneToOneMeetingResponse =\n-                    await getOneToOneMeeting(oneToOneId)\n-\n-                setMeeting(response)\n-                setSections(response.sections)\n-\n-                const participants = [response.revieweeId, response.reviewerId]\n-                setAvailableActions(response.availableActions)\n-\n-                // Fetch employee data based on participants\n-                const userProfileResponse =\n-                    await fetchEmployeeDataForOneToOnes(participants)\n-\n-                const userDetail: UserInfo[] = userProfileResponse.map(\n-                    (owner: UserProfileField, index: number) => {\n-                        const userId = participants[index]\n-                        const ownerNameField = owner.fields[StandardField.NAME]\n-                        const ownerTitleField =\n-                            owner.fields[StandardField.TITLE]\n-                        const ownerAvatarField =\n-                            owner.fields[StandardField.IMAGE]\n-\n-                        const ownerName = ownerNameField?.data[0] || ''\n-                        const ownerNameInitials = ownerName\n-                            .split(' ')\n-                            .map((name) => name[0])\n-                            .slice(0, 2)\n-                            .join('')\n-\n-                        const ownerAvatar = ownerAvatarField?.data[0] || ''\n-                        const ownerTitle = ownerTitleField?.data[0] || ''\n-\n-                        return {\n-                            userId,\n-                            ownerName,\n-                            ownerTitle,\n-                            ownerAvatar,\n-                            ownerNameInitials\n+        if (!oneToOneId) return\n+        try {\n+            let participants: any[] = []",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792992352",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/MeetingNotesTopics.tsx",
//         "line": null,
//         "comment": "return !(meeting.isReopened || meeting.availableActions.includes(MeetingStateConstants.REOPEN))",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -1,19 +1,200 @@\n+import { FC, useCallback, useEffect, useState } from 'react'\n import { useTranslation } from 'react-i18next'\n \n-import { Alert } from '@mui/material'\n+import dayjs from 'dayjs'\n+import debounce from 'lodash/debounce'\n+import isEmpty from 'lodash/isEmpty'\n+import { lang } from 'moment'\n+\n+import { RichTextEditor } from '@/Components/RichTextEditor'\n+import { translateBBCodeToHtml } from '@/Components/RichTextEditor/util/translateBBCodeToHtml'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { contentparser } from '@/services/template'\n+import {\n+    MeetingStateConstants,\n+    Todo,\n+    TodoResponse,\n+    UserInfo\n+} from '@/services/topics'\n+import { Alert, Typography } from '@mui/material'\n import { Stack } from '@mui/system'\n \n-const MeetingNotesTopics = () => {\n+import ToDoContainer from '../to-do-creater/ToDoContainer'\n+import ToDoCreater from '../to-do-creater/ToDoCreater'\n+import useMeeting from '../useMeeting'\n+\n+type Props = {\n+    description: string\n+}\n+const MeetingNotesTopics: FC<Props> = ({ description }) => {\n+    const { textParser, languageId } = useGlobal()\n     const { t } = useTranslation('meeting')\n \n+    const {\n+        userData,\n+        handleTodoCreation,\n+        topics,\n+        handleMeetingNotesPage,\n+        meeting\n+    } = useMeeting()\n+    const [createdTodoList, setCreatedTodoList] = useState<Todo[]>([])\n+    const [remainingTodoList, setRemainingTodoList] = useState<Todo[]>([])\n+    const [archivedTodoList, setArchivedTodoList] = useState<Todo[]>([])\n+\n+    const [buttonLoadingStatus, setButtonLoadingStatus] =\n+        useState<boolean>(false)\n+\n+    const handleMeetingNotes = debounce((val: string) => {\n+        handleMeetingNotesPage(val)\n+    }, 500)\n+\n+    const handleNewTodoCreation = (todo: TodoResponse) => {\n+        setButtonLoadingStatus(true)\n+        const createdTodo: Todo = {\n+            title: todo.title,\n+            ownerId: todo.ownerId,\n+            deadline: todo.deadline,\n+            archived: false,\n+            archivedDate: '',\n+            doneOn: '',\n+            id: '',\n+            createdOn: dayjs().toISOString(),\n+            createdBy: '',\n+            done: false,\n+            status: 0,\n+            deleteable: false,\n+            rights: 0,\n+            remaining: false,\n+            type: ''\n+        }\n+        handleTodoCreation(createdTodo).finally(() => {\n+            setButtonLoadingStatus(false)\n+        })\n+    }\n+\n+    const getOwnerSpecificTodos = useCallback(\n+        (userId: string, todos: Todo[]) => {\n+            return todos.filter((todo) => todo.ownerId === userId)\n+        },\n+        [createdTodoList, remainingTodoList]\n+    )\n+\n+    const isMeetingNotReopenedOrFinished = () => {\n+        if (\n+            meeting.isReopened ||\n+            meeting.availableActions.includes(MeetingStateConstants.REOPEN)\n+        ) {\n+            return false\n+        }\n+        return true\n+    }",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1792998589",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/MeetingNotesTopics.tsx",
//         "line": 104,
//         "comment": "remove optional",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -1,19 +1,200 @@\n+import { FC, useCallback, useEffect, useState } from 'react'\n import { useTranslation } from 'react-i18next'\n \n-import { Alert } from '@mui/material'\n+import dayjs from 'dayjs'\n+import debounce from 'lodash/debounce'\n+import isEmpty from 'lodash/isEmpty'\n+import { lang } from 'moment'\n+\n+import { RichTextEditor } from '@/Components/RichTextEditor'\n+import { translateBBCodeToHtml } from '@/Components/RichTextEditor/util/translateBBCodeToHtml'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { contentparser } from '@/services/template'\n+import {\n+    MeetingStateConstants,\n+    Todo,\n+    TodoResponse,\n+    UserInfo\n+} from '@/services/topics'\n+import { Alert, Typography } from '@mui/material'\n import { Stack } from '@mui/system'\n \n-const MeetingNotesTopics = () => {\n+import ToDoContainer from '../to-do-creater/ToDoContainer'\n+import ToDoCreater from '../to-do-creater/ToDoCreater'\n+import useMeeting from '../useMeeting'\n+\n+type Props = {\n+    description: string\n+}\n+const MeetingNotesTopics: FC<Props> = ({ description }) => {\n+    const { textParser, languageId } = useGlobal()\n     const { t } = useTranslation('meeting')\n \n+    const {\n+        userData,\n+        handleTodoCreation,\n+        topics,\n+        handleMeetingNotesPage,\n+        meeting\n+    } = useMeeting()\n+    const [createdTodoList, setCreatedTodoList] = useState<Todo[]>([])\n+    const [remainingTodoList, setRemainingTodoList] = useState<Todo[]>([])\n+    const [archivedTodoList, setArchivedTodoList] = useState<Todo[]>([])\n+\n+    const [buttonLoadingStatus, setButtonLoadingStatus] =\n+        useState<boolean>(false)\n+\n+    const handleMeetingNotes = debounce((val: string) => {\n+        handleMeetingNotesPage(val)\n+    }, 500)\n+\n+    const handleNewTodoCreation = (todo: TodoResponse) => {\n+        setButtonLoadingStatus(true)\n+        const createdTodo: Todo = {\n+            title: todo.title,\n+            ownerId: todo.ownerId,\n+            deadline: todo.deadline,\n+            archived: false,\n+            archivedDate: '',\n+            doneOn: '',\n+            id: '',\n+            createdOn: dayjs().toISOString(),\n+            createdBy: '',\n+            done: false,\n+            status: 0,\n+            deleteable: false,\n+            rights: 0,\n+            remaining: false,\n+            type: ''\n+        }\n+        handleTodoCreation(createdTodo).finally(() => {\n+            setButtonLoadingStatus(false)\n+        })\n+    }\n+\n+    const getOwnerSpecificTodos = useCallback(\n+        (userId: string, todos: Todo[]) => {\n+            return todos.filter((todo) => todo.ownerId === userId)\n+        },\n+        [createdTodoList, remainingTodoList]\n+    )\n+\n+    const isMeetingNotReopenedOrFinished = () => {\n+        if (\n+            meeting.isReopened ||\n+            meeting.availableActions.includes(MeetingStateConstants.REOPEN)\n+        ) {\n+            return false\n+        }\n+        return true\n+    }\n+\n+    const showTodoContainer = useCallback(() => {\n+        return (\n+            (meeting.availableActions.includes(\n+                MeetingStateConstants.ONGOING_WITHOUT_PREP\n+            ) ||\n+                meeting.availableActions.includes(\n+                    MeetingStateConstants.FINISH_AND_SHARE_WITH_EMPLOYEE\n+                )) &&\n+            !meeting.isReopened\n+        )\n+    }, [meeting, topics])\n+\n+    // setting new, remaining and archived todos individually\n+    useEffect(() => {\n+        setCreatedTodoList(\n+            topics?.filter((todo) => !todo.remaining && !todo.archived)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793001681",
//         "author": "u-arora"
//     },
//     {
//         "file": "public/locales/de-DE/Start new 1.json",
//         "line": null,
//         "comment": "remove",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,3 @@\n+{\n+  \"1\": \"\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793003930",
//         "author": "u-arora"
//     },
//     {
//         "file": "public/locales/en-GB/Start new 1.json",
//         "line": null,
//         "comment": "remove",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,3 @@\n+{\n+  \"1\": \"\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793004467",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/CommentTopic.tsx",
//         "line": 44,
//         "comment": "optional??\r\n",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -34,37 +39,82 @@ const CommentTopic: FC<Props> = ({ onComment, topicData }) => {\n         }\n     }\n \n+    const getUserAvatar = useCallback(\n+        (userId: string) => {\n+            return userData.find((user) => user.userId === userId)?.ownerAvatar",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793007831",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/RadioTopic.tsx",
//         "line": 70,
//         "comment": "remove optional",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -55,19 +65,34 @@ const RadioTopic: FC<Props> = ({ onSelect, onComment, topicData }) => {\n         }\n     }\n \n+    const getUserAvatar = useCallback(\n+        (userId: string) => {\n+            return userData.find((user) => user.userId === userId)?.ownerAvatar",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793008910",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Pages/MeetingNotes.tsx",
//         "line": 42,
//         "comment": "acc?",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -1,39 +1,67 @@\n-import { FC, useEffect } from 'react'\n+import { FC, useEffect, useState } from 'react'\n \n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n import { getOneToOneMeetingSection, Section } from '@/services/one-to-one'\n-import { CircularProgress, Typography } from '@mui/material'\n+import { Todo } from '@/services/topics'\n+import { Typography } from '@mui/material'\n+import { Box, keyframes } from '@mui/system'\n \n import MeetingNotesTopics from '../PageTopics/MeetingNotesTopics'\n+import SectionSkeleton from '../skeleton-loaders/SectionSkeleton'\n import useMeeting from '../useMeeting'\n \n type Props = {\n     oneToOneId: string | null\n     section: Section\n }\n+\n+const fadeIn = keyframes`\n+    0% {\n+        opacity:0;\n+    }\n+    100% {\n+        opacity:1;\n+    }\n+`\n const MeetingNotes: FC<Props> = ({ oneToOneId, section }) => {\n-    const { handleLoading, loading } = useMeeting()\n+    const { textParser } = useGlobal()\n+    const { handleLoading, loading, setTopics, meeting, getAllRemainingTodos } =\n+        useMeeting()\n+    const [meetingNotesDescription, setMeetingNotesDescription] =\n+        useState<string>('')\n \n     useEffect(() => {\n         handleLoading(true)\n-        getOneToOneMeetingSection(oneToOneId, section?.sectionId).then(\n-            (res) => {\n-                handleLoading(false)\n-            }\n-        )\n-    }, [section])\n+        //using 100 as default value for total remaing todos to fetch at first go\n+        Promise.all([\n+            getOneToOneMeetingSection(oneToOneId, section?.sectionId),\n+            getAllRemainingTodos(100)\n+        ]).then((res) => {\n+            setTopics(() =>\n+                [...res[1], ...res[0].topics].reduce((acc, current) => {\n+                    if (!acc.some((todo: Todo) => todo.id === current.id)) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793010828",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/Components/AlertDialog/AlertDialog.tsx",
//         "line": 46,
//         "comment": "Its input passed to generic component so handle from consuming component",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -38,7 +42,10 @@ const AlertDialog: FC<Props> = ({\n             </DialogTitle>\n             <DialogContent sx={{ minWidth: '350px' }}>\n                 <DialogContentText id='alert-dialog-description'>\n-                    <Typography fontSize={16}>{message}</Typography>\n+                    {!showCustomInfo && (\n+                        <Typography fontSize={16}>{message}</Typography>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793011281",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/ToDoCreater.tsx",
//         "line": 45,
//         "comment": "Beyond science",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,168 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import dayjs, { Dayjs } from 'dayjs'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import TextFieldWithValidation from '@/Components/TextFieldWithValidation'\n+import { TodoResponse, UserInfo } from '@/services/topics'\n+import {\n+    Avatar,\n+    Button,\n+    FormControl,\n+    Grid,\n+    InputLabel,\n+    MenuItem,\n+    Select,\n+    SelectChangeEvent,\n+    Typography\n+} from '@mui/material'\n+import CircularProgress from '@mui/material/CircularProgress'\n+import { DatePicker } from '@mui/x-date-pickers'\n+\n+export type ToDoCreaterProps = {\n+    label: string\n+    btnText: string\n+    headerTxt: string\n+    descriptionLabel: string\n+    userData: UserInfo[]\n+    createdTodo: (todo: TodoResponse) => void\n+    btnLoadingState: boolean\n+}\n+\n+const ToDoCreater: FC<ToDoCreaterProps> = ({\n+    createdTodo,\n+    descriptionLabel,\n+    headerTxt,\n+    label,\n+    btnText,\n+    userData,\n+    btnLoadingState\n+}) => {\n+    const { t } = useTranslation('meeting')\n+\n+    const [selectedPerson, setSelectedPerson] = useState<string>(\n+        `${userData[0]?.userId}&0`",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793013525",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": 58,
//         "comment": "it needs or condition due to different states",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -34,30 +39,57 @@ const MeetingDetails: FC = () => {\n     } = useMeeting()\n \n     const [sectionSteps, setSectionSteps] = useState<SectionSteps[]>([])\n-    const [deleteDialogOpen, setDeleteDialogOpen] =\n+    const [completeDialogOpen, setCompleteDialogOpen] =\n         useState<DialogState>(getClosedState())\n     const [reopenDialogOpen, setReopenDialogOpen] =\n         useState<DialogState>(getClosedState())\n     const { t } = useTranslation('meeting')\n+    const { textParser } = useGlobal()\n \n     const [searchParams] = useSearchParams()\n     const oneToOneId = searchParams.get('oneToOneId')\n     const [reviewee, reviewer] = userData\n+    const [showTimeStamp, setShowTimeStamp] = useState(true)\n+\n+    // following dialog will open incase of meeting completion or submit to manager(in case of employee)\n+    const completeMeetingDialog = useMemo(() => {\n+        setShowTimeStamp(() => {\n+            return !(\n+                isEmpty(meeting.availableActions) ||",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793015621",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/todo-table/ToDoTable.tsx",
//         "line": 140,
//         "comment": "Move to service file",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,323 @@\n+import { FC, useCallback, useEffect, useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import dayjs from 'dayjs'\n+import isEmpty from 'lodash/isEmpty'\n+import { match } from 'ts-pattern'\n+\n+import AlertDialog from '@/Components/AlertDialog'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { MeetingStateConstants, Todo } from '@/services/topics'\n+import { DialogState, getClosedState, getOpenState } from '@/types/dialog'\n+import styled from '@emotion/styled'\n+import { Alert, Typography } from '@mui/material'\n+\n+import useMeeting from '../../useMeeting'\n+import TodoEditDialog from '../ToDoEditDialog'\n+import TodoTableBody from './TodoTableBody'\n+import TodoTableHeader from './TodoTableHeader'\n+\n+type Props = {\n+    todoList: Todo[]\n+    todoType: number\n+}\n+\n+const GridContainer = styled.div`\n+    width: 100%;\n+`\n+\n+const ToDoTable: FC<Props> = ({ todoList, todoType }) => {\n+    const {\n+        handleTodoStatusUpdation,\n+        handleTodoDeletion,\n+        handleTodoUpdation,\n+        topics,\n+        meeting,\n+        handleTodoArchive\n+    } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+    const { userDateFormat } = useGlobal()\n+    const [requestedTodo, setRequestedTodo] = useState<Todo>(topics[0])\n+    const [todoListLocal, setTodoListLocal] = useState<Todo[]>(todoList)\n+    const [editDialogState, setEditDialogState] =\n+        useState<DialogState>(getClosedState())\n+    const [showASCSortIconCreated, setShowSortIconCreated] =\n+        useState<boolean>(true)\n+    const [showASCSortIconDeadline, setShowSortIconDeadline] =\n+        useState<boolean>(true)\n+    const [showDeleteDialog, setShowDeleteDialog] =\n+        useState<DialogState>(getClosedState())\n+    const [showArchiveDialog, setShowArchiveDialog] =\n+        useState<DialogState>(getClosedState())\n+    const [deletedTodoId, setDeletedTodoId] = useState<string>('')\n+    const [todoTableHeader, setTodoTableHeader] = useState<string>('')\n+\n+    const handleChangeStatus = (\n+        index: number,\n+        topicId: string,\n+        todoStatus: boolean\n+    ) => {\n+        setOrRevertTodoAction(index, todoStatus, 'DONE', topicId)\n+        handleTodoStatusUpdation(topicId, todoStatus).then((status) => {\n+            if (!status) {\n+                setOrRevertTodoAction(index, !todoStatus, 'DONE', topicId) //incase of failure\n+            }\n+        })\n+    }\n+\n+    const handleStateChange = (\n+        todoId: string,\n+        operation: string,\n+        value: boolean,\n+        index: number\n+    ) => {\n+        match(operation)\n+            .with('ARCHIVE', () => {\n+                archiveTodoHandler(todoId, value)\n+            })\n+            .with('ACTIVE', () => {\n+                handleArchiveForTodo(todoId, value)\n+            })\n+            .with('EDIT', () => {\n+                setRequestedTodo(\n+                    todoList.filter((todo) => todo.id === todoId)[0]\n+                )\n+                editTodoHandler(requestedTodo)\n+            })\n+            .with('DELETE', () => {\n+                deleteTodoHandler(todoId)\n+            })\n+    }\n+\n+    const setOrRevertTodoAction = (\n+        index: number,\n+        todoStatus: boolean,\n+        operation: string,\n+        topicId: string\n+    ) => {\n+        match(operation).with('DONE', () => {\n+            todoListLocal[index].done = todoStatus\n+            todoListLocal[index].doneOn = todoStatus\n+                ? dayjs().format(userDateFormat)\n+                : ''\n+            setTodoListLocal([...todoListLocal])\n+        })\n+    }\n+\n+    const editTodoHandler = useCallback(\n+        (requestedTodo: Todo) => {\n+            let patch = []\n+            if (isMeetingReopenedOrTodosFromRemaining) {\n+                patch = [\n+                    {\n+                        op: 'replace',\n+                        path: '/topicData/todoDeadlineDetails',\n+                        value: {\n+                            deadline: requestedTodo?.deadline,\n+                            deadlineChanged: true\n+                        }\n+                    }\n+                ]\n+            } else {\n+                patch = [\n+                    {\n+                        op: 'replace',\n+                        path: `/topicData/todoDetails`,\n+                        value: {\n+                            ownerId: requestedTodo?.ownerId,\n+                            title: requestedTodo?.title\n+                        }\n+                    },\n+                    {\n+                        op: 'replace',\n+                        path: '/topicData/todoDeadlineDetails',\n+                        value: {\n+                            deadline: requestedTodo?.deadline,\n+                            deadlineChanged: true\n+                        }\n+                    }\n+                ]\n+            }",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793019250",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/todo-table/ToDoTable.tsx",
//         "line": 244,
//         "comment": "can be removed ?\r\n!meeting.availableActions.includes(\r\n                    MeetingStateConstants.REOPEN\r\n                )",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,323 @@\n+import { FC, useCallback, useEffect, useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import dayjs from 'dayjs'\n+import isEmpty from 'lodash/isEmpty'\n+import { match } from 'ts-pattern'\n+\n+import AlertDialog from '@/Components/AlertDialog'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { MeetingStateConstants, Todo } from '@/services/topics'\n+import { DialogState, getClosedState, getOpenState } from '@/types/dialog'\n+import styled from '@emotion/styled'\n+import { Alert, Typography } from '@mui/material'\n+\n+import useMeeting from '../../useMeeting'\n+import TodoEditDialog from '../ToDoEditDialog'\n+import TodoTableBody from './TodoTableBody'\n+import TodoTableHeader from './TodoTableHeader'\n+\n+type Props = {\n+    todoList: Todo[]\n+    todoType: number\n+}\n+\n+const GridContainer = styled.div`\n+    width: 100%;\n+`\n+\n+const ToDoTable: FC<Props> = ({ todoList, todoType }) => {\n+    const {\n+        handleTodoStatusUpdation,\n+        handleTodoDeletion,\n+        handleTodoUpdation,\n+        topics,\n+        meeting,\n+        handleTodoArchive\n+    } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+    const { userDateFormat } = useGlobal()\n+    const [requestedTodo, setRequestedTodo] = useState<Todo>(topics[0])\n+    const [todoListLocal, setTodoListLocal] = useState<Todo[]>(todoList)\n+    const [editDialogState, setEditDialogState] =\n+        useState<DialogState>(getClosedState())\n+    const [showASCSortIconCreated, setShowSortIconCreated] =\n+        useState<boolean>(true)\n+    const [showASCSortIconDeadline, setShowSortIconDeadline] =\n+        useState<boolean>(true)\n+    const [showDeleteDialog, setShowDeleteDialog] =\n+        useState<DialogState>(getClosedState())\n+    const [showArchiveDialog, setShowArchiveDialog] =\n+        useState<DialogState>(getClosedState())\n+    const [deletedTodoId, setDeletedTodoId] = useState<string>('')\n+    const [todoTableHeader, setTodoTableHeader] = useState<string>('')\n+\n+    const handleChangeStatus = (\n+        index: number,\n+        topicId: string,\n+        todoStatus: boolean\n+    ) => {\n+        setOrRevertTodoAction(index, todoStatus, 'DONE', topicId)\n+        handleTodoStatusUpdation(topicId, todoStatus).then((status) => {\n+            if (!status) {\n+                setOrRevertTodoAction(index, !todoStatus, 'DONE', topicId) //incase of failure\n+            }\n+        })\n+    }\n+\n+    const handleStateChange = (\n+        todoId: string,\n+        operation: string,\n+        value: boolean,\n+        index: number\n+    ) => {\n+        match(operation)\n+            .with('ARCHIVE', () => {\n+                archiveTodoHandler(todoId, value)\n+            })\n+            .with('ACTIVE', () => {\n+                handleArchiveForTodo(todoId, value)\n+            })\n+            .with('EDIT', () => {\n+                setRequestedTodo(\n+                    todoList.filter((todo) => todo.id === todoId)[0]\n+                )\n+                editTodoHandler(requestedTodo)\n+            })\n+            .with('DELETE', () => {\n+                deleteTodoHandler(todoId)\n+            })\n+    }\n+\n+    const setOrRevertTodoAction = (\n+        index: number,\n+        todoStatus: boolean,\n+        operation: string,\n+        topicId: string\n+    ) => {\n+        match(operation).with('DONE', () => {\n+            todoListLocal[index].done = todoStatus\n+            todoListLocal[index].doneOn = todoStatus\n+                ? dayjs().format(userDateFormat)\n+                : ''\n+            setTodoListLocal([...todoListLocal])\n+        })\n+    }\n+\n+    const editTodoHandler = useCallback(\n+        (requestedTodo: Todo) => {\n+            let patch = []\n+            if (isMeetingReopenedOrTodosFromRemaining) {\n+                patch = [\n+                    {\n+                        op: 'replace',\n+                        path: '/topicData/todoDeadlineDetails',\n+                        value: {\n+                            deadline: requestedTodo?.deadline,\n+                            deadlineChanged: true\n+                        }\n+                    }\n+                ]\n+            } else {\n+                patch = [\n+                    {\n+                        op: 'replace',\n+                        path: `/topicData/todoDetails`,\n+                        value: {\n+                            ownerId: requestedTodo?.ownerId,\n+                            title: requestedTodo?.title\n+                        }\n+                    },\n+                    {\n+                        op: 'replace',\n+                        path: '/topicData/todoDeadlineDetails',\n+                        value: {\n+                            deadline: requestedTodo?.deadline,\n+                            deadlineChanged: true\n+                        }\n+                    }\n+                ]\n+            }\n+\n+            setEditDialogState(\n+                getOpenState(null, () => {\n+                    handleTodoUpdation(requestedTodo, patch).finally(() =>\n+                        setEditDialogState(getClosedState())\n+                    )\n+                })\n+            )\n+        },\n+        [requestedTodo]\n+    )\n+\n+    const handleSorting = (columnName: string, order: string) => {\n+        match(columnName)\n+            .with('created', () => {\n+                match(order)\n+                    .with('ASC', () => {\n+                        setShowSortIconCreated(false)\n+                        todoListLocal.sort(\n+                            (a: Todo, b: Todo) =>\n+                                dayjs(a.createdOn).valueOf() -\n+                                dayjs(b.createdOn).valueOf()\n+                        )\n+                    })\n+                    .with('DSC', () => {\n+                        setShowSortIconCreated(true)\n+                        todoListLocal.sort(\n+                            (a: Todo, b: Todo) =>\n+                                dayjs(b.createdOn).valueOf() -\n+                                dayjs(a.createdOn).valueOf()\n+                        )\n+                    })\n+            })\n+            .with('deadline', () => {\n+                match(order)\n+                    .with('ASC', () => {\n+                        setShowSortIconDeadline(false)\n+                        todoListLocal.sort(\n+                            (a: Todo, b: Todo) =>\n+                                dayjs(a.deadline).valueOf() -\n+                                dayjs(b.deadline).valueOf()\n+                        )\n+                    })\n+                    .with('DSC', () => {\n+                        setShowSortIconDeadline(true)\n+                        todoListLocal.sort(\n+                            (a: Todo, b: Todo) =>\n+                                dayjs(b.deadline).valueOf() -\n+                                dayjs(a.deadline).valueOf()\n+                        )\n+                    })\n+            })\n+    }\n+\n+    const handleCancel = () => {\n+        setShowDeleteDialog(getClosedState())\n+        setShowArchiveDialog(getClosedState())\n+    }\n+\n+    const deleteTodoHandler = (todoId: string) => {\n+        setShowDeleteDialog(\n+            getOpenState(null, () => handleDeletionForTodo(todoId))\n+        )\n+    }\n+\n+    const handleDeletionForTodo = (topicId: string) => {\n+        setShowDeleteDialog(getClosedState())\n+        setDeletedTodoId(topicId)\n+        handleTodoDeletion(topicId).then((status) => {\n+            if (!status) {\n+                setDeletedTodoId('')\n+                setTodoListLocal([...todoListLocal]) //incase of failure render the previous state            }\n+            }\n+        })\n+    }\n+    const archiveTodoHandler = (todoId: string, value: boolean) => {\n+        setShowArchiveDialog(\n+            getOpenState(null, () => handleArchiveForTodo(todoId, value))\n+        )\n+    }\n+\n+    const handleArchiveForTodo = (topicId: string, value: boolean) => {\n+        setShowArchiveDialog(getClosedState())\n+        handleTodoArchive(topicId, value).then((status) => {})\n+    }\n+\n+    const editTodoCloseHandler = () => {\n+        setEditDialogState(getClosedState())\n+    }\n+\n+    //1: new todos\n+    //2: remaining todos\n+    //3: archived todos\n+    const todoTypeHeader = () => {\n+        match(todoType)\n+            .with(1, () => setTodoTableHeader(t('new-todos')))\n+            .with(2, () => setTodoTableHeader(t('remaining-todos')))\n+            .with(3, () => setTodoTableHeader(t('archived-todos')))\n+    }\n+\n+    const isMeetingReopenedOrTodosFromRemaining = useMemo(() => {\n+        return (\n+            (meeting.isReopened &&\n+                !meeting.availableActions.includes(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793027254",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/todo-table/TodoTableBody.tsx",
//         "line": null,
//         "comment": "add to styled.ts",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,406 @@\n+import { FC, Fragment, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import dayjs from 'dayjs'\n+import PopupState, { bindMenu, bindTrigger } from 'material-ui-popup-state'\n+\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import {\n+    CheckedIcon,\n+    StyledButton,\n+    UncheckedIcon\n+} from '@/features/todo-overview/todo-body/styled'\n+import { getLanguageId } from '@/services/language'\n+import { MeetingStateConstants, Rights, Todo } from '@/services/topics'\n+import styled from '@emotion/styled'\n+import CreateOutlinedIcon from '@mui/icons-material/CreateOutlined'\n+import DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined'\n+import MoreVertIcon from '@mui/icons-material/MoreVert'\n+import { Chip, Grid, Menu, Typography } from '@mui/material'\n+import { Box, keyframes, Theme } from '@mui/system'\n+\n+import useMeeting from '../../useMeeting'\n+\n+type Props = {\n+    todoListLocal: Todo[]\n+    handleChangeStatus: (index: number, todoId: string, status: boolean) => void\n+    handleStateChange: (\n+        todoId: string,\n+        operation: string,\n+        value: boolean,\n+        index: number\n+    ) => void\n+    deletedTodoId: string\n+    todoType: number\n+}\n+const slideRightDisappear = keyframes`\n+    0% {\n+        transform: translateX(0);\n+        opacity: 1;\n+    }\n+    100% {\n+        transform: translateX(100px);\n+        opacity: 0;\n+    }\n+`\n+const fadeIn = keyframes`\n+    0% {\n+        opacity:0;\n+    }\n+    100% {\n+        opacity:1;\n+    }\n+`",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793030106",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/ToDoCreater.tsx",
//         "line": 45,
//         "comment": "needed indeed",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,168 @@\n+import { FC, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import dayjs, { Dayjs } from 'dayjs'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import TextFieldWithValidation from '@/Components/TextFieldWithValidation'\n+import { TodoResponse, UserInfo } from '@/services/topics'\n+import {\n+    Avatar,\n+    Button,\n+    FormControl,\n+    Grid,\n+    InputLabel,\n+    MenuItem,\n+    Select,\n+    SelectChangeEvent,\n+    Typography\n+} from '@mui/material'\n+import CircularProgress from '@mui/material/CircularProgress'\n+import { DatePicker } from '@mui/x-date-pickers'\n+\n+export type ToDoCreaterProps = {\n+    label: string\n+    btnText: string\n+    headerTxt: string\n+    descriptionLabel: string\n+    userData: UserInfo[]\n+    createdTodo: (todo: TodoResponse) => void\n+    btnLoadingState: boolean\n+}\n+\n+const ToDoCreater: FC<ToDoCreaterProps> = ({\n+    createdTodo,\n+    descriptionLabel,\n+    headerTxt,\n+    label,\n+    btnText,\n+    userData,\n+    btnLoadingState\n+}) => {\n+    const { t } = useTranslation('meeting')\n+\n+    const [selectedPerson, setSelectedPerson] = useState<string>(\n+        `${userData[0]?.userId}&0`",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793030168",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/todo-table/TodoTableBody.tsx",
//         "line": null,
//         "comment": "put in styled\r\n",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,406 @@\n+import { FC, Fragment, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import dayjs from 'dayjs'\n+import PopupState, { bindMenu, bindTrigger } from 'material-ui-popup-state'\n+\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import {\n+    CheckedIcon,\n+    StyledButton,\n+    UncheckedIcon\n+} from '@/features/todo-overview/todo-body/styled'\n+import { getLanguageId } from '@/services/language'\n+import { MeetingStateConstants, Rights, Todo } from '@/services/topics'\n+import styled from '@emotion/styled'\n+import CreateOutlinedIcon from '@mui/icons-material/CreateOutlined'\n+import DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined'\n+import MoreVertIcon from '@mui/icons-material/MoreVert'\n+import { Chip, Grid, Menu, Typography } from '@mui/material'\n+import { Box, keyframes, Theme } from '@mui/system'\n+\n+import useMeeting from '../../useMeeting'\n+\n+type Props = {\n+    todoListLocal: Todo[]\n+    handleChangeStatus: (index: number, todoId: string, status: boolean) => void\n+    handleStateChange: (\n+        todoId: string,\n+        operation: string,\n+        value: boolean,\n+        index: number\n+    ) => void\n+    deletedTodoId: string\n+    todoType: number\n+}\n+const slideRightDisappear = keyframes`\n+    0% {\n+        transform: translateX(0);\n+        opacity: 1;\n+    }\n+    100% {\n+        transform: translateX(100px);\n+        opacity: 0;\n+    }\n+`\n+const fadeIn = keyframes`\n+    0% {\n+        opacity:0;\n+    }\n+    100% {\n+        opacity:1;\n+    }\n+`\n+\n+const StyledGridItem = styled(Grid)<{ isSliding: boolean; theme?: Theme }>(\n+    ({ isSliding, theme }) => ({\n+        borderBottom: `1px solid ${theme.palette.divider}`,\n+        padding: '1rem 1rem 1rem 0',\n+        height: 'auto',\n+\n+        animation: `${fadeIn} 0.5s ease-in forwards,\n+        ${isSliding ? `${slideRightDisappear} 0.5s forwards` : 'none'}`\n+    })\n+)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793174836",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/useMeeting.tsx",
//         "line": 55,
//         "comment": "remove optional",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -28,21 +42,34 @@ const useMeeting = () => {\n         timestamp,\n         setTimeStamp,\n         availableActions,\n-        setAvailableActions\n+        setAvailableActions,\n+        topics,\n+        setTopics\n     } = useContext(MeetingContext)\n \n     const { createSnack } = useSnackbar()\n-\n     const { t } = useTranslation('meeting')\n \n+    const userIdMapForTodos = useMemo(() => {\n+        const userIdMap: Record<string, string> = {}\n+        userData?.forEach((user, index) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793178160",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/useMeeting.tsx",
//         "line": null,
//         "comment": "remove empty string or call will be failed.",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -51,7 +78,24 @@ const useMeeting = () => {\n                 setTimeStamp(dayjs().format('HH:mm'))\n                 createSnack({ alert: { severity: 'success' } })(t('saved '))\n             })\n-            .catch(() => {\n+            .catch((error) => {\n+                console.log(error)\n+                createSnack({ alert: { severity: 'error' } })(t('error'))\n+            })\n+    }\n+\n+    const handleMeetingNotesPage = (enteredData: string) => {\n+        updateMeetingNoteSection(\n+            oneToOneId || '',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793180569",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/services/one-to-one/service.ts",
//         "line": 186,
//         "comment": "remove",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -158,6 +173,21 @@ export const getOneToOneMeeting = (oneToOneId: string) => {\n     return axios.get<any>(url, config).then(getData)\n }\n \n+export const getRemainingTodos = (\n+    oneToOneId: string,\n+    sectionId: string,\n+    limit: number\n+) => {\n+    const url = `${BASE_URL}${oneToOneId}/sections/${sectionId}/page?pageSize=${limit}`\n+    const config = {\n+        headers: {\n+            'Content-Type': 'application/json'\n+        },\n+        data: {}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793181661",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/services/to-do/service.ts",
//         "line": 125,
//         "comment": "remove",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -52,3 +53,98 @@ export const updateCompletedState = (id: string, value: boolean) => {\n         }\n     ])\n }\n+\n+export const createTodo = (\n+    oneToOneId: string,\n+    sectionId: string,\n+    todoData: TodoResponse\n+) => {\n+    return axios\n+        .post<Todo[]>(\n+            `/onetooneservice/v2/onetoones/${oneToOneId}` +\n+                `/sections/${sectionId}/topics`,\n+            {\n+                deadline: todoData.deadline,\n+                ownerId: todoData.ownerId,\n+                sectionType: 2,\n+                title: todoData.title,\n+                type: 'TodoGenerationRequest'\n+            }\n+        )\n+        .then(getData)\n+}\n+\n+export const updateTodoStatus = (\n+    oneToOneId: string,\n+    sectionId: string,\n+    topicId: string,\n+    value: boolean\n+) => {\n+    return axios\n+        .patch(\n+            `/onetooneservice/v2/onetoones/${oneToOneId}` +\n+                `/sections/${sectionId}/topics/${topicId}`,\n+            [\n+                {\n+                    op: 'replace',\n+                    path: '/topicData/isDone',\n+                    value\n+                }\n+            ]\n+        )\n+        .then(getData)\n+}\n+\n+export const todoUpdation = (\n+    oneToOneId: string,\n+    sectionId: string,\n+    topicId: string,\n+    patchBody: any[]\n+) => {\n+    return axios\n+        .patch(\n+            `/onetooneservice/v2/onetoones/${oneToOneId}` +\n+                `/sections/${sectionId}/topics/${topicId}`,\n+            patchBody\n+        )\n+        .then(getData)\n+}\n+\n+export const deleteTodo = (\n+    oneToOneId: string,\n+    sectionId: string,\n+    topicId: string\n+) => {\n+    return axios\n+        .delete(\n+            `/onetooneservice/v2/onetoones/${oneToOneId}/sections/${sectionId}/topics/${topicId}`,\n+            {\n+                headers: {\n+                    'Content-Type': 'application/json'\n+                },\n+                data: {}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793182355",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/services/to-do/service.ts",
//         "line": 125,
//         "comment": "@u-arora  its needed wont work without it!",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -52,3 +53,98 @@ export const updateCompletedState = (id: string, value: boolean) => {\n         }\n     ])\n }\n+\n+export const createTodo = (\n+    oneToOneId: string,\n+    sectionId: string,\n+    todoData: TodoResponse\n+) => {\n+    return axios\n+        .post<Todo[]>(\n+            `/onetooneservice/v2/onetoones/${oneToOneId}` +\n+                `/sections/${sectionId}/topics`,\n+            {\n+                deadline: todoData.deadline,\n+                ownerId: todoData.ownerId,\n+                sectionType: 2,\n+                title: todoData.title,\n+                type: 'TodoGenerationRequest'\n+            }\n+        )\n+        .then(getData)\n+}\n+\n+export const updateTodoStatus = (\n+    oneToOneId: string,\n+    sectionId: string,\n+    topicId: string,\n+    value: boolean\n+) => {\n+    return axios\n+        .patch(\n+            `/onetooneservice/v2/onetoones/${oneToOneId}` +\n+                `/sections/${sectionId}/topics/${topicId}`,\n+            [\n+                {\n+                    op: 'replace',\n+                    path: '/topicData/isDone',\n+                    value\n+                }\n+            ]\n+        )\n+        .then(getData)\n+}\n+\n+export const todoUpdation = (\n+    oneToOneId: string,\n+    sectionId: string,\n+    topicId: string,\n+    patchBody: any[]\n+) => {\n+    return axios\n+        .patch(\n+            `/onetooneservice/v2/onetoones/${oneToOneId}` +\n+                `/sections/${sectionId}/topics/${topicId}`,\n+            patchBody\n+        )\n+        .then(getData)\n+}\n+\n+export const deleteTodo = (\n+    oneToOneId: string,\n+    sectionId: string,\n+    topicId: string\n+) => {\n+    return axios\n+        .delete(\n+            `/onetooneservice/v2/onetoones/${oneToOneId}/sections/${sectionId}/topics/${topicId}`,\n+            {\n+                headers: {\n+                    'Content-Type': 'application/json'\n+                },\n+                data: {}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793277151",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/todo-table/ToDoTable.tsx",
//         "line": 244,
//         "comment": "no",
//         "commitId": "fc1d3d3f37f7e45f263e0a9e43f7433d2065cc60",
//         "codeSnippet": "@@ -0,0 +1,323 @@\n+import { FC, useCallback, useEffect, useMemo, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import dayjs from 'dayjs'\n+import isEmpty from 'lodash/isEmpty'\n+import { match } from 'ts-pattern'\n+\n+import AlertDialog from '@/Components/AlertDialog'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { MeetingStateConstants, Todo } from '@/services/topics'\n+import { DialogState, getClosedState, getOpenState } from '@/types/dialog'\n+import styled from '@emotion/styled'\n+import { Alert, Typography } from '@mui/material'\n+\n+import useMeeting from '../../useMeeting'\n+import TodoEditDialog from '../ToDoEditDialog'\n+import TodoTableBody from './TodoTableBody'\n+import TodoTableHeader from './TodoTableHeader'\n+\n+type Props = {\n+    todoList: Todo[]\n+    todoType: number\n+}\n+\n+const GridContainer = styled.div`\n+    width: 100%;\n+`\n+\n+const ToDoTable: FC<Props> = ({ todoList, todoType }) => {\n+    const {\n+        handleTodoStatusUpdation,\n+        handleTodoDeletion,\n+        handleTodoUpdation,\n+        topics,\n+        meeting,\n+        handleTodoArchive\n+    } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+    const { userDateFormat } = useGlobal()\n+    const [requestedTodo, setRequestedTodo] = useState<Todo>(topics[0])\n+    const [todoListLocal, setTodoListLocal] = useState<Todo[]>(todoList)\n+    const [editDialogState, setEditDialogState] =\n+        useState<DialogState>(getClosedState())\n+    const [showASCSortIconCreated, setShowSortIconCreated] =\n+        useState<boolean>(true)\n+    const [showASCSortIconDeadline, setShowSortIconDeadline] =\n+        useState<boolean>(true)\n+    const [showDeleteDialog, setShowDeleteDialog] =\n+        useState<DialogState>(getClosedState())\n+    const [showArchiveDialog, setShowArchiveDialog] =\n+        useState<DialogState>(getClosedState())\n+    const [deletedTodoId, setDeletedTodoId] = useState<string>('')\n+    const [todoTableHeader, setTodoTableHeader] = useState<string>('')\n+\n+    const handleChangeStatus = (\n+        index: number,\n+        topicId: string,\n+        todoStatus: boolean\n+    ) => {\n+        setOrRevertTodoAction(index, todoStatus, 'DONE', topicId)\n+        handleTodoStatusUpdation(topicId, todoStatus).then((status) => {\n+            if (!status) {\n+                setOrRevertTodoAction(index, !todoStatus, 'DONE', topicId) //incase of failure\n+            }\n+        })\n+    }\n+\n+    const handleStateChange = (\n+        todoId: string,\n+        operation: string,\n+        value: boolean,\n+        index: number\n+    ) => {\n+        match(operation)\n+            .with('ARCHIVE', () => {\n+                archiveTodoHandler(todoId, value)\n+            })\n+            .with('ACTIVE', () => {\n+                handleArchiveForTodo(todoId, value)\n+            })\n+            .with('EDIT', () => {\n+                setRequestedTodo(\n+                    todoList.filter((todo) => todo.id === todoId)[0]\n+                )\n+                editTodoHandler(requestedTodo)\n+            })\n+            .with('DELETE', () => {\n+                deleteTodoHandler(todoId)\n+            })\n+    }\n+\n+    const setOrRevertTodoAction = (\n+        index: number,\n+        todoStatus: boolean,\n+        operation: string,\n+        topicId: string\n+    ) => {\n+        match(operation).with('DONE', () => {\n+            todoListLocal[index].done = todoStatus\n+            todoListLocal[index].doneOn = todoStatus\n+                ? dayjs().format(userDateFormat)\n+                : ''\n+            setTodoListLocal([...todoListLocal])\n+        })\n+    }\n+\n+    const editTodoHandler = useCallback(\n+        (requestedTodo: Todo) => {\n+            let patch = []\n+            if (isMeetingReopenedOrTodosFromRemaining) {\n+                patch = [\n+                    {\n+                        op: 'replace',\n+                        path: '/topicData/todoDeadlineDetails',\n+                        value: {\n+                            deadline: requestedTodo?.deadline,\n+                            deadlineChanged: true\n+                        }\n+                    }\n+                ]\n+            } else {\n+                patch = [\n+                    {\n+                        op: 'replace',\n+                        path: `/topicData/todoDetails`,\n+                        value: {\n+                            ownerId: requestedTodo?.ownerId,\n+                            title: requestedTodo?.title\n+                        }\n+                    },\n+                    {\n+                        op: 'replace',\n+                        path: '/topicData/todoDeadlineDetails',\n+                        value: {\n+                            deadline: requestedTodo?.deadline,\n+                            deadlineChanged: true\n+                        }\n+                    }\n+                ]\n+            }\n+\n+            setEditDialogState(\n+                getOpenState(null, () => {\n+                    handleTodoUpdation(requestedTodo, patch).finally(() =>\n+                        setEditDialogState(getClosedState())\n+                    )\n+                })\n+            )\n+        },\n+        [requestedTodo]\n+    )\n+\n+    const handleSorting = (columnName: string, order: string) => {\n+        match(columnName)\n+            .with('created', () => {\n+                match(order)\n+                    .with('ASC', () => {\n+                        setShowSortIconCreated(false)\n+                        todoListLocal.sort(\n+                            (a: Todo, b: Todo) =>\n+                                dayjs(a.createdOn).valueOf() -\n+                                dayjs(b.createdOn).valueOf()\n+                        )\n+                    })\n+                    .with('DSC', () => {\n+                        setShowSortIconCreated(true)\n+                        todoListLocal.sort(\n+                            (a: Todo, b: Todo) =>\n+                                dayjs(b.createdOn).valueOf() -\n+                                dayjs(a.createdOn).valueOf()\n+                        )\n+                    })\n+            })\n+            .with('deadline', () => {\n+                match(order)\n+                    .with('ASC', () => {\n+                        setShowSortIconDeadline(false)\n+                        todoListLocal.sort(\n+                            (a: Todo, b: Todo) =>\n+                                dayjs(a.deadline).valueOf() -\n+                                dayjs(b.deadline).valueOf()\n+                        )\n+                    })\n+                    .with('DSC', () => {\n+                        setShowSortIconDeadline(true)\n+                        todoListLocal.sort(\n+                            (a: Todo, b: Todo) =>\n+                                dayjs(b.deadline).valueOf() -\n+                                dayjs(a.deadline).valueOf()\n+                        )\n+                    })\n+            })\n+    }\n+\n+    const handleCancel = () => {\n+        setShowDeleteDialog(getClosedState())\n+        setShowArchiveDialog(getClosedState())\n+    }\n+\n+    const deleteTodoHandler = (todoId: string) => {\n+        setShowDeleteDialog(\n+            getOpenState(null, () => handleDeletionForTodo(todoId))\n+        )\n+    }\n+\n+    const handleDeletionForTodo = (topicId: string) => {\n+        setShowDeleteDialog(getClosedState())\n+        setDeletedTodoId(topicId)\n+        handleTodoDeletion(topicId).then((status) => {\n+            if (!status) {\n+                setDeletedTodoId('')\n+                setTodoListLocal([...todoListLocal]) //incase of failure render the previous state            }\n+            }\n+        })\n+    }\n+    const archiveTodoHandler = (todoId: string, value: boolean) => {\n+        setShowArchiveDialog(\n+            getOpenState(null, () => handleArchiveForTodo(todoId, value))\n+        )\n+    }\n+\n+    const handleArchiveForTodo = (topicId: string, value: boolean) => {\n+        setShowArchiveDialog(getClosedState())\n+        handleTodoArchive(topicId, value).then((status) => {})\n+    }\n+\n+    const editTodoCloseHandler = () => {\n+        setEditDialogState(getClosedState())\n+    }\n+\n+    //1: new todos\n+    //2: remaining todos\n+    //3: archived todos\n+    const todoTypeHeader = () => {\n+        match(todoType)\n+            .with(1, () => setTodoTableHeader(t('new-todos')))\n+            .with(2, () => setTodoTableHeader(t('remaining-todos')))\n+            .with(3, () => setTodoTableHeader(t('archived-todos')))\n+    }\n+\n+    const isMeetingReopenedOrTodosFromRemaining = useMemo(() => {\n+        return (\n+            (meeting.isReopened &&\n+                !meeting.availableActions.includes(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/185#discussion_r1793278018",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one/OneToOneLayout.tsx",
//         "line": null,
//         "comment": "change name of variable",
//         "commitId": "b39fbfeaa3d81d4fed59cfcc932b705021fc73ba",
//         "codeSnippet": "@@ -41,7 +40,7 @@ const OneToOneLayout: FC = () => {\n     } = useOneToOne()\n     const navigate = useNavigate()\n     const location = useLocation()\n-\n+    const [myEmployees, setMyEmployees] = useState<boolean>(false)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/187#discussion_r1794854371",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one/OneToOneLayout.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "b39fbfeaa3d81d4fed59cfcc932b705021fc73ba",
//         "codeSnippet": "@@ -41,7 +40,7 @@ const OneToOneLayout: FC = () => {\n     } = useOneToOne()\n     const navigate = useNavigate()\n     const location = useLocation()\n-\n+    const [myEmployees, setMyEmployees] = useState<boolean>(false)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/187#discussion_r1794889079",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/todo-table/styled.ts",
//         "line": null,
//         "comment": "remove unused theme",
//         "commitId": "d3fc2988e603ccdc5bce1a38becbde585312400a",
//         "codeSnippet": "@@ -33,3 +33,8 @@ export const StyledGridItem = styled(Grid)<{\n     animation: `${fadeIn} 0.5s ease-in forwards,\n         ${isSliding ? `${slideRightDisappear} 0.5s forwards` : 'none'}`\n }))\n+\n+export const DoneOnDate = styled(Typography)(({ theme }) => ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/190#discussion_r1796455469",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/todo-table/TodoTableBody.tsx",
//         "line": null,
//         "comment": "Remove duplicate code.\r\n <DateFormatter\r\n                                    sx={{ fontSize: '12px' }}\r\n                                    dateToFormat={todo.archived ? todo.archivedDate : todo.doneOn}\r\n                                    warning={false}\r\n                                />",
//         "commitId": "d3fc2988e603ccdc5bce1a38becbde585312400a",
//         "codeSnippet": "@@ -220,7 +221,19 @@ const TodoTableBody: FC<Props> = ({\n                             />\n                         )}\n                         <DoneOnDate>\n-                            {!todo.archived ? todo.doneOn : todo.archivedDate}\n+                            {!todo.archived ? (\n+                                <DateFormatter\n+                                    sx={{ fontSize: '12px' }}\n+                                    dateToFormat={todo.doneOn}\n+                                    warning={false}\n+                                />\n+                            ) : (\n+                                <DateFormatter\n+                                    sx={{ fontSize: '12px' }}\n+                                    dateToFormat={todo.archivedDate}\n+                                    warning={false}\n+                                />\n+                            )}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/190#discussion_r1796456371",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/Components/EmptyState/EmptyState.tsx",
//         "line": null,
//         "comment": "can we have meaningful name for message1 and message2",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -2,28 +2,45 @@ import { FC } from 'react'\n \n import { Box } from '@mui/system'\n \n-import { AlignCenter, Message1, Message2 } from './styled'\n+import { AlignCenter, Message1, Message2, StyledImage } from './styled'\n \n type Props = {\n     src: string\n     message1: string",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796829230",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/Components/EmptyState/EmptyState.tsx",
//         "line": null,
//         "comment": "should be of 1 type either string or number",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -2,28 +2,45 @@ import { FC } from 'react'\n \n import { Box } from '@mui/system'\n \n-import { AlignCenter, Message1, Message2 } from './styled'\n+import { AlignCenter, Message1, Message2, StyledImage } from './styled'\n \n type Props = {\n     src: string\n     message1: string\n     message2?: string\n+    imageSize?: {\n+        width: string | number",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796830454",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Dialogs/Add-Existing-Goal-Dialog/AddExistingGoalDialog.tsx",
//         "line": null,
//         "comment": "should not give type as undefined, by default not assigned variable is undefined",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,283 @@\n+import React, { useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter'\n+import EmptyState from '@/Components/EmptyState'\n+import SearchTextField from '@/Components/SearchTextField'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Superduper from '@/assets/Superduper.svg'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import { GoalDetail, GoalDetails } from '@/services/goal-management'\n+import { contentparser } from '@/services/template'\n+import { GoalTypeInOneToOne } from '@/services/topics'\n+import {\n+    Button,\n+    Checkbox,\n+    Dialog,\n+    DialogActions,\n+    DialogContent,\n+    DialogTitle,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Typography\n+} from '@mui/material'\n+import { height } from '@mui/system'\n+\n+import useMeeting from '../../useMeeting'\n+\n+type Props = {\n+    open: boolean\n+    handleClose: () => void\n+    handleAddGoal: (selectedGoals: GoalDetail[]) => void\n+    title: string\n+    goals: GoalDetails[]\n+    dialogGoalType: GoalTypeInOneToOne | undefined",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796833414",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Dialogs/Add-Existing-Goal-Dialog/AddExistingGoalDialog.tsx",
//         "line": null,
//         "comment": "use match().with() here instead of switch case",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,283 @@\n+import React, { useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter'\n+import EmptyState from '@/Components/EmptyState'\n+import SearchTextField from '@/Components/SearchTextField'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Superduper from '@/assets/Superduper.svg'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import { GoalDetail, GoalDetails } from '@/services/goal-management'\n+import { contentparser } from '@/services/template'\n+import { GoalTypeInOneToOne } from '@/services/topics'\n+import {\n+    Button,\n+    Checkbox,\n+    Dialog,\n+    DialogActions,\n+    DialogContent,\n+    DialogTitle,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Typography\n+} from '@mui/material'\n+import { height } from '@mui/system'\n+\n+import useMeeting from '../../useMeeting'\n+\n+type Props = {\n+    open: boolean\n+    handleClose: () => void\n+    handleAddGoal: (selectedGoals: GoalDetail[]) => void\n+    title: string\n+    goals: GoalDetails[]\n+    dialogGoalType: GoalTypeInOneToOne | undefined\n+}\n+\n+const AddExistingDialog: React.FC<Props> = ({\n+    open,\n+    handleClose,\n+    handleAddGoal,\n+    title,\n+    goals,\n+    dialogGoalType\n+}) => {\n+    const [selectedGoals, setSelectedGoals] = useState<GoalDetail[]>([])\n+    const [searchQuery, setSearchQuery] = useState<string>('')\n+    const { languageId } = useGlobal()\n+    const { userData } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+\n+    const getEmptyStateBox = () => {\n+        const username = contentparser(userData[0].ownerName, languageId)\n+        switch (dialogGoalType) {\n+            case GoalTypeInOneToOne.OBJECTIVE:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-objective-found')}\n+                        message2={`${t('no-objective-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.PDG:\n+                return (\n+                    <EmptyState\n+                        src={Superduper}\n+                        message1={t('no-pdg-found')}\n+                        message2={`${t('no-pdg-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.KPI:\n+                return (\n+                    <EmptyState\n+                        src={performance}\n+                        message1={t('no-kpi-found')}\n+                        message2={`${t('no-kpi-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            default:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-goal-found')}\n+                        message2={`${t('no-goal-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+        }\n+    }",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796837985",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Dialogs/Add-Existing-Goal-Dialog/AddExistingGoalDialog.tsx",
//         "line": 101,
//         "comment": "here to match.with()",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,283 @@\n+import React, { useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter'\n+import EmptyState from '@/Components/EmptyState'\n+import SearchTextField from '@/Components/SearchTextField'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Superduper from '@/assets/Superduper.svg'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import { GoalDetail, GoalDetails } from '@/services/goal-management'\n+import { contentparser } from '@/services/template'\n+import { GoalTypeInOneToOne } from '@/services/topics'\n+import {\n+    Button,\n+    Checkbox,\n+    Dialog,\n+    DialogActions,\n+    DialogContent,\n+    DialogTitle,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Typography\n+} from '@mui/material'\n+import { height } from '@mui/system'\n+\n+import useMeeting from '../../useMeeting'\n+\n+type Props = {\n+    open: boolean\n+    handleClose: () => void\n+    handleAddGoal: (selectedGoals: GoalDetail[]) => void\n+    title: string\n+    goals: GoalDetails[]\n+    dialogGoalType: GoalTypeInOneToOne | undefined\n+}\n+\n+const AddExistingDialog: React.FC<Props> = ({\n+    open,\n+    handleClose,\n+    handleAddGoal,\n+    title,\n+    goals,\n+    dialogGoalType\n+}) => {\n+    const [selectedGoals, setSelectedGoals] = useState<GoalDetail[]>([])\n+    const [searchQuery, setSearchQuery] = useState<string>('')\n+    const { languageId } = useGlobal()\n+    const { userData } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+\n+    const getEmptyStateBox = () => {\n+        const username = contentparser(userData[0].ownerName, languageId)\n+        switch (dialogGoalType) {\n+            case GoalTypeInOneToOne.OBJECTIVE:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-objective-found')}\n+                        message2={`${t('no-objective-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.PDG:\n+                return (\n+                    <EmptyState\n+                        src={Superduper}\n+                        message1={t('no-pdg-found')}\n+                        message2={`${t('no-pdg-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.KPI:\n+                return (\n+                    <EmptyState\n+                        src={performance}\n+                        message1={t('no-kpi-found')}\n+                        message2={`${t('no-kpi-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            default:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-goal-found')}\n+                        message2={`${t('no-goal-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+        }\n+    }\n+\n+    const getTitleColumnHeader = () => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796838346",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Dialogs/Add-Existing-Goal-Dialog/AddExistingGoalDialog.tsx",
//         "line": null,
//         "comment": "can use isEmpty(goals) from lodash for objects",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,283 @@\n+import React, { useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter'\n+import EmptyState from '@/Components/EmptyState'\n+import SearchTextField from '@/Components/SearchTextField'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Superduper from '@/assets/Superduper.svg'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import { GoalDetail, GoalDetails } from '@/services/goal-management'\n+import { contentparser } from '@/services/template'\n+import { GoalTypeInOneToOne } from '@/services/topics'\n+import {\n+    Button,\n+    Checkbox,\n+    Dialog,\n+    DialogActions,\n+    DialogContent,\n+    DialogTitle,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Typography\n+} from '@mui/material'\n+import { height } from '@mui/system'\n+\n+import useMeeting from '../../useMeeting'\n+\n+type Props = {\n+    open: boolean\n+    handleClose: () => void\n+    handleAddGoal: (selectedGoals: GoalDetail[]) => void\n+    title: string\n+    goals: GoalDetails[]\n+    dialogGoalType: GoalTypeInOneToOne | undefined\n+}\n+\n+const AddExistingDialog: React.FC<Props> = ({\n+    open,\n+    handleClose,\n+    handleAddGoal,\n+    title,\n+    goals,\n+    dialogGoalType\n+}) => {\n+    const [selectedGoals, setSelectedGoals] = useState<GoalDetail[]>([])\n+    const [searchQuery, setSearchQuery] = useState<string>('')\n+    const { languageId } = useGlobal()\n+    const { userData } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+\n+    const getEmptyStateBox = () => {\n+        const username = contentparser(userData[0].ownerName, languageId)\n+        switch (dialogGoalType) {\n+            case GoalTypeInOneToOne.OBJECTIVE:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-objective-found')}\n+                        message2={`${t('no-objective-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.PDG:\n+                return (\n+                    <EmptyState\n+                        src={Superduper}\n+                        message1={t('no-pdg-found')}\n+                        message2={`${t('no-pdg-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.KPI:\n+                return (\n+                    <EmptyState\n+                        src={performance}\n+                        message1={t('no-kpi-found')}\n+                        message2={`${t('no-kpi-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            default:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-goal-found')}\n+                        message2={`${t('no-goal-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+        }\n+    }\n+\n+    const getTitleColumnHeader = () => {\n+        switch (dialogGoalType) {\n+            case GoalTypeInOneToOne.OBJECTIVE:\n+                return t('objective')\n+            case GoalTypeInOneToOne.PDG:\n+                return t('pdg')\n+            case GoalTypeInOneToOne.KPI:\n+                return t('kpi')\n+            default:\n+                return ''\n+        }\n+    }\n+\n+    const handleSelect = (goal: GoalDetails) => {\n+        setSelectedGoals((prevSelected) =>\n+            prevSelected.some((selectedGoal) => selectedGoal.id === goal.goalId)\n+                ? prevSelected.filter(\n+                      (selectedGoal) => selectedGoal.id !== goal.goalId\n+                  )\n+                : [...prevSelected, { id: goal.goalId, type: goal.type }]\n+        )\n+    }\n+    // Handle selecting or deselecting all rows\n+    const handleSelectAll = (event: React.ChangeEvent<HTMLInputElement>) => {\n+        if (event.target.checked) {\n+            const allSelectedGoalDetail = filteredGoals.map<GoalDetail>(\n+                (goal) => {\n+                    return {\n+                        id: goal.goalId,\n+                        type: goal.type\n+                    }\n+                }\n+            )\n+            setSelectedGoals(allSelectedGoalDetail)\n+        } else {\n+            setSelectedGoals([])\n+        }\n+    }\n+    const onAddGoal = () => {\n+        handleAddGoal(selectedGoals)\n+        setSelectedGoals([])\n+    }\n+    const onClose = () => {\n+        handleClose()\n+        setSelectedGoals([])\n+    }\n+\n+    const filteredGoals = goals.filter((goal) =>\n+        goal.name.toLowerCase().includes(searchQuery.toLowerCase())\n+    )\n+\n+    // Determine if all rows are selected\n+    const isAllSelected =\n+        filteredGoals.length > 0 &&\n+        selectedGoals.length === filteredGoals.length\n+\n+    return (\n+        <Dialog open={open} onClose={onClose} maxWidth='md'>\n+            <DialogTitle sx={{ marginBottom: '8px' }}>\n+                <Typography variant='h6' fontWeight={600} color='primary.dark'>\n+                    {title}\n+                </Typography>\n+            </DialogTitle>\n+            <DialogContent>\n+                <SearchTextField\n+                    label='Search'\n+                    variant='outlined'\n+                    fullWidth\n+                    style={{ marginBottom: 16 }}\n+                    value={searchQuery}\n+                    onChange={(e) => setSearchQuery(e.target.value)}\n+                    sx={{ marginTop: '5px' }}\n+                />\n+                {goals.length === 0 ? (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796841702",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Dialogs/Add-Existing-Goal-Dialog/AddExistingGoalDialog.tsx",
//         "line": null,
//         "comment": "isEmpty(filteredGoals)",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,283 @@\n+import React, { useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter'\n+import EmptyState from '@/Components/EmptyState'\n+import SearchTextField from '@/Components/SearchTextField'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Superduper from '@/assets/Superduper.svg'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import { GoalDetail, GoalDetails } from '@/services/goal-management'\n+import { contentparser } from '@/services/template'\n+import { GoalTypeInOneToOne } from '@/services/topics'\n+import {\n+    Button,\n+    Checkbox,\n+    Dialog,\n+    DialogActions,\n+    DialogContent,\n+    DialogTitle,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Typography\n+} from '@mui/material'\n+import { height } from '@mui/system'\n+\n+import useMeeting from '../../useMeeting'\n+\n+type Props = {\n+    open: boolean\n+    handleClose: () => void\n+    handleAddGoal: (selectedGoals: GoalDetail[]) => void\n+    title: string\n+    goals: GoalDetails[]\n+    dialogGoalType: GoalTypeInOneToOne | undefined\n+}\n+\n+const AddExistingDialog: React.FC<Props> = ({\n+    open,\n+    handleClose,\n+    handleAddGoal,\n+    title,\n+    goals,\n+    dialogGoalType\n+}) => {\n+    const [selectedGoals, setSelectedGoals] = useState<GoalDetail[]>([])\n+    const [searchQuery, setSearchQuery] = useState<string>('')\n+    const { languageId } = useGlobal()\n+    const { userData } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+\n+    const getEmptyStateBox = () => {\n+        const username = contentparser(userData[0].ownerName, languageId)\n+        switch (dialogGoalType) {\n+            case GoalTypeInOneToOne.OBJECTIVE:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-objective-found')}\n+                        message2={`${t('no-objective-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.PDG:\n+                return (\n+                    <EmptyState\n+                        src={Superduper}\n+                        message1={t('no-pdg-found')}\n+                        message2={`${t('no-pdg-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.KPI:\n+                return (\n+                    <EmptyState\n+                        src={performance}\n+                        message1={t('no-kpi-found')}\n+                        message2={`${t('no-kpi-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            default:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-goal-found')}\n+                        message2={`${t('no-goal-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+        }\n+    }\n+\n+    const getTitleColumnHeader = () => {\n+        switch (dialogGoalType) {\n+            case GoalTypeInOneToOne.OBJECTIVE:\n+                return t('objective')\n+            case GoalTypeInOneToOne.PDG:\n+                return t('pdg')\n+            case GoalTypeInOneToOne.KPI:\n+                return t('kpi')\n+            default:\n+                return ''\n+        }\n+    }\n+\n+    const handleSelect = (goal: GoalDetails) => {\n+        setSelectedGoals((prevSelected) =>\n+            prevSelected.some((selectedGoal) => selectedGoal.id === goal.goalId)\n+                ? prevSelected.filter(\n+                      (selectedGoal) => selectedGoal.id !== goal.goalId\n+                  )\n+                : [...prevSelected, { id: goal.goalId, type: goal.type }]\n+        )\n+    }\n+    // Handle selecting or deselecting all rows\n+    const handleSelectAll = (event: React.ChangeEvent<HTMLInputElement>) => {\n+        if (event.target.checked) {\n+            const allSelectedGoalDetail = filteredGoals.map<GoalDetail>(\n+                (goal) => {\n+                    return {\n+                        id: goal.goalId,\n+                        type: goal.type\n+                    }\n+                }\n+            )\n+            setSelectedGoals(allSelectedGoalDetail)\n+        } else {\n+            setSelectedGoals([])\n+        }\n+    }\n+    const onAddGoal = () => {\n+        handleAddGoal(selectedGoals)\n+        setSelectedGoals([])\n+    }\n+    const onClose = () => {\n+        handleClose()\n+        setSelectedGoals([])\n+    }\n+\n+    const filteredGoals = goals.filter((goal) =>\n+        goal.name.toLowerCase().includes(searchQuery.toLowerCase())\n+    )\n+\n+    // Determine if all rows are selected\n+    const isAllSelected =\n+        filteredGoals.length > 0 &&\n+        selectedGoals.length === filteredGoals.length\n+\n+    return (\n+        <Dialog open={open} onClose={onClose} maxWidth='md'>\n+            <DialogTitle sx={{ marginBottom: '8px' }}>\n+                <Typography variant='h6' fontWeight={600} color='primary.dark'>\n+                    {title}\n+                </Typography>\n+            </DialogTitle>\n+            <DialogContent>\n+                <SearchTextField\n+                    label='Search'\n+                    variant='outlined'\n+                    fullWidth\n+                    style={{ marginBottom: 16 }}\n+                    value={searchQuery}\n+                    onChange={(e) => setSearchQuery(e.target.value)}\n+                    sx={{ marginTop: '5px' }}\n+                />\n+                {goals.length === 0 ? (\n+                    getEmptyStateBox()\n+                ) : (\n+                    <TableContainer>\n+                        <Table>\n+                            <TableHead>\n+                                <TableRow>\n+                                    <TableCell padding='checkbox'>\n+                                        <Checkbox\n+                                            checked={isAllSelected}\n+                                            indeterminate={\n+                                                selectedGoals.length > 0 &&\n+                                                selectedGoals.length <\n+                                                    filteredGoals.length\n+                                            }\n+                                            onChange={handleSelectAll}\n+                                        />\n+                                    </TableCell>\n+                                    <TableCell>\n+                                        <Typography fontWeight={700}>\n+                                            {getTitleColumnHeader()}\n+                                        </Typography>\n+                                    </TableCell>\n+                                    <TableCell>\n+                                        <Typography fontWeight={700}>\n+                                            {t('owner')}\n+                                        </Typography>\n+                                    </TableCell>\n+                                    <TableCell>\n+                                        <Typography fontWeight={700}>\n+                                            {t('deadline')}\n+                                        </Typography>\n+                                    </TableCell>\n+                                </TableRow>\n+                            </TableHead>\n+                            <TableBody>\n+                                {filteredGoals.length > 0 ? (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796843673",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingProvider.tsx",
//         "line": null,
//         "comment": "```\r\ncan use following to make more readable and less repatitive \r\nuseEffect(() => {\r\n    const completedStates = [\r\n        ProcessStateConstants.STATE_FINISHED_AND_SHARED_WITH_EMPLOYEE,\r\n        ProcessStateConstants.STATE_AWAITING_READ_CONFIRMATION_FROM_EMPLOYEE,\r\n        ProcessStateConstants.STATE_FINISHED_AND_KEPT_PRIVATE_FROM_EMPLOYEE,\r\n    ];\r\n    \r\n    setIsCompleted(completedStates.includes(meeting.currentState));\r\n}, [meeting]);\r\n```",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -151,6 +182,26 @@ const MeetingProvider: FCC = ({ children }) => {\n         }\n     }, [oneToOneId])\n \n+    useEffect(() => {\n+        const isCompleted =",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796846835",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/GoalManagementTopics.tsx",
//         "line": null,
//         "comment": "use match(). with and also seems like things are repetitive \r\n\r\nmatch(oneToOneTopicType.get(requestedGoalType))\r\n    .with(GoalTypeInOneToOne.PDG, GoalTypeInOneToOne.OBJECTIVE, GoalTypeInOneToOne.KPI, () => ({\r\n        isExpanded: shouldExpandByDefault,\r\n        type: requestedGoalType,\r\n        data: filteredItem\r\n    }))\r\n    .otherwise(() => ({\r\n        isExpanded: false,\r\n        type: requestedGoalType,\r\n        data: []\r\n    }));",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -1,10 +1,101 @@\n+import { FC, useEffect, useState } from 'react'\n import { useTranslation } from 'react-i18next'\n \n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { GoalTypeData } from '@/services/goal-management/types'\n+import { contentparser } from '@/services/template'\n+import {\n+    GoalManagementPage,\n+    GoalManagementPageResponse,\n+    GoalTypeInMonolith,\n+    GoalTypeInOneToOne,\n+    oneToOneTopicType\n+} from '@/services/topics/types'\n import { Alert, AlertTitle } from '@mui/material'\n import { Stack } from '@mui/system'\n \n-const GoalManagementTopics = () => {\n+import GoalSection from './Topic-type/goal-topics'\n+\n+type Props = {\n+    onClickAddExistingGoal: (goalType: GoalTypeInOneToOne) => void\n+    goalPageData: GoalManagementPageResponse\n+    handleDeleteTopic: (topicId: string) => void\n+    handleUpdateRemark: (remark: string, topicId: string) => void\n+}\n+\n+const GoalManagementTopics: FC<Props> = ({\n+    onClickAddExistingGoal,\n+    goalPageData,\n+    handleDeleteTopic,\n+    handleUpdateRemark\n+}) => {\n     const { t } = useTranslation('meeting')\n+    const { languageId } = useGlobal()\n+\n+    const [goalDataContainer, setGoalDataContainer] = useState<GoalTypeData[]>(\n+        []\n+    )\n+    const goalToDataContainerMap = new Map<GoalTypeInOneToOne, number>()\n+        .set(GoalTypeInOneToOne.PDG, 0)\n+        .set(GoalTypeInOneToOne.OBJECTIVE, 1)\n+        .set(GoalTypeInOneToOne.KPI, 2)\n+\n+    const filterGoalsByType = (\n+        finalData: GoalManagementPageResponse,\n+        requestedGoalType: number\n+    ): GoalTypeData => {\n+        let requestedObj: GoalTypeData = {\n+            isExpanded: false,\n+            type: requestedGoalType,\n+            data: []\n+        }\n+        const requestedGoal = oneToOneTopicType.get(requestedGoalType)\n+        const filteredItem = finalData?.topics?.filter(\n+            (topic: GoalManagementPage) => topic.type === requestedGoal\n+        )\n+        const shouldExpandByDefault = filteredItem.length > 0\n+        switch (oneToOneTopicType.get(requestedGoalType)) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796847972",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalActionButtons.tsx",
//         "line": null,
//         "comment": "can we use mui tags instead of directly using html tags\r\n```\r\n<Typography\r\n  component=\"span\"\r\n>\r\n<Button\r\n                                variant='text'\r\n                                disabled={\r\n                                    meeting.revieweeManager !==\r\n                                    meeting.reviewerId\r\n                                }\r\n                                onClick={onClickAddExistingGoal}\r\n                            >\r\n                                {t('add-existing-goal')}\r\n                            </Button>\r\n</Typography>\r\n```",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,48 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import useMeeting from '@/features/one-to-one-meeting/useMeeting'\n+import { Button, Tooltip } from '@mui/material'\n+\n+type Props = {\n+    onClickAddExistingGoal: () => void\n+}\n+\n+const GoalActionButtons: FC<Props> = ({ onClickAddExistingGoal }) => {\n+    const { meeting, goalSection, hideContextMenu } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+\n+    return (\n+        <FlexBox mt='12px'>\n+            <Button variant='outlined'>{t('add-new-goal')}</Button>\n+            {!hideContextMenu &&\n+                meeting.participantActive &&\n+                goalSection.addInlineTopic && (\n+                    <Tooltip\n+                        title={\n+                            meeting.revieweeManager !== meeting.reviewerId\n+                                ? t('only-managers-have-access')\n+                                : ''\n+                        }\n+                        arrow\n+                    >\n+                        <span>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796856011",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalSection.tsx",
//         "line": 47,
//         "comment": "`const handleAddExisitingGoalDialog = () => {\r\n    const goalType = goalData?.type && oneToOneTopicType.get(goalData.type);\r\n    if (goalType) {\r\n        onClickAddExistingGoal(goalType);\r\n    }\r\n};\r\n`",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,164 @@\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import EmptyState from '@/Components/EmptyState'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import Superduper from '@/assets/superduper.svg'\n+import { GoalTypeData } from '@/services/goal-management/types'\n+import {\n+    GoalTypeInMonolith,\n+    GoalTypeInOneToOne,\n+    oneToOneTopicType\n+} from '@/services/topics/types'\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Box,\n+    Typography\n+} from '@mui/material'\n+\n+import GoalActionButtons from './GoalActionButtons'\n+import GoalDetails from './GoalDetails'\n+\n+type Props = {\n+    onClickAddExistingGoal: (goalType: GoalTypeInOneToOne) => void\n+    goalData: GoalTypeData | undefined\n+    handleDeleteTopic: (topicId: string) => void\n+    handleUpdateRemark: (remark: string, topicId: string) => void\n+}\n+\n+const GoalSection: FC<Props> = ({\n+    goalData,\n+    onClickAddExistingGoal,\n+    handleDeleteTopic,\n+    handleUpdateRemark\n+}) => {\n+    const { t } = useTranslation('meeting')\n+    const [topicCount, setTopicCount] = useState<number>(0)\n+    const [expanded, setExpanded] = useState<boolean>(\n+        goalData ? goalData.isExpanded : false\n+    )\n+\n+    const handleAddExisitingGoalDialog = () => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796863620",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalSection.tsx",
//         "line": null,
//         "comment": "can avoid the duplicate code here\r\n```\r\nconst getEmptyState = () => {\r\n    const emptyStateConfig = {\r\n        [GoalTypeInMonolith.OBJECTIVE]: {\r\n            src: rocket,\r\n            message1: t('no-objective-added-yet'),\r\n            message2: t('no-objective-added-yet-description')\r\n        },\r\n        [GoalTypeInMonolith.PDG]: {\r\n            src: Superduper,\r\n            message1: t('no-pdg-added-yet'),\r\n            message2: t('no-pdg-added-yet-description')\r\n        },\r\n        [GoalTypeInMonolith.KPI]: {\r\n            src: performance,\r\n            message1: t('no-kpi-added-yet'),\r\n            message2: t('no-kpi-added-yet-description')\r\n        }\r\n    };\r\n\r\n    const config = emptyStateConfig[goalData?.type];\r\n    return config ? (\r\n        <EmptyState\r\n            imageSize={{ width: '100px', height: '100px' }}\r\n            src={config.src}\r\n            message1={config.message1}\r\n            message2={config.message2}\r\n            message1Size=\"16px\"\r\n            message2Size=\"14px\"\r\n        />\r\n    ) : '';\r\n};\r\n```\r\n",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,164 @@\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import EmptyState from '@/Components/EmptyState'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import Superduper from '@/assets/superduper.svg'\n+import { GoalTypeData } from '@/services/goal-management/types'\n+import {\n+    GoalTypeInMonolith,\n+    GoalTypeInOneToOne,\n+    oneToOneTopicType\n+} from '@/services/topics/types'\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Box,\n+    Typography\n+} from '@mui/material'\n+\n+import GoalActionButtons from './GoalActionButtons'\n+import GoalDetails from './GoalDetails'\n+\n+type Props = {\n+    onClickAddExistingGoal: (goalType: GoalTypeInOneToOne) => void\n+    goalData: GoalTypeData | undefined\n+    handleDeleteTopic: (topicId: string) => void\n+    handleUpdateRemark: (remark: string, topicId: string) => void\n+}\n+\n+const GoalSection: FC<Props> = ({\n+    goalData,\n+    onClickAddExistingGoal,\n+    handleDeleteTopic,\n+    handleUpdateRemark\n+}) => {\n+    const { t } = useTranslation('meeting')\n+    const [topicCount, setTopicCount] = useState<number>(0)\n+    const [expanded, setExpanded] = useState<boolean>(\n+        goalData ? goalData.isExpanded : false\n+    )\n+\n+    const handleAddExisitingGoalDialog = () => {\n+        if (goalData && goalData.type) {\n+            const goalType = oneToOneTopicType.get(goalData.type)\n+            if (goalType) {\n+                onClickAddExistingGoal(goalType)\n+            }\n+        }\n+    }\n+\n+    const handleToggleAccordion = () => {\n+        setExpanded((prevExpanded) => !prevExpanded)\n+    }\n+\n+    useEffect(() => {\n+        if (goalData && goalData.data) {\n+            setTopicCount(goalData.data.length)\n+        }\n+        setExpanded(goalData ? goalData.isExpanded : false)\n+    }, [goalData])\n+\n+    const getTitle = () => {\n+        switch (goalData && goalData.type) {\n+            case GoalTypeInMonolith.PDG:\n+                return t('pdg')\n+            case GoalTypeInMonolith.OBJECTIVE:\n+                return t('objective')\n+            case GoalTypeInMonolith.KPI:\n+                return t('kpi')\n+            default:\n+                return ''\n+        }\n+    }\n+\n+    const getEmptyState = () => {\n+        switch (goalData?.type) {\n+            case GoalTypeInMonolith.OBJECTIVE:\n+                return (\n+                    <EmptyState\n+                        imageSize={{ width: '100px', height: '100px' }}\n+                        src={rocket}\n+                        message1={t('no-objective-added-yet')}\n+                        message2={t('no-objective-added-yet-description')}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                    />\n+                )\n+            case GoalTypeInMonolith.PDG:\n+                return (\n+                    <EmptyState\n+                        imageSize={{ width: '100px', height: '100px' }}\n+                        src={Superduper}\n+                        message1={t('no-pdg-added-yet')}\n+                        message2={t('no-pdg-added-yet-description')}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                    />\n+                )\n+            case GoalTypeInMonolith.KPI:\n+                return (\n+                    <EmptyState\n+                        imageSize={{ width: '100px', height: '100px' }}\n+                        src={performance}\n+                        message1={t('no-kpi-added-yet')}\n+                        message2={t('no-kpi-added-yet-description')}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                    />\n+                )\n+            default:\n+                return ''\n+        }\n+    }",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796867300",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingProvider.tsx",
//         "line": 97,
//         "comment": "satisfies maybe?",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -72,7 +91,13 @@ export const MeetingContext = createContext<ContextProps>({\n     timestamp: '',\n     setTimeStamp: () => {},\n     availableActions: [],\n-    setAvailableActions: () => {}\n+    setAvailableActions: () => {},\n+    isCompleted: false,\n+    setIsCompleted: () => {},\n+    goalSection: {} as GoalManagementPageResponse,",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796870350",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Pages/GoalManagement.tsx",
//         "line": null,
//         "comment": "make sure to add following to avoid checks\r\nif(allGoals)\r\nreturn;",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -1,26 +1,225 @@\n-import { FC, useEffect } from 'react'\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n \n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import {\n+    addExistingOrNewGoals,\n+    deleteTopic,\n+    getGoalDetailsForOwner,\n+    saveRemark\n+} from '@/services/goal-management'\n+import { GoalDetail, GoalDetails } from '@/services/goal-management/types'\n import { getOneToOneMeetingSection, Section } from '@/services/one-to-one'\n+import { contentparser } from '@/services/template'\n+import { GoalTypeInOneToOne } from '@/services/topics'\n+import {\n+    GoalManagementPage,\n+    GoalManagementPageResponse,\n+    SectionType\n+} from '@/services/topics/types'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n import { CircularProgress, Typography } from '@mui/material'\n \n+import AddExistingGoalDialog from '../Dialogs/Add-Existing-Goal-Dialog/AddExistingGoalDialog'\n import GoalManagementTopics from '../PageTopics/GoalManagementTopics'\n import useMeeting from '../useMeeting'\n \n type Props = {\n     oneToOneId: string | null\n     section: Section\n }\n+\n const GoalManagement: FC<Props> = ({ oneToOneId, section }) => {\n-    const { handleLoading, loading } = useMeeting()\n+    const { handleLoading, loading, userData, setGoalSection } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+    const { createSnack } = useSnackbar()\n+\n+    const [goalPageData, setGoalPageData] =\n+        useState<GoalManagementPageResponse>({\n+            addInlineTopic: false,\n+            sectionType: 1,\n+            pageRemarksEnabled: true,\n+            description: '',\n+            pageRemarks: [],\n+            goalCreatePermissions: [],\n+            activeGoalTypes: [],\n+            topics: []\n+        })\n+    const [allGoals, setAllGoals] = useState<GoalDetails[]>([])\n+    const [addExistingGoalDialogOpen, setAddExistingGoalDialogOpen] =\n+        useState(false)\n+    const [addExistingGoalDialogTitle, setAddExistingGoalDialogTitle] =\n+        useState<string>('')\n+    const [addExistingDialogGoal, setAddExistingDialogGoal] = useState<\n+        GoalDetails[]\n+    >([])\n+    const [addExistingDialogGoalType, setAddExistingDialogGoalType] =\n+        useState<GoalTypeInOneToOne>()\n+\n+    const [reviewee] = userData\n+    const { languageId } = useGlobal()\n \n     useEffect(() => {\n         handleLoading(true)\n-        getOneToOneMeetingSection(oneToOneId, section?.sectionId).then(\n-            (res) => {\n+        getOneToOneMeetingSection(oneToOneId, section?.sectionId)\n+            .then((goalManagementPageResponse) => {\n+                setGoalPageData(goalManagementPageResponse)\n+                setGoalSection(goalManagementPageResponse)\n                 handleLoading(false)\n+            })\n+            .catch((err) => {\n+                createSnack({ alert: { severity: 'error' } })(\n+                    t('error-fetch-goal-page-data')\n+                )\n+                throw err\n+            })\n+            .finally(() => handleLoading(false))\n+    }, [])\n+\n+    // Function to delete the topic from the goal management page\n+    const handleDeleteTopic = (topicId: string) => {\n+        const originalTopics = [...goalPageData.topics]\n+        setGoalPageData((prev) => ({\n+            ...prev,\n+            topics: prev.topics.filter((topic) => topic.topicId !== topicId)\n+        }))\n+        setGoalSection((prev) => ({\n+            ...prev,\n+            topics: prev.topics.filter((topic) => topic.topicId !== topicId)\n+        }))\n+\n+        deleteTopic(oneToOneId, section.sectionId, topicId).catch((error) => {\n+            setGoalPageData((prev) => ({\n+                ...prev,\n+                topics: originalTopics\n+            }))\n+            setGoalSection((prev) => ({\n+                ...prev,\n+                topics: originalTopics\n+            }))\n+            createSnack({ alert: { severity: 'error' } })(\n+                t('error-deleting-topic')\n+            )\n+            throw error\n+        })\n+    }\n+\n+    const handleUpateRemark = (remark: string, topicId: string) => {\n+        saveRemark(oneToOneId, section.sectionId, topicId, remark).catch(\n+            (error) => {\n+                createSnack({ alert: { severity: 'error' } })(\n+                    t('error-saving-remark')\n+                )\n+                throw error\n             }\n         )\n-    }, [section])\n+    }\n+    // Removes the topics from add exisiting dialog that are already added in 1:1 meeting\n+    const filterExistingGoals = (goalDetails: GoalDetails[]) => {\n+        const finalTopicsIds = new Set(\n+            goalPageData.topics.map((topic) => topic.goalId)\n+        )\n+        return goalDetails\n+            .filter((goalDetail) => !finalTopicsIds.has(goalDetail.goalId))\n+            .map((goalDetail) => {\n+                return {\n+                    ...goalDetail,\n+                    ownerName: reviewee.ownerName\n+                }\n+            })\n+    }\n+    const filterGoalsByType = (\n+        goals: GoalDetails[],\n+        goalType: GoalTypeInOneToOne\n+    ): GoalDetails[] => {\n+        return goals.filter((goal) => goal.type === goalType)\n+    }\n+\n+    const getGoalsForAddExistingDialog = (goalType: GoalTypeInOneToOne) => {\n+        if (allGoals.length === 0) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796876803",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/services/goal-management/service.ts",
//         "line": null,
//         "comment": "remove commented code",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,72 @@\n+import axios from 'axios'\n+\n+import oneToOne from '@/features/one-to-one'\n+import { GoalManagementPage } from '@/services/topics/types'\n+\n+import { getData } from '../../utils/axios'\n+import { GoalDetails, GoalGenerationRequest } from './types'\n+\n+const BASE_URL = '/onetooneservice/v2/onetoones/'\n+export const getGoalDetailsForOwner = (\n+    oneToOneId: string | null,\n+    ownerId: string | null\n+) => {\n+    const url = `${BASE_URL}${oneToOneId}/goals?ownerId=${ownerId}`\n+    const config = {\n+        headers: {\n+            'Content-Type': 'application/json'\n+        },\n+        data: {}\n+    }\n+    return axios.get<GoalDetails[]>(url, config).then(getData)\n+}\n+\n+export const addExistingOrNewGoals = (\n+    oneToOneId: string | null,\n+    sectionId: string | null,\n+    goalGenerationRequest: GoalGenerationRequest\n+) => {\n+    const url = `${BASE_URL}${oneToOneId}/sections/${sectionId}/topics`\n+    return axios\n+        .post<GoalManagementPage[]>(url, goalGenerationRequest)\n+        .then(getData)\n+}\n+\n+export const deleteTopic = (\n+    oneToOneId: string | null,\n+    sectionId: string | null,\n+    topicId: string | null\n+) => {\n+    const url = `${BASE_URL}${oneToOneId}/sections/${sectionId}/topics/${topicId}`\n+    const config = {\n+        headers: {\n+            'Content-Type': 'application/json'\n+        },\n+        data: {}\n+    }\n+    return axios.delete<boolean>(url, config).then(getData)\n+}\n+\n+export const saveRemark = (\n+    oneToOneId: string | null,\n+    sectionId: string | null,\n+    topicId: string | null,\n+    remark: string\n+) => {\n+    const url = `${BASE_URL}${oneToOneId}/sections/${sectionId}/topics/${topicId}`\n+    // const config = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1796877506",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingProvider.tsx",
//         "line": 97,
//         "comment": "I tried using satisfies here but its not working , i was going through the code base and found other instances for being \"as\" used:\r\n\"meeting: {} as OneToOneMeetingResponse,\"\r\nso I think its fine.\r\nlet me know if there any thing else we can do to make it more type safe",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -72,7 +91,13 @@ export const MeetingContext = createContext<ContextProps>({\n     timestamp: '',\n     setTimeStamp: () => {},\n     availableActions: [],\n-    setAvailableActions: () => {}\n+    setAvailableActions: () => {},\n+    isCompleted: false,\n+    setIsCompleted: () => {},\n+    goalSection: {} as GoalManagementPageResponse,",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798740690",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/Components/EmptyState/EmptyState.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -2,28 +2,45 @@ import { FC } from 'react'\n \n import { Box } from '@mui/system'\n \n-import { AlignCenter, Message1, Message2 } from './styled'\n+import { AlignCenter, Message1, Message2, StyledImage } from './styled'\n \n type Props = {\n     src: string\n     message1: string",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798764892",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/Components/EmptyState/EmptyState.tsx",
//         "line": null,
//         "comment": "updated the type to <img> tags size types :\r\nimageSize?: {\r\n        width: ImgHTMLAttributes<HTMLImageElement>['width']\r\n        height: ImgHTMLAttributes<HTMLImageElement>['height']\r\n    }",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -2,28 +2,45 @@ import { FC } from 'react'\n \n import { Box } from '@mui/system'\n \n-import { AlignCenter, Message1, Message2 } from './styled'\n+import { AlignCenter, Message1, Message2, StyledImage } from './styled'\n \n type Props = {\n     src: string\n     message1: string\n     message2?: string\n+    imageSize?: {\n+        width: string | number",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798772111",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Dialogs/Add-Existing-Goal-Dialog/AddExistingGoalDialog.tsx",
//         "line": null,
//         "comment": "done,\r\nset a default value when state is created to avoid undefined value",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,283 @@\n+import React, { useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter'\n+import EmptyState from '@/Components/EmptyState'\n+import SearchTextField from '@/Components/SearchTextField'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Superduper from '@/assets/Superduper.svg'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import { GoalDetail, GoalDetails } from '@/services/goal-management'\n+import { contentparser } from '@/services/template'\n+import { GoalTypeInOneToOne } from '@/services/topics'\n+import {\n+    Button,\n+    Checkbox,\n+    Dialog,\n+    DialogActions,\n+    DialogContent,\n+    DialogTitle,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Typography\n+} from '@mui/material'\n+import { height } from '@mui/system'\n+\n+import useMeeting from '../../useMeeting'\n+\n+type Props = {\n+    open: boolean\n+    handleClose: () => void\n+    handleAddGoal: (selectedGoals: GoalDetail[]) => void\n+    title: string\n+    goals: GoalDetails[]\n+    dialogGoalType: GoalTypeInOneToOne | undefined",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798779053",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Dialogs/Add-Existing-Goal-Dialog/AddExistingGoalDialog.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,283 @@\n+import React, { useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter'\n+import EmptyState from '@/Components/EmptyState'\n+import SearchTextField from '@/Components/SearchTextField'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Superduper from '@/assets/Superduper.svg'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import { GoalDetail, GoalDetails } from '@/services/goal-management'\n+import { contentparser } from '@/services/template'\n+import { GoalTypeInOneToOne } from '@/services/topics'\n+import {\n+    Button,\n+    Checkbox,\n+    Dialog,\n+    DialogActions,\n+    DialogContent,\n+    DialogTitle,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Typography\n+} from '@mui/material'\n+import { height } from '@mui/system'\n+\n+import useMeeting from '../../useMeeting'\n+\n+type Props = {\n+    open: boolean\n+    handleClose: () => void\n+    handleAddGoal: (selectedGoals: GoalDetail[]) => void\n+    title: string\n+    goals: GoalDetails[]\n+    dialogGoalType: GoalTypeInOneToOne | undefined\n+}\n+\n+const AddExistingDialog: React.FC<Props> = ({\n+    open,\n+    handleClose,\n+    handleAddGoal,\n+    title,\n+    goals,\n+    dialogGoalType\n+}) => {\n+    const [selectedGoals, setSelectedGoals] = useState<GoalDetail[]>([])\n+    const [searchQuery, setSearchQuery] = useState<string>('')\n+    const { languageId } = useGlobal()\n+    const { userData } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+\n+    const getEmptyStateBox = () => {\n+        const username = contentparser(userData[0].ownerName, languageId)\n+        switch (dialogGoalType) {\n+            case GoalTypeInOneToOne.OBJECTIVE:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-objective-found')}\n+                        message2={`${t('no-objective-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.PDG:\n+                return (\n+                    <EmptyState\n+                        src={Superduper}\n+                        message1={t('no-pdg-found')}\n+                        message2={`${t('no-pdg-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.KPI:\n+                return (\n+                    <EmptyState\n+                        src={performance}\n+                        message1={t('no-kpi-found')}\n+                        message2={`${t('no-kpi-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            default:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-goal-found')}\n+                        message2={`${t('no-goal-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+        }\n+    }",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798791371",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Dialogs/Add-Existing-Goal-Dialog/AddExistingGoalDialog.tsx",
//         "line": 101,
//         "comment": "done",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,283 @@\n+import React, { useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter'\n+import EmptyState from '@/Components/EmptyState'\n+import SearchTextField from '@/Components/SearchTextField'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Superduper from '@/assets/Superduper.svg'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import { GoalDetail, GoalDetails } from '@/services/goal-management'\n+import { contentparser } from '@/services/template'\n+import { GoalTypeInOneToOne } from '@/services/topics'\n+import {\n+    Button,\n+    Checkbox,\n+    Dialog,\n+    DialogActions,\n+    DialogContent,\n+    DialogTitle,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Typography\n+} from '@mui/material'\n+import { height } from '@mui/system'\n+\n+import useMeeting from '../../useMeeting'\n+\n+type Props = {\n+    open: boolean\n+    handleClose: () => void\n+    handleAddGoal: (selectedGoals: GoalDetail[]) => void\n+    title: string\n+    goals: GoalDetails[]\n+    dialogGoalType: GoalTypeInOneToOne | undefined\n+}\n+\n+const AddExistingDialog: React.FC<Props> = ({\n+    open,\n+    handleClose,\n+    handleAddGoal,\n+    title,\n+    goals,\n+    dialogGoalType\n+}) => {\n+    const [selectedGoals, setSelectedGoals] = useState<GoalDetail[]>([])\n+    const [searchQuery, setSearchQuery] = useState<string>('')\n+    const { languageId } = useGlobal()\n+    const { userData } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+\n+    const getEmptyStateBox = () => {\n+        const username = contentparser(userData[0].ownerName, languageId)\n+        switch (dialogGoalType) {\n+            case GoalTypeInOneToOne.OBJECTIVE:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-objective-found')}\n+                        message2={`${t('no-objective-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.PDG:\n+                return (\n+                    <EmptyState\n+                        src={Superduper}\n+                        message1={t('no-pdg-found')}\n+                        message2={`${t('no-pdg-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.KPI:\n+                return (\n+                    <EmptyState\n+                        src={performance}\n+                        message1={t('no-kpi-found')}\n+                        message2={`${t('no-kpi-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            default:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-goal-found')}\n+                        message2={`${t('no-goal-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+        }\n+    }\n+\n+    const getTitleColumnHeader = () => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798794537",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Dialogs/Add-Existing-Goal-Dialog/AddExistingGoalDialog.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,283 @@\n+import React, { useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter'\n+import EmptyState from '@/Components/EmptyState'\n+import SearchTextField from '@/Components/SearchTextField'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Superduper from '@/assets/Superduper.svg'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import { GoalDetail, GoalDetails } from '@/services/goal-management'\n+import { contentparser } from '@/services/template'\n+import { GoalTypeInOneToOne } from '@/services/topics'\n+import {\n+    Button,\n+    Checkbox,\n+    Dialog,\n+    DialogActions,\n+    DialogContent,\n+    DialogTitle,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Typography\n+} from '@mui/material'\n+import { height } from '@mui/system'\n+\n+import useMeeting from '../../useMeeting'\n+\n+type Props = {\n+    open: boolean\n+    handleClose: () => void\n+    handleAddGoal: (selectedGoals: GoalDetail[]) => void\n+    title: string\n+    goals: GoalDetails[]\n+    dialogGoalType: GoalTypeInOneToOne | undefined\n+}\n+\n+const AddExistingDialog: React.FC<Props> = ({\n+    open,\n+    handleClose,\n+    handleAddGoal,\n+    title,\n+    goals,\n+    dialogGoalType\n+}) => {\n+    const [selectedGoals, setSelectedGoals] = useState<GoalDetail[]>([])\n+    const [searchQuery, setSearchQuery] = useState<string>('')\n+    const { languageId } = useGlobal()\n+    const { userData } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+\n+    const getEmptyStateBox = () => {\n+        const username = contentparser(userData[0].ownerName, languageId)\n+        switch (dialogGoalType) {\n+            case GoalTypeInOneToOne.OBJECTIVE:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-objective-found')}\n+                        message2={`${t('no-objective-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.PDG:\n+                return (\n+                    <EmptyState\n+                        src={Superduper}\n+                        message1={t('no-pdg-found')}\n+                        message2={`${t('no-pdg-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.KPI:\n+                return (\n+                    <EmptyState\n+                        src={performance}\n+                        message1={t('no-kpi-found')}\n+                        message2={`${t('no-kpi-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            default:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-goal-found')}\n+                        message2={`${t('no-goal-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+        }\n+    }\n+\n+    const getTitleColumnHeader = () => {\n+        switch (dialogGoalType) {\n+            case GoalTypeInOneToOne.OBJECTIVE:\n+                return t('objective')\n+            case GoalTypeInOneToOne.PDG:\n+                return t('pdg')\n+            case GoalTypeInOneToOne.KPI:\n+                return t('kpi')\n+            default:\n+                return ''\n+        }\n+    }\n+\n+    const handleSelect = (goal: GoalDetails) => {\n+        setSelectedGoals((prevSelected) =>\n+            prevSelected.some((selectedGoal) => selectedGoal.id === goal.goalId)\n+                ? prevSelected.filter(\n+                      (selectedGoal) => selectedGoal.id !== goal.goalId\n+                  )\n+                : [...prevSelected, { id: goal.goalId, type: goal.type }]\n+        )\n+    }\n+    // Handle selecting or deselecting all rows\n+    const handleSelectAll = (event: React.ChangeEvent<HTMLInputElement>) => {\n+        if (event.target.checked) {\n+            const allSelectedGoalDetail = filteredGoals.map<GoalDetail>(\n+                (goal) => {\n+                    return {\n+                        id: goal.goalId,\n+                        type: goal.type\n+                    }\n+                }\n+            )\n+            setSelectedGoals(allSelectedGoalDetail)\n+        } else {\n+            setSelectedGoals([])\n+        }\n+    }\n+    const onAddGoal = () => {\n+        handleAddGoal(selectedGoals)\n+        setSelectedGoals([])\n+    }\n+    const onClose = () => {\n+        handleClose()\n+        setSelectedGoals([])\n+    }\n+\n+    const filteredGoals = goals.filter((goal) =>\n+        goal.name.toLowerCase().includes(searchQuery.toLowerCase())\n+    )\n+\n+    // Determine if all rows are selected\n+    const isAllSelected =\n+        filteredGoals.length > 0 &&\n+        selectedGoals.length === filteredGoals.length\n+\n+    return (\n+        <Dialog open={open} onClose={onClose} maxWidth='md'>\n+            <DialogTitle sx={{ marginBottom: '8px' }}>\n+                <Typography variant='h6' fontWeight={600} color='primary.dark'>\n+                    {title}\n+                </Typography>\n+            </DialogTitle>\n+            <DialogContent>\n+                <SearchTextField\n+                    label='Search'\n+                    variant='outlined'\n+                    fullWidth\n+                    style={{ marginBottom: 16 }}\n+                    value={searchQuery}\n+                    onChange={(e) => setSearchQuery(e.target.value)}\n+                    sx={{ marginTop: '5px' }}\n+                />\n+                {goals.length === 0 ? (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798831121",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Dialogs/Add-Existing-Goal-Dialog/AddExistingGoalDialog.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,283 @@\n+import React, { useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter'\n+import EmptyState from '@/Components/EmptyState'\n+import SearchTextField from '@/Components/SearchTextField'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import Superduper from '@/assets/Superduper.svg'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import { GoalDetail, GoalDetails } from '@/services/goal-management'\n+import { contentparser } from '@/services/template'\n+import { GoalTypeInOneToOne } from '@/services/topics'\n+import {\n+    Button,\n+    Checkbox,\n+    Dialog,\n+    DialogActions,\n+    DialogContent,\n+    DialogTitle,\n+    Table,\n+    TableBody,\n+    TableCell,\n+    TableContainer,\n+    TableHead,\n+    TableRow,\n+    Typography\n+} from '@mui/material'\n+import { height } from '@mui/system'\n+\n+import useMeeting from '../../useMeeting'\n+\n+type Props = {\n+    open: boolean\n+    handleClose: () => void\n+    handleAddGoal: (selectedGoals: GoalDetail[]) => void\n+    title: string\n+    goals: GoalDetails[]\n+    dialogGoalType: GoalTypeInOneToOne | undefined\n+}\n+\n+const AddExistingDialog: React.FC<Props> = ({\n+    open,\n+    handleClose,\n+    handleAddGoal,\n+    title,\n+    goals,\n+    dialogGoalType\n+}) => {\n+    const [selectedGoals, setSelectedGoals] = useState<GoalDetail[]>([])\n+    const [searchQuery, setSearchQuery] = useState<string>('')\n+    const { languageId } = useGlobal()\n+    const { userData } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+\n+    const getEmptyStateBox = () => {\n+        const username = contentparser(userData[0].ownerName, languageId)\n+        switch (dialogGoalType) {\n+            case GoalTypeInOneToOne.OBJECTIVE:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-objective-found')}\n+                        message2={`${t('no-objective-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.PDG:\n+                return (\n+                    <EmptyState\n+                        src={Superduper}\n+                        message1={t('no-pdg-found')}\n+                        message2={`${t('no-pdg-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            case GoalTypeInOneToOne.KPI:\n+                return (\n+                    <EmptyState\n+                        src={performance}\n+                        message1={t('no-kpi-found')}\n+                        message2={`${t('no-kpi-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+            default:\n+                return (\n+                    <EmptyState\n+                        src={rocket}\n+                        message1={t('no-goal-found')}\n+                        message2={`${t('no-goal-found-description')} ${username}.`}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                        imageSize={{ height: '100px', width: '100px' }}\n+                    />\n+                )\n+        }\n+    }\n+\n+    const getTitleColumnHeader = () => {\n+        switch (dialogGoalType) {\n+            case GoalTypeInOneToOne.OBJECTIVE:\n+                return t('objective')\n+            case GoalTypeInOneToOne.PDG:\n+                return t('pdg')\n+            case GoalTypeInOneToOne.KPI:\n+                return t('kpi')\n+            default:\n+                return ''\n+        }\n+    }\n+\n+    const handleSelect = (goal: GoalDetails) => {\n+        setSelectedGoals((prevSelected) =>\n+            prevSelected.some((selectedGoal) => selectedGoal.id === goal.goalId)\n+                ? prevSelected.filter(\n+                      (selectedGoal) => selectedGoal.id !== goal.goalId\n+                  )\n+                : [...prevSelected, { id: goal.goalId, type: goal.type }]\n+        )\n+    }\n+    // Handle selecting or deselecting all rows\n+    const handleSelectAll = (event: React.ChangeEvent<HTMLInputElement>) => {\n+        if (event.target.checked) {\n+            const allSelectedGoalDetail = filteredGoals.map<GoalDetail>(\n+                (goal) => {\n+                    return {\n+                        id: goal.goalId,\n+                        type: goal.type\n+                    }\n+                }\n+            )\n+            setSelectedGoals(allSelectedGoalDetail)\n+        } else {\n+            setSelectedGoals([])\n+        }\n+    }\n+    const onAddGoal = () => {\n+        handleAddGoal(selectedGoals)\n+        setSelectedGoals([])\n+    }\n+    const onClose = () => {\n+        handleClose()\n+        setSelectedGoals([])\n+    }\n+\n+    const filteredGoals = goals.filter((goal) =>\n+        goal.name.toLowerCase().includes(searchQuery.toLowerCase())\n+    )\n+\n+    // Determine if all rows are selected\n+    const isAllSelected =\n+        filteredGoals.length > 0 &&\n+        selectedGoals.length === filteredGoals.length\n+\n+    return (\n+        <Dialog open={open} onClose={onClose} maxWidth='md'>\n+            <DialogTitle sx={{ marginBottom: '8px' }}>\n+                <Typography variant='h6' fontWeight={600} color='primary.dark'>\n+                    {title}\n+                </Typography>\n+            </DialogTitle>\n+            <DialogContent>\n+                <SearchTextField\n+                    label='Search'\n+                    variant='outlined'\n+                    fullWidth\n+                    style={{ marginBottom: 16 }}\n+                    value={searchQuery}\n+                    onChange={(e) => setSearchQuery(e.target.value)}\n+                    sx={{ marginTop: '5px' }}\n+                />\n+                {goals.length === 0 ? (\n+                    getEmptyStateBox()\n+                ) : (\n+                    <TableContainer>\n+                        <Table>\n+                            <TableHead>\n+                                <TableRow>\n+                                    <TableCell padding='checkbox'>\n+                                        <Checkbox\n+                                            checked={isAllSelected}\n+                                            indeterminate={\n+                                                selectedGoals.length > 0 &&\n+                                                selectedGoals.length <\n+                                                    filteredGoals.length\n+                                            }\n+                                            onChange={handleSelectAll}\n+                                        />\n+                                    </TableCell>\n+                                    <TableCell>\n+                                        <Typography fontWeight={700}>\n+                                            {getTitleColumnHeader()}\n+                                        </Typography>\n+                                    </TableCell>\n+                                    <TableCell>\n+                                        <Typography fontWeight={700}>\n+                                            {t('owner')}\n+                                        </Typography>\n+                                    </TableCell>\n+                                    <TableCell>\n+                                        <Typography fontWeight={700}>\n+                                            {t('deadline')}\n+                                        </Typography>\n+                                    </TableCell>\n+                                </TableRow>\n+                            </TableHead>\n+                            <TableBody>\n+                                {filteredGoals.length > 0 ? (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798831199",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingProvider.tsx",
//         "line": null,
//         "comment": "done\r\n",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -151,6 +182,26 @@ const MeetingProvider: FCC = ({ children }) => {\n         }\n     }, [oneToOneId])\n \n+    useEffect(() => {\n+        const isCompleted =",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798839527",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/GoalManagementTopics.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -1,10 +1,101 @@\n+import { FC, useEffect, useState } from 'react'\n import { useTranslation } from 'react-i18next'\n \n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { GoalTypeData } from '@/services/goal-management/types'\n+import { contentparser } from '@/services/template'\n+import {\n+    GoalManagementPage,\n+    GoalManagementPageResponse,\n+    GoalTypeInMonolith,\n+    GoalTypeInOneToOne,\n+    oneToOneTopicType\n+} from '@/services/topics/types'\n import { Alert, AlertTitle } from '@mui/material'\n import { Stack } from '@mui/system'\n \n-const GoalManagementTopics = () => {\n+import GoalSection from './Topic-type/goal-topics'\n+\n+type Props = {\n+    onClickAddExistingGoal: (goalType: GoalTypeInOneToOne) => void\n+    goalPageData: GoalManagementPageResponse\n+    handleDeleteTopic: (topicId: string) => void\n+    handleUpdateRemark: (remark: string, topicId: string) => void\n+}\n+\n+const GoalManagementTopics: FC<Props> = ({\n+    onClickAddExistingGoal,\n+    goalPageData,\n+    handleDeleteTopic,\n+    handleUpdateRemark\n+}) => {\n     const { t } = useTranslation('meeting')\n+    const { languageId } = useGlobal()\n+\n+    const [goalDataContainer, setGoalDataContainer] = useState<GoalTypeData[]>(\n+        []\n+    )\n+    const goalToDataContainerMap = new Map<GoalTypeInOneToOne, number>()\n+        .set(GoalTypeInOneToOne.PDG, 0)\n+        .set(GoalTypeInOneToOne.OBJECTIVE, 1)\n+        .set(GoalTypeInOneToOne.KPI, 2)\n+\n+    const filterGoalsByType = (\n+        finalData: GoalManagementPageResponse,\n+        requestedGoalType: number\n+    ): GoalTypeData => {\n+        let requestedObj: GoalTypeData = {\n+            isExpanded: false,\n+            type: requestedGoalType,\n+            data: []\n+        }\n+        const requestedGoal = oneToOneTopicType.get(requestedGoalType)\n+        const filteredItem = finalData?.topics?.filter(\n+            (topic: GoalManagementPage) => topic.type === requestedGoal\n+        )\n+        const shouldExpandByDefault = filteredItem.length > 0\n+        switch (oneToOneTopicType.get(requestedGoalType)) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798878537",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalActionButtons.tsx",
//         "line": null,
//         "comment": "replaced by Box",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,48 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import useMeeting from '@/features/one-to-one-meeting/useMeeting'\n+import { Button, Tooltip } from '@mui/material'\n+\n+type Props = {\n+    onClickAddExistingGoal: () => void\n+}\n+\n+const GoalActionButtons: FC<Props> = ({ onClickAddExistingGoal }) => {\n+    const { meeting, goalSection, hideContextMenu } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+\n+    return (\n+        <FlexBox mt='12px'>\n+            <Button variant='outlined'>{t('add-new-goal')}</Button>\n+            {!hideContextMenu &&\n+                meeting.participantActive &&\n+                goalSection.addInlineTopic && (\n+                    <Tooltip\n+                        title={\n+                            meeting.revieweeManager !== meeting.reviewerId\n+                                ? t('only-managers-have-access')\n+                                : ''\n+                        }\n+                        arrow\n+                    >\n+                        <span>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798890383",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalSection.tsx",
//         "line": 47,
//         "comment": "done",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,164 @@\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import EmptyState from '@/Components/EmptyState'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import Superduper from '@/assets/superduper.svg'\n+import { GoalTypeData } from '@/services/goal-management/types'\n+import {\n+    GoalTypeInMonolith,\n+    GoalTypeInOneToOne,\n+    oneToOneTopicType\n+} from '@/services/topics/types'\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Box,\n+    Typography\n+} from '@mui/material'\n+\n+import GoalActionButtons from './GoalActionButtons'\n+import GoalDetails from './GoalDetails'\n+\n+type Props = {\n+    onClickAddExistingGoal: (goalType: GoalTypeInOneToOne) => void\n+    goalData: GoalTypeData | undefined\n+    handleDeleteTopic: (topicId: string) => void\n+    handleUpdateRemark: (remark: string, topicId: string) => void\n+}\n+\n+const GoalSection: FC<Props> = ({\n+    goalData,\n+    onClickAddExistingGoal,\n+    handleDeleteTopic,\n+    handleUpdateRemark\n+}) => {\n+    const { t } = useTranslation('meeting')\n+    const [topicCount, setTopicCount] = useState<number>(0)\n+    const [expanded, setExpanded] = useState<boolean>(\n+        goalData ? goalData.isExpanded : false\n+    )\n+\n+    const handleAddExisitingGoalDialog = () => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798898405",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalSection.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,164 @@\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import EmptyState from '@/Components/EmptyState'\n+import performance from '@/assets/performance.svg'\n+import rocket from '@/assets/rocket.svg'\n+import Superduper from '@/assets/superduper.svg'\n+import { GoalTypeData } from '@/services/goal-management/types'\n+import {\n+    GoalTypeInMonolith,\n+    GoalTypeInOneToOne,\n+    oneToOneTopicType\n+} from '@/services/topics/types'\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n+import {\n+    Accordion,\n+    AccordionDetails,\n+    AccordionSummary,\n+    Box,\n+    Typography\n+} from '@mui/material'\n+\n+import GoalActionButtons from './GoalActionButtons'\n+import GoalDetails from './GoalDetails'\n+\n+type Props = {\n+    onClickAddExistingGoal: (goalType: GoalTypeInOneToOne) => void\n+    goalData: GoalTypeData | undefined\n+    handleDeleteTopic: (topicId: string) => void\n+    handleUpdateRemark: (remark: string, topicId: string) => void\n+}\n+\n+const GoalSection: FC<Props> = ({\n+    goalData,\n+    onClickAddExistingGoal,\n+    handleDeleteTopic,\n+    handleUpdateRemark\n+}) => {\n+    const { t } = useTranslation('meeting')\n+    const [topicCount, setTopicCount] = useState<number>(0)\n+    const [expanded, setExpanded] = useState<boolean>(\n+        goalData ? goalData.isExpanded : false\n+    )\n+\n+    const handleAddExisitingGoalDialog = () => {\n+        if (goalData && goalData.type) {\n+            const goalType = oneToOneTopicType.get(goalData.type)\n+            if (goalType) {\n+                onClickAddExistingGoal(goalType)\n+            }\n+        }\n+    }\n+\n+    const handleToggleAccordion = () => {\n+        setExpanded((prevExpanded) => !prevExpanded)\n+    }\n+\n+    useEffect(() => {\n+        if (goalData && goalData.data) {\n+            setTopicCount(goalData.data.length)\n+        }\n+        setExpanded(goalData ? goalData.isExpanded : false)\n+    }, [goalData])\n+\n+    const getTitle = () => {\n+        switch (goalData && goalData.type) {\n+            case GoalTypeInMonolith.PDG:\n+                return t('pdg')\n+            case GoalTypeInMonolith.OBJECTIVE:\n+                return t('objective')\n+            case GoalTypeInMonolith.KPI:\n+                return t('kpi')\n+            default:\n+                return ''\n+        }\n+    }\n+\n+    const getEmptyState = () => {\n+        switch (goalData?.type) {\n+            case GoalTypeInMonolith.OBJECTIVE:\n+                return (\n+                    <EmptyState\n+                        imageSize={{ width: '100px', height: '100px' }}\n+                        src={rocket}\n+                        message1={t('no-objective-added-yet')}\n+                        message2={t('no-objective-added-yet-description')}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                    />\n+                )\n+            case GoalTypeInMonolith.PDG:\n+                return (\n+                    <EmptyState\n+                        imageSize={{ width: '100px', height: '100px' }}\n+                        src={Superduper}\n+                        message1={t('no-pdg-added-yet')}\n+                        message2={t('no-pdg-added-yet-description')}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                    />\n+                )\n+            case GoalTypeInMonolith.KPI:\n+                return (\n+                    <EmptyState\n+                        imageSize={{ width: '100px', height: '100px' }}\n+                        src={performance}\n+                        message1={t('no-kpi-added-yet')}\n+                        message2={t('no-kpi-added-yet-description')}\n+                        message1Size='16px'\n+                        message2Size='14px'\n+                    />\n+                )\n+            default:\n+                return ''\n+        }\n+    }",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798914924",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Pages/GoalManagement.tsx",
//         "line": null,
//         "comment": "this is to check if the data is present in the array, not to make the API call else make the call",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -1,26 +1,225 @@\n-import { FC, useEffect } from 'react'\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n \n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import {\n+    addExistingOrNewGoals,\n+    deleteTopic,\n+    getGoalDetailsForOwner,\n+    saveRemark\n+} from '@/services/goal-management'\n+import { GoalDetail, GoalDetails } from '@/services/goal-management/types'\n import { getOneToOneMeetingSection, Section } from '@/services/one-to-one'\n+import { contentparser } from '@/services/template'\n+import { GoalTypeInOneToOne } from '@/services/topics'\n+import {\n+    GoalManagementPage,\n+    GoalManagementPageResponse,\n+    SectionType\n+} from '@/services/topics/types'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n import { CircularProgress, Typography } from '@mui/material'\n \n+import AddExistingGoalDialog from '../Dialogs/Add-Existing-Goal-Dialog/AddExistingGoalDialog'\n import GoalManagementTopics from '../PageTopics/GoalManagementTopics'\n import useMeeting from '../useMeeting'\n \n type Props = {\n     oneToOneId: string | null\n     section: Section\n }\n+\n const GoalManagement: FC<Props> = ({ oneToOneId, section }) => {\n-    const { handleLoading, loading } = useMeeting()\n+    const { handleLoading, loading, userData, setGoalSection } = useMeeting()\n+    const { t } = useTranslation('meeting')\n+    const { createSnack } = useSnackbar()\n+\n+    const [goalPageData, setGoalPageData] =\n+        useState<GoalManagementPageResponse>({\n+            addInlineTopic: false,\n+            sectionType: 1,\n+            pageRemarksEnabled: true,\n+            description: '',\n+            pageRemarks: [],\n+            goalCreatePermissions: [],\n+            activeGoalTypes: [],\n+            topics: []\n+        })\n+    const [allGoals, setAllGoals] = useState<GoalDetails[]>([])\n+    const [addExistingGoalDialogOpen, setAddExistingGoalDialogOpen] =\n+        useState(false)\n+    const [addExistingGoalDialogTitle, setAddExistingGoalDialogTitle] =\n+        useState<string>('')\n+    const [addExistingDialogGoal, setAddExistingDialogGoal] = useState<\n+        GoalDetails[]\n+    >([])\n+    const [addExistingDialogGoalType, setAddExistingDialogGoalType] =\n+        useState<GoalTypeInOneToOne>()\n+\n+    const [reviewee] = userData\n+    const { languageId } = useGlobal()\n \n     useEffect(() => {\n         handleLoading(true)\n-        getOneToOneMeetingSection(oneToOneId, section?.sectionId).then(\n-            (res) => {\n+        getOneToOneMeetingSection(oneToOneId, section?.sectionId)\n+            .then((goalManagementPageResponse) => {\n+                setGoalPageData(goalManagementPageResponse)\n+                setGoalSection(goalManagementPageResponse)\n                 handleLoading(false)\n+            })\n+            .catch((err) => {\n+                createSnack({ alert: { severity: 'error' } })(\n+                    t('error-fetch-goal-page-data')\n+                )\n+                throw err\n+            })\n+            .finally(() => handleLoading(false))\n+    }, [])\n+\n+    // Function to delete the topic from the goal management page\n+    const handleDeleteTopic = (topicId: string) => {\n+        const originalTopics = [...goalPageData.topics]\n+        setGoalPageData((prev) => ({\n+            ...prev,\n+            topics: prev.topics.filter((topic) => topic.topicId !== topicId)\n+        }))\n+        setGoalSection((prev) => ({\n+            ...prev,\n+            topics: prev.topics.filter((topic) => topic.topicId !== topicId)\n+        }))\n+\n+        deleteTopic(oneToOneId, section.sectionId, topicId).catch((error) => {\n+            setGoalPageData((prev) => ({\n+                ...prev,\n+                topics: originalTopics\n+            }))\n+            setGoalSection((prev) => ({\n+                ...prev,\n+                topics: originalTopics\n+            }))\n+            createSnack({ alert: { severity: 'error' } })(\n+                t('error-deleting-topic')\n+            )\n+            throw error\n+        })\n+    }\n+\n+    const handleUpateRemark = (remark: string, topicId: string) => {\n+        saveRemark(oneToOneId, section.sectionId, topicId, remark).catch(\n+            (error) => {\n+                createSnack({ alert: { severity: 'error' } })(\n+                    t('error-saving-remark')\n+                )\n+                throw error\n             }\n         )\n-    }, [section])\n+    }\n+    // Removes the topics from add exisiting dialog that are already added in 1:1 meeting\n+    const filterExistingGoals = (goalDetails: GoalDetails[]) => {\n+        const finalTopicsIds = new Set(\n+            goalPageData.topics.map((topic) => topic.goalId)\n+        )\n+        return goalDetails\n+            .filter((goalDetail) => !finalTopicsIds.has(goalDetail.goalId))\n+            .map((goalDetail) => {\n+                return {\n+                    ...goalDetail,\n+                    ownerName: reviewee.ownerName\n+                }\n+            })\n+    }\n+    const filterGoalsByType = (\n+        goals: GoalDetails[],\n+        goalType: GoalTypeInOneToOne\n+    ): GoalDetails[] => {\n+        return goals.filter((goal) => goal.type === goalType)\n+    }\n+\n+    const getGoalsForAddExistingDialog = (goalType: GoalTypeInOneToOne) => {\n+        if (allGoals.length === 0) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798926188",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/services/goal-management/service.ts",
//         "line": null,
//         "comment": "done",
//         "commitId": "e2fa4a99f5bc58f55199084e4d769becaaceb396",
//         "codeSnippet": "@@ -0,0 +1,72 @@\n+import axios from 'axios'\n+\n+import oneToOne from '@/features/one-to-one'\n+import { GoalManagementPage } from '@/services/topics/types'\n+\n+import { getData } from '../../utils/axios'\n+import { GoalDetails, GoalGenerationRequest } from './types'\n+\n+const BASE_URL = '/onetooneservice/v2/onetoones/'\n+export const getGoalDetailsForOwner = (\n+    oneToOneId: string | null,\n+    ownerId: string | null\n+) => {\n+    const url = `${BASE_URL}${oneToOneId}/goals?ownerId=${ownerId}`\n+    const config = {\n+        headers: {\n+            'Content-Type': 'application/json'\n+        },\n+        data: {}\n+    }\n+    return axios.get<GoalDetails[]>(url, config).then(getData)\n+}\n+\n+export const addExistingOrNewGoals = (\n+    oneToOneId: string | null,\n+    sectionId: string | null,\n+    goalGenerationRequest: GoalGenerationRequest\n+) => {\n+    const url = `${BASE_URL}${oneToOneId}/sections/${sectionId}/topics`\n+    return axios\n+        .post<GoalManagementPage[]>(url, goalGenerationRequest)\n+        .then(getData)\n+}\n+\n+export const deleteTopic = (\n+    oneToOneId: string | null,\n+    sectionId: string | null,\n+    topicId: string | null\n+) => {\n+    const url = `${BASE_URL}${oneToOneId}/sections/${sectionId}/topics/${topicId}`\n+    const config = {\n+        headers: {\n+            'Content-Type': 'application/json'\n+        },\n+        data: {}\n+    }\n+    return axios.delete<boolean>(url, config).then(getData)\n+}\n+\n+export const saveRemark = (\n+    oneToOneId: string | null,\n+    sectionId: string | null,\n+    topicId: string | null,\n+    remark: string\n+) => {\n+    const url = `${BASE_URL}${oneToOneId}/sections/${sectionId}/topics/${topicId}`\n+    // const config = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/189#discussion_r1798929296",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/locales/da-DK/hr-insights.json",
//         "line": null,
//         "comment": "why translations are removed?\r\n",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -1,17 +1,17 @@\n {\n-  \"error1\": \"No insights available\",\n-  \"error2\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n-  \"started-by-manager\": \"Startet af leder\",\n-  \"started-by-hr-manager\": \"Startet af HR leder\",\n-  \"started-by-subordinate\": \"Startet af medarbejder\",\n-  \"started-by-hr-assistant\": \"Started by HR assistant\",\n-  \"started-by-others\": \"Started by others\",\n-  \"completed-meetings\": \"Gennemførte møder\",\n-  \"company\": \"Virksomhed\",\n-  \"organization\": \"You are seeing data for your own organizations only\",\n-  \"period\": \"Period\",\n-  \"months\": \"måneder\",\n-  \"this-year\": \"I år\",\n-  \"last-year\": \"Sidste år\",\n-  \"loading-data\": \" Loading data...\"\n-}\n+    \"no-insights\": \"No insights available\",\n+    \"no-result-error\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n+    \"started-by-manager\": \"Startet af leder\",\n+    \"started-by-hr-manager\": \"Started by HR manager\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810112791",
//         "author": "aman1820"
//     },
//     {
//         "file": "public/locales/da-DK/hr-insights.json",
//         "line": null,
//         "comment": "?",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -1,17 +1,17 @@\n {\n-  \"error1\": \"No insights available\",\n-  \"error2\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n-  \"started-by-manager\": \"Startet af leder\",\n-  \"started-by-hr-manager\": \"Startet af HR leder\",\n-  \"started-by-subordinate\": \"Startet af medarbejder\",\n-  \"started-by-hr-assistant\": \"Started by HR assistant\",\n-  \"started-by-others\": \"Started by others\",\n-  \"completed-meetings\": \"Gennemførte møder\",\n-  \"company\": \"Virksomhed\",\n-  \"organization\": \"You are seeing data for your own organizations only\",\n-  \"period\": \"Period\",\n-  \"months\": \"måneder\",\n-  \"this-year\": \"I år\",\n-  \"last-year\": \"Sidste år\",\n-  \"loading-data\": \" Loading data...\"\n-}\n+    \"no-insights\": \"No insights available\",\n+    \"no-result-error\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n+    \"started-by-manager\": \"Startet af leder\",\n+    \"started-by-hr-manager\": \"Started by HR manager\",\n+    \"started-by-subordinate\": \"Startet af medarbejder\",\n+    \"started-by-hr-assistant\": \"Startet af HR-assistent\",\n+    \"started-by-others\": \"Started by others\",\n+    \"completed-meetings\": \"Gennemførte møder\",\n+    \"company\": \"Virksomhed\",\n+    \"organization\": \"Du kan kun se data for dine egne organisationer\",\n+    \"period\": \"Period\",\n+    \"months\": \"months\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810113516",
//         "author": "aman1820"
//     },
//     {
//         "file": "public/locales/da-DK/meeting.json",
//         "line": null,
//         "comment": "?",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -108,15 +91,13 @@\n     \"only-managers-have-access\": \"Only managers have access to set up PDGs with their employees.\",\n     \"add-existing-goal\": \"Tilføj eksisterende\",\n     \"edit\": \"Rediger\",\n-    \"delete\": \"Slet\",\n     \"remove-goal\": \"Fjern fra 1:1-møde\",\n     \"remove\": \"Fjern\",\n-    \"topic-delete-text\": \"Vil du slette målet inklusive kommentarer?\",\n+    \"topic-delete-text\": \"Delete this item and all related comments?\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810114749",
//         "author": "aman1820"
//     },
//     {
//         "file": "public/locales/fi-FI/hr-insights.json",
//         "line": null,
//         "comment": "?",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -1,17 +1,17 @@\n {\n-  \"error1\": \"No insights available\",\n-  \"error2\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n-  \"started-by-manager\": \"Aloittajana esihenkilö\",\n-  \"started-by-hr-manager\": \"Aloittajana henkilöstöpäällikkö\",\n-  \"started-by-subordinate\": \"Aloittajana työntekijä\",\n-  \"started-by-hr-assistant\": \"Started by HR assistant\",\n-  \"started-by-others\": \"Started by others\",\n-  \"completed-meetings\": \"Suoritetut tapaamiset\",\n-  \"company\": \"Yritys\",\n-  \"organization\": \"You are seeing data for your own organizations only\",\n-  \"period\": \"Period\",\n-  \"months\": \"kuukautta\",\n-  \"this-year\": \"Tämä vuosi\",\n-  \"last-year\": \"Viime vuosi\",\n-  \"loading-data\": \" Loading data...\"\n-}\n+    \"no-insights\": \"No insights available\",\n+    \"no-result-error\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n+    \"started-by-manager\": \"Aloittajana esihenkilö\",\n+    \"started-by-hr-manager\": \"Started by HR manager\",\n+    \"started-by-subordinate\": \"Aloittajana työntekijä\",\n+    \"started-by-hr-assistant\": \"Aloittaja henkilöstöassistentti\",\n+    \"started-by-others\": \"Started by others\",\n+    \"completed-meetings\": \"Suoritetut tapaamiset\",\n+    \"company\": \"Yritys\",\n+    \"organization\": \"Näet vain oman organisaatiosi tiedot\",\n+    \"period\": \"Period\",\n+    \"months\": \"months\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810127667",
//         "author": "aman1820"
//     },
//     {
//         "file": "public/locales/fi-FI/hr-insights.json",
//         "line": null,
//         "comment": "?",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -1,17 +1,17 @@\n {\n-  \"error1\": \"No insights available\",\n-  \"error2\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n-  \"started-by-manager\": \"Aloittajana esihenkilö\",\n-  \"started-by-hr-manager\": \"Aloittajana henkilöstöpäällikkö\",\n-  \"started-by-subordinate\": \"Aloittajana työntekijä\",\n-  \"started-by-hr-assistant\": \"Started by HR assistant\",\n-  \"started-by-others\": \"Started by others\",\n-  \"completed-meetings\": \"Suoritetut tapaamiset\",\n-  \"company\": \"Yritys\",\n-  \"organization\": \"You are seeing data for your own organizations only\",\n-  \"period\": \"Period\",\n-  \"months\": \"kuukautta\",\n-  \"this-year\": \"Tämä vuosi\",\n-  \"last-year\": \"Viime vuosi\",\n-  \"loading-data\": \" Loading data...\"\n-}\n+    \"no-insights\": \"No insights available\",\n+    \"no-result-error\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n+    \"started-by-manager\": \"Aloittajana esihenkilö\",\n+    \"started-by-hr-manager\": \"Started by HR manager\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810128106",
//         "author": "aman1820"
//     },
//     {
//         "file": "public/locales/fr-FR/hr-insights.json",
//         "line": null,
//         "comment": "?\r\n",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -1,17 +1,17 @@\n {\n-  \"error1\": \"No insights available\",\n-  \"error2\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n-  \"started-by-manager\": \"Commencées par le responsable\",\n-  \"started-by-hr-manager\": \"Commencées par le responsable RH\",\n-  \"started-by-subordinate\": \"Commencées par l'employé\",\n-  \"started-by-hr-assistant\": \"Started by HR assistant\",\n-  \"started-by-others\": \"Started by others\",\n-  \"completed-meetings\": \"Réunions terminées\",\n-  \"company\": \"Société\",\n-  \"organization\": \"You are seeing data for your own organizations only\",\n-  \"period\": \"Period\",\n-  \"months\": \"mois\",\n-  \"this-year\": \"Cette année\",\n-  \"last-year\": \"L'année dernière\",\n-  \"loading-data\": \" Loading data...\"\n-}\n+    \"no-insights\": \"No insights available\",\n+    \"no-result-error\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n+    \"started-by-manager\": \"Commencées par le responsable\",\n+    \"started-by-hr-manager\": \"Started by HR manager\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810131350",
//         "author": "aman1820"
//     },
//     {
//         "file": "public/locales/fr-FR/hr-insights.json",
//         "line": null,
//         "comment": "?\r\n",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -1,17 +1,17 @@\n {\n-  \"error1\": \"No insights available\",\n-  \"error2\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n-  \"started-by-manager\": \"Commencées par le responsable\",\n-  \"started-by-hr-manager\": \"Commencées par le responsable RH\",\n-  \"started-by-subordinate\": \"Commencées par l'employé\",\n-  \"started-by-hr-assistant\": \"Started by HR assistant\",\n-  \"started-by-others\": \"Started by others\",\n-  \"completed-meetings\": \"Réunions terminées\",\n-  \"company\": \"Société\",\n-  \"organization\": \"You are seeing data for your own organizations only\",\n-  \"period\": \"Period\",\n-  \"months\": \"mois\",\n-  \"this-year\": \"Cette année\",\n-  \"last-year\": \"L'année dernière\",\n-  \"loading-data\": \" Loading data...\"\n-}\n+    \"no-insights\": \"No insights available\",\n+    \"no-result-error\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n+    \"started-by-manager\": \"Commencées par le responsable\",\n+    \"started-by-hr-manager\": \"Started by HR manager\",\n+    \"started-by-subordinate\": \"Commencées par l'employé\",\n+    \"started-by-hr-assistant\": \"Créé par l'assistant RH\",\n+    \"started-by-others\": \"Started by others\",\n+    \"completed-meetings\": \"Réunions terminées\",\n+    \"company\": \"Société\",\n+    \"organization\": \"Vous voyez uniquement les données relatives à vos propres organisations\",\n+    \"period\": \"Period\",\n+    \"months\": \"months\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810131585",
//         "author": "aman1820"
//     },
//     {
//         "file": "public/locales/nb-NO/hr-insights.json",
//         "line": null,
//         "comment": "?",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -1,17 +1,17 @@\n {\n-  \"error1\": \"No insights available\",\n-  \"error2\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n-  \"started-by-manager\": \"Startet av leder\",\n-  \"started-by-hr-manager\": \"Startet av HR leder\",\n-  \"started-by-subordinate\": \"Startet av medarbeider\",\n-  \"started-by-hr-assistant\": \"Started by HR assistant\",\n-  \"started-by-others\": \"Started by others\",\n-  \"completed-meetings\": \"Ferdigstilte møter\",\n-  \"company\": \"Selskap\",\n-  \"organization\": \"You are seeing data for your own organizations only\",\n-  \"period\": \"Period\",\n-  \"months\": \"måneder\",\n-  \"this-year\": \"Dette året\",\n-  \"last-year\": \"Forrige år\",\n-  \"loading-data\": \" Loading data...\"\n-}\n+    \"no-insights\": \"No insights available\",\n+    \"no-result-error\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n+    \"started-by-manager\": \"Startet av leder\",\n+    \"started-by-hr-manager\": \"Started by HR manager\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810132784",
//         "author": "aman1820"
//     },
//     {
//         "file": "public/locales/nb-NO/hr-insights.json",
//         "line": null,
//         "comment": "?",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -1,17 +1,17 @@\n {\n-  \"error1\": \"No insights available\",\n-  \"error2\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n-  \"started-by-manager\": \"Startet av leder\",\n-  \"started-by-hr-manager\": \"Startet av HR leder\",\n-  \"started-by-subordinate\": \"Startet av medarbeider\",\n-  \"started-by-hr-assistant\": \"Started by HR assistant\",\n-  \"started-by-others\": \"Started by others\",\n-  \"completed-meetings\": \"Ferdigstilte møter\",\n-  \"company\": \"Selskap\",\n-  \"organization\": \"You are seeing data for your own organizations only\",\n-  \"period\": \"Period\",\n-  \"months\": \"måneder\",\n-  \"this-year\": \"Dette året\",\n-  \"last-year\": \"Forrige år\",\n-  \"loading-data\": \" Loading data...\"\n-}\n+    \"no-insights\": \"No insights available\",\n+    \"no-result-error\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n+    \"started-by-manager\": \"Startet av leder\",\n+    \"started-by-hr-manager\": \"Started by HR manager\",\n+    \"started-by-subordinate\": \"Startet av medarbeider\",\n+    \"started-by-hr-assistant\": \"Startet av HR-assistent\",\n+    \"started-by-others\": \"Started by others\",\n+    \"completed-meetings\": \"Ferdigstilte møter\",\n+    \"company\": \"Selskap\",\n+    \"organization\": \"Du ser bare data for din egen organisasjon\",\n+    \"period\": \"Period\",\n+    \"months\": \"months\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810132976",
//         "author": "aman1820"
//     },
//     {
//         "file": "public/locales/nb-NO/meeting.json",
//         "line": null,
//         "comment": "?",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -108,15 +91,13 @@\n     \"only-managers-have-access\": \"Only managers have access to set up PDGs with their employees.\",\n     \"add-existing-goal\": \"Legg til eksisterende\",\n     \"edit\": \"Rediger\",\n-    \"delete\": \"Slett\",\n     \"remove-goal\": \"Fjern fra 1:1 møte\",\n     \"remove\": \"Fjern\",\n-    \"topic-delete-text\": \"Vil du slette dette målet, inkludert alle kommentarene?\",\n+    \"topic-delete-text\": \"Delete this item and all related comments?\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810133715",
//         "author": "aman1820"
//     },
//     {
//         "file": "public/locales/nl-NL/hr-insights.json",
//         "line": null,
//         "comment": "?",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -1,17 +1,17 @@\n {\n-  \"error1\": \"No insights available\",\n-  \"error2\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n-  \"started-by-manager\": \"Begonnen door manager\",\n-  \"started-by-hr-manager\": \"Begonnen door HR-manager\",\n-  \"started-by-subordinate\": \"Begonnen door werknemer\",\n-  \"started-by-hr-assistant\": \"Started by HR assistant\",\n-  \"started-by-others\": \"Started by others\",\n-  \"completed-meetings\": \"Voltooide meetings\",\n-  \"company\": \"Bedrijf\",\n-  \"organization\": \"You are seeing data for your own organizations only\",\n-  \"period\": \"Period\",\n-  \"months\": \"maanden\",\n-  \"this-year\": \"Dit jaar\",\n-  \"last-year\": \"Afgelopen jaar\",\n-  \"loading-data\": \" Loading data...\"\n-}\n+    \"no-insights\": \"No insights available\",\n+    \"no-result-error\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n+    \"started-by-manager\": \"Begonnen door manager\",\n+    \"started-by-hr-manager\": \"Started by HR manager\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810136154",
//         "author": "aman1820"
//     },
//     {
//         "file": "public/locales/nl-NL/hr-insights.json",
//         "line": null,
//         "comment": "?",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -1,17 +1,17 @@\n {\n-  \"error1\": \"No insights available\",\n-  \"error2\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n-  \"started-by-manager\": \"Begonnen door manager\",\n-  \"started-by-hr-manager\": \"Begonnen door HR-manager\",\n-  \"started-by-subordinate\": \"Begonnen door werknemer\",\n-  \"started-by-hr-assistant\": \"Started by HR assistant\",\n-  \"started-by-others\": \"Started by others\",\n-  \"completed-meetings\": \"Voltooide meetings\",\n-  \"company\": \"Bedrijf\",\n-  \"organization\": \"You are seeing data for your own organizations only\",\n-  \"period\": \"Period\",\n-  \"months\": \"maanden\",\n-  \"this-year\": \"Dit jaar\",\n-  \"last-year\": \"Afgelopen jaar\",\n-  \"loading-data\": \" Loading data...\"\n-}\n+    \"no-insights\": \"No insights available\",\n+    \"no-result-error\": \"Something went wrong. Please try to reload the page and check filter settings.\",\n+    \"started-by-manager\": \"Begonnen door manager\",\n+    \"started-by-hr-manager\": \"Started by HR manager\",\n+    \"started-by-subordinate\": \"Begonnen door werknemer\",\n+    \"started-by-hr-assistant\": \"Begonnen door HR-assistent\",\n+    \"started-by-others\": \"Started by others\",\n+    \"completed-meetings\": \"Voltooide meetings\",\n+    \"company\": \"Bedrijf\",\n+    \"organization\": \"Je ziet alleen gegevens voor je eigen organisaties\",\n+    \"period\": \"Period\",\n+    \"months\": \"months\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810136367",
//         "author": "aman1820"
//     },
//     {
//         "file": "public/locales/sv-SE/meeting.json",
//         "line": null,
//         "comment": "?",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -108,15 +91,13 @@\n     \"only-managers-have-access\": \"Only managers have access to set up PDGs with their employees.\",\n     \"add-existing-goal\": \"Lägg till existerande\",\n     \"edit\": \"Redigera\",\n-    \"delete\": \"Ta bort\",\n     \"remove-goal\": \"Ta bort från 1:1-möte\",\n     \"remove\": \"Radera\",\n-    \"topic-delete-text\": \"Vill du ta bort målet, inklusive alla relaterade kommentarer?\",\n+    \"topic-delete-text\": \"Delete this item and all related comments?\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810141362",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/features/administration-landing-page/template-overview/TemplateCollapsable.tsx",
//         "line": 5,
//         "comment": "Is this unused?",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -2,6 +2,8 @@ import { FC, memo, useState } from 'react'\n import { useTranslation } from 'react-i18next'\n import { TransitionGroup } from 'react-transition-group'\n \n+import { cons } from 'fp-ts/lib/ReadonlyNonEmptyArray'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810149721",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Topic/MultipleOption.tsx",
//         "line": 98,
//         "comment": "make sure to test these types of changes",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -95,7 +95,7 @@ const MultipleOption: FC<Props> = ({\n             <TextField\n                 placeholder={t('enter-option')}\n                 disabled={isReadOnly(state)}\n-                label={t('option', { index: index + 1 })}\n+                label={`${t('option')} ${index + 1}`}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810176066",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/features/todo-overview/todo-header/TodoHeader.tsx",
//         "line": 126,
//         "comment": "make sure to test these types of changes",
//         "commitId": "dd4e892c905150515bea844284bba026f13d11cc",
//         "codeSnippet": "@@ -121,8 +122,8 @@ const TodoHeader: FC<TodoHeaderProps> = ({\n                                                     !todoDetail.done &&\n                                                     !todoDetail.archived\n                                             ).length\n-                                        }{' '}\n-                                        {t('active-todos')}\n+                                        }\n+                                        {` ${t('s-active')} to-dos`}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/197#discussion_r1810178139",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/Components/MoveableLiItem/MoveableLiItem.tsx",
//         "line": null,
//         "comment": "use box instead",
//         "commitId": "e8bfbb60f2dcb679e06fc8d61ba93fee2c044ac4",
//         "codeSnippet": "@@ -20,6 +20,15 @@ const MoveableLiItem: ForwardRefRenderFunction<\n     { children, dragable = true, disabled = false, title, caption, ...props },\n     ref\n ) => {\n+    const TextWrapper = styled('div')(() => ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/209#discussion_r1814247565",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Topic/Topic.tsx",
//         "line": 69,
//         "comment": "maybe 500 is too slow while typing",
//         "commitId": "e8bfbb60f2dcb679e06fc8d61ba93fee2c044ac4",
//         "codeSnippet": "@@ -59,26 +60,31 @@ const Topic: FC<Props> = ({\n             subTopicId\n         )\n     }\n-\n-    const handleChangeQuestion = debounce((val: string) => {\n-        if (isEqual(val, settings.question)) return\n-        onChange('question')\n-    }, 500)\n+    const handleChangeQuestion = useCallback(\n+        debounce((val: string) => {\n+            if (isEqual(val, settings.question)) return\n+            if (val.length > QUESTION_LENGTH)\n+                val = val.slice(0, QUESTION_LENGTH)\n+            onChange('question')(val)\n+        }, 500),",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/209#discussion_r1814249792",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/Components/MoveableLiItem/MoveableLiItem.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "e8bfbb60f2dcb679e06fc8d61ba93fee2c044ac4",
//         "codeSnippet": "@@ -20,6 +20,15 @@ const MoveableLiItem: ForwardRefRenderFunction<\n     { children, dragable = true, disabled = false, title, caption, ...props },\n     ref\n ) => {\n+    const TextWrapper = styled('div')(() => ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/209#discussion_r1814257674",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Topic/Topic.tsx",
//         "line": 69,
//         "comment": "its just for saving call, updates and other will be updated simultaneously , so I think its fine.\r\nAlso we are using 500 usually.",
//         "commitId": "e8bfbb60f2dcb679e06fc8d61ba93fee2c044ac4",
//         "codeSnippet": "@@ -59,26 +60,31 @@ const Topic: FC<Props> = ({\n             subTopicId\n         )\n     }\n-\n-    const handleChangeQuestion = debounce((val: string) => {\n-        if (isEqual(val, settings.question)) return\n-        onChange('question')\n-    }, 500)\n+    const handleChangeQuestion = useCallback(\n+        debounce((val: string) => {\n+            if (isEqual(val, settings.question)) return\n+            if (val.length > QUESTION_LENGTH)\n+                val = val.slice(0, QUESTION_LENGTH)\n+            onChange('question')(val)\n+        }, 500),",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/209#discussion_r1814261787",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/locales/da-DK/meeting.json",
//         "line": null,
//         "comment": "make the key as \"your-answer\". ",
//         "commitId": "443f6348728a9ddebd661dbdf4a35addbe4bae50",
//         "codeSnippet": "@@ -105,5 +105,6 @@\n     \"error-saving-goal\": \"Error while saving goal\",\n     \"error-deleting-goal\": \"Error while saving goal\",\n     \"comment-saved\": \"Comment saved\",\n-    \"error-saving-comment\": \"Error while saving comment\"\n+    \"error-saving-comment\": \"Error while saving comment\",\n+    \"your-answer…\": \"Dit svar ...\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/212#discussion_r1814343188",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "public/locales/da-DK/meeting.json",
//         "line": null,
//         "comment": "yes\r\n",
//         "commitId": "443f6348728a9ddebd661dbdf4a35addbe4bae50",
//         "codeSnippet": "@@ -105,5 +105,6 @@\n     \"error-saving-goal\": \"Error while saving goal\",\n     \"error-deleting-goal\": \"Error while saving goal\",\n     \"comment-saved\": \"Comment saved\",\n-    \"error-saving-comment\": \"Error while saving comment\"\n+    \"error-saving-comment\": \"Error while saving comment\",\n+    \"your-answer…\": \"Dit svar ...\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/212#discussion_r1814350642",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalActionButtons.tsx",
//         "line": null,
//         "comment": "I think if we already have existing goals we can add them so this permission should not be here can you check it",
//         "commitId": "740b5bf3bc036fcb885affb9ca52c3dc01a6a123",
//         "codeSnippet": "@@ -28,16 +72,19 @@ const GoalActionButtons: FC<Props> = ({ onClickAddExistingGoal }) => {\n                         arrow\n                     >\n                         <Box>\n-                            <Button\n-                                variant='text'\n-                                disabled={\n-                                    meeting.revieweeManager !==\n-                                    meeting.reviewerId\n-                                }\n-                                onClick={onClickAddExistingGoal}\n-                            >\n-                                {t('add-existing-goal')}\n-                            </Button>\n+                            {canAddGoal && (\n+                                <Button\n+                                    variant='text'\n+                                    disabled={\n+                                        meeting.revieweeManager !==\n+                                            meeting.reviewerId ||\n+                                        hasPermissionForGoal",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/202#discussion_r1814633120",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalActionButtons.tsx",
//         "line": null,
//         "comment": "hideContextMenu check is not needed now since we are using \"canAddGoal\", please check and remove this if this is true😊",
//         "commitId": "740b5bf3bc036fcb885affb9ca52c3dc01a6a123",
//         "codeSnippet": "@@ -1,21 +1,65 @@\n-import { FC } from 'react'\n+import { FC, useMemo } from 'react'\n import { useTranslation } from 'react-i18next'\n \n+import { isEmpty } from 'lodash/fp'\n+import { match } from 'ts-pattern'\n+\n import FlexBox from '@/Components/FlexBox'\n import useMeeting from '@/features/one-to-one-meeting/useMeeting'\n-import { Button, Tooltip, Box } from '@mui/material'\n+import { GoalTypeInMonolith, MeetingStateConstants } from '@/services/topics'\n+import { Box, Button, Tooltip } from '@mui/material'\n \n type Props = {\n     onClickAddExistingGoal: () => void\n+    createOrUpdateGoal: (\n+        locId: number,\n+        goalType: number,\n+        goalId: number | null,\n+        isUpdate: boolean,\n+        isEditable: boolean\n+    ) => void\n+    goalType: GoalTypeInMonolith\n+    hasPermissionForGoal: boolean\n }\n \n-const GoalActionButtons: FC<Props> = ({ onClickAddExistingGoal }) => {\n+const GoalActionButtons: FC<Props> = ({\n+    onClickAddExistingGoal,\n+    createOrUpdateGoal,\n+    goalType,\n+    hasPermissionForGoal\n+}) => {\n     const { meeting, goalSection, hideContextMenu } = useMeeting()\n     const { t } = useTranslation('meeting')\n \n+    const getButtonName = () => {\n+        return match(goalType)\n+            .with(GoalTypeInMonolith.PDG, () => t('add-new-pdg'))\n+            .with(GoalTypeInMonolith.OBJECTIVE, () => t('add-new-objective'))\n+            .with(GoalTypeInMonolith.KPI, () => t('add-new-kpi'))\n+            .otherwise(() => '')\n+    }\n+\n+    const canAddGoal = useMemo(() => {\n+        return (\n+            !isEmpty(meeting.availableActions) &&\n+            !meeting.availableActions.includes(MeetingStateConstants.REOPEN) &&\n+            !meeting.isReopened\n+        )\n+    }, [meeting])\n+\n     return (\n         <FlexBox mt='12px'>\n-            <Button variant='outlined'>{t('add-new-goal')}</Button>\n+            {canAddGoal && (\n+                <Button\n+                    disabled={!hasPermissionForGoal}\n+                    variant='outlined'\n+                    onClick={() =>\n+                        createOrUpdateGoal(10, goalType, null, false, true)\n+                    }\n+                >\n+                    {getButtonName()}\n+                </Button>\n+            )}\n             {!hideContextMenu &&",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/202#discussion_r1814641675",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/services/topics/types.ts",
//         "line": null,
//         "comment": "we already have \"GoalManagementPage\" can we not reuse it ??\r\n",
//         "commitId": "740b5bf3bc036fcb885affb9ca52c3dc01a6a123",
//         "codeSnippet": "@@ -178,6 +180,29 @@ export type TodoResponse = {\n     title: string\n     deadline: string\n }\n+\n+export type GoalManagementPageModel = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/202#discussion_r1814647822",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Pages/GoalManagement.tsx",
//         "line": 182,
//         "comment": "this function is set to be called when remarks are changed in test field , if success snack is to be showed whenever there is some change, it may be remain there until user is typing can you check this \"return (\r\n        <Box>\r\n            {getRemarkerDetails()}\r\n            <TextFieldWithValidation\r\n                onValidate={(value) => true}\r\n                fullWidth\r\n                disabled={remark.right !== Rights.WRITE}\r\n                label={g('comment')}\r\n                onChange={handleChangeRemark}\r\n                defaultValue={contentparser(remark.remark, languageId)}\r\n            />\r\n        </Box>\r\n    )\" and if needed handle it correctly 😊",
//         "commitId": "740b5bf3bc036fcb885affb9ca52c3dc01a6a123",
//         "codeSnippet": "@@ -91,31 +155,41 @@ const GoalManagement: FC<Props> = ({ oneToOneId, section }) => {\n             topics: prev.topics.filter((topic) => topic.topicId !== topicId)\n         }))\n \n-        deleteTopic(oneToOneId, section.sectionId, topicId).catch((error) => {\n-            setGoalPageData((prev) => ({\n-                ...prev,\n-                topics: originalTopics\n-            }))\n-            setGoalSection((prev) => ({\n-                ...prev,\n-                topics: originalTopics\n-            }))\n-            createSnack({ alert: { severity: 'error' } })(\n-                t('error-deleting-topic')\n+        deleteTopic(oneToOneId, section.sectionId, topicId)\n+            .then(() =>\n+                createSnack({ alert: { severity: 'success' } })(\n+                    t('goal-deleted-successfully')\n+                )\n             )\n-            throw error\n-        })\n+            .catch((error) => {\n+                setGoalPageData((prev) => ({\n+                    ...prev,\n+                    topics: originalTopics\n+                }))\n+                setGoalSection((prev) => ({\n+                    ...prev,\n+                    topics: originalTopics\n+                }))\n+                createSnack({ alert: { severity: 'error' } })(\n+                    t('error-deleting-goal')\n+                )\n+                throw error\n+            })\n     }\n \n     const handleUpateRemark = (remark: string, topicId: string) => {\n-        saveRemark(oneToOneId, section.sectionId, topicId, remark).catch(\n-            (error) => {\n+        saveRemark(oneToOneId, section.sectionId, topicId, remark)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/202#discussion_r1814654985",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalActionButtons.tsx",
//         "line": null,
//         "comment": "it is needed both are different conditions",
//         "commitId": "740b5bf3bc036fcb885affb9ca52c3dc01a6a123",
//         "codeSnippet": "@@ -28,16 +72,19 @@ const GoalActionButtons: FC<Props> = ({ onClickAddExistingGoal }) => {\n                         arrow\n                     >\n                         <Box>\n-                            <Button\n-                                variant='text'\n-                                disabled={\n-                                    meeting.revieweeManager !==\n-                                    meeting.reviewerId\n-                                }\n-                                onClick={onClickAddExistingGoal}\n-                            >\n-                                {t('add-existing-goal')}\n-                            </Button>\n+                            {canAddGoal && (\n+                                <Button\n+                                    variant='text'\n+                                    disabled={\n+                                        meeting.revieweeManager !==\n+                                            meeting.reviewerId ||\n+                                        hasPermissionForGoal",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/202#discussion_r1814671690",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/services/topics/types.ts",
//         "line": null,
//         "comment": "yes",
//         "commitId": "740b5bf3bc036fcb885affb9ca52c3dc01a6a123",
//         "codeSnippet": "@@ -178,6 +180,29 @@ export type TodoResponse = {\n     title: string\n     deadline: string\n }\n+\n+export type GoalManagementPageModel = {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/202#discussion_r1816299632",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Pages/GoalManagement.tsx",
//         "line": 182,
//         "comment": "done, changed event to onblur",
//         "commitId": "740b5bf3bc036fcb885affb9ca52c3dc01a6a123",
//         "codeSnippet": "@@ -91,31 +155,41 @@ const GoalManagement: FC<Props> = ({ oneToOneId, section }) => {\n             topics: prev.topics.filter((topic) => topic.topicId !== topicId)\n         }))\n \n-        deleteTopic(oneToOneId, section.sectionId, topicId).catch((error) => {\n-            setGoalPageData((prev) => ({\n-                ...prev,\n-                topics: originalTopics\n-            }))\n-            setGoalSection((prev) => ({\n-                ...prev,\n-                topics: originalTopics\n-            }))\n-            createSnack({ alert: { severity: 'error' } })(\n-                t('error-deleting-topic')\n+        deleteTopic(oneToOneId, section.sectionId, topicId)\n+            .then(() =>\n+                createSnack({ alert: { severity: 'success' } })(\n+                    t('goal-deleted-successfully')\n+                )\n             )\n-            throw error\n-        })\n+            .catch((error) => {\n+                setGoalPageData((prev) => ({\n+                    ...prev,\n+                    topics: originalTopics\n+                }))\n+                setGoalSection((prev) => ({\n+                    ...prev,\n+                    topics: originalTopics\n+                }))\n+                createSnack({ alert: { severity: 'error' } })(\n+                    t('error-deleting-goal')\n+                )\n+                throw error\n+            })\n     }\n \n     const handleUpateRemark = (remark: string, topicId: string) => {\n-        saveRemark(oneToOneId, section.sectionId, topicId, remark).catch(\n-            (error) => {\n+        saveRemark(oneToOneId, section.sectionId, topicId, remark)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/202#discussion_r1816357308",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/ToDoCreater.tsx",
//         "line": null,
//         "comment": "remove trim already inside method.",
//         "commitId": "49ac6ca02e0bef22ad5c854dbdb91132d475ca58",
//         "codeSnippet": "@@ -139,8 +139,8 @@ const ToDoCreater: FC<ToDoCreaterProps> = ({\n                     placeholder={descriptionLabel}\n                     fullWidth\n                     label={descriptionLabel}\n-                    onChange={(e) => handleTodoDescription(e)}\n-                    defaultValue=''\n+                    onChange={(e) => handleTodoDescription(e.trim())}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/221#discussion_r1820494686",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/TodoEditor.tsx",
//         "line": 143,
//         "comment": "trim already handled",
//         "commitId": "49ac6ca02e0bef22ad5c854dbdb91132d475ca58",
//         "codeSnippet": "@@ -140,7 +140,7 @@ const TodoEditor: FC<TodoEditorProps> = ({\n                 rows={3}\n                 fullWidth\n                 label={g('description')}\n-                onChange={(e) => handleTodoDescription(e)}\n+                onChange={(e) => handleTodoDescription(e.trim())}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/221#discussion_r1820495918",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/TodoEditor.tsx",
//         "line": 143,
//         "comment": "in this component trim is handled here only",
//         "commitId": "49ac6ca02e0bef22ad5c854dbdb91132d475ca58",
//         "codeSnippet": "@@ -140,7 +140,7 @@ const TodoEditor: FC<TodoEditorProps> = ({\n                 rows={3}\n                 fullWidth\n                 label={g('description')}\n-                onChange={(e) => handleTodoDescription(e)}\n+                onChange={(e) => handleTodoDescription(e.trim())}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/221#discussion_r1820587201",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/TemplateDetails.tsx",
//         "line": null,
//         "comment": "use match with here:)",
//         "commitId": "d5e1f72e54969ee1dd4c02528f0d24f49010c3bd",
//         "codeSnippet": "@@ -292,18 +292,31 @@ const TemplateDetails: FC = () => {\n             variant: 'contained'\n         }\n     ].filter(Boolean) as ButtonProps[]\n+    const getBreadcrumbName = (status: string, templateName: string) => {\n+        switch (status) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/223#discussion_r1827492601",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1/Permissions.tsx",
//         "line": null,
//         "comment": "use !isEmpty(selectedRoles)",
//         "commitId": "d5e1f72e54969ee1dd4c02528f0d24f49010c3bd",
//         "codeSnippet": "@@ -149,11 +149,11 @@ const Permissions: FC<Props> = ({ state }) => {\n             </Grid>\n \n             <Grid item>\n-                <Alert severity='info'>\n-                    {selectedRoles.length\n-                        ? t('permission-info')\n-                        : t('no-selected-role')}\n-                </Alert>\n+                {selectedRoles.length ? (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/223#discussion_r1827493612",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1/LanguageExportImport/styled.ts",
//         "line": null,
//         "comment": "color not available in storybook!",
//         "commitId": "8f8d13165c053a1914b298f6e38ffa268112337f",
//         "codeSnippet": "@@ -0,0 +1,10 @@\n+import { Grid, styled } from '@mui/material'\n+\n+export const ModifiedGrid = styled(Grid)(() => ({\n+    display: 'flex',\n+    alignItems: 'center',\n+    marginLeft: '16px',\n+    color: '#FFB73E',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/224#discussion_r1827545348",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1/LanguageExportImport/styled.ts",
//         "line": null,
//         "comment": "use from MUI colors\r\n",
//         "commitId": "8f8d13165c053a1914b298f6e38ffa268112337f",
//         "codeSnippet": "@@ -0,0 +1,10 @@\n+import { Grid, styled } from '@mui/material'\n+\n+export const ModifiedGrid = styled(Grid)(() => ({\n+    display: 'flex',\n+    alignItems: 'center',\n+    marginLeft: '16px',\n+    color: '#FFB73E',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/224#discussion_r1827551600",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1/LanguageExportImport/LanguageExportImport.tsx",
//         "line": null,
//         "comment": "use \"<Alert severity='warning'>\r\n                                        {t('page-manager-role-warning')}\r\n                                    </Alert>\" for warning",
//         "commitId": "8f8d13165c053a1914b298f6e38ffa268112337f",
//         "codeSnippet": "@@ -123,11 +125,20 @@ const LanguageExportImport: FC<Props> = ({ state }) => {\n         <>\n             <Grid container spacing={2}>\n                 <Grid item sm={12}>\n-                    <Typography variant='h6'>\n+                    <Typography variant='h6' sx={{ paddingBottom: '8px' }}>\n                         {t('language-export-import-title')}\n                     </Typography>\n                 </Grid>\n-\n+                <ModifiedGrid>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/224#discussion_r1827554535",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/TemplateDetails.tsx",
//         "line": 128,
//         "comment": "Move handleTexts(languageId) here inside\r\n .then((tmp) => {",
//         "commitId": "5b221b178bc9570f2c985d83ca953eb749d89854",
//         "codeSnippet": "@@ -124,6 +124,7 @@ const TemplateDetails: FC = () => {\n         if (!isReady(state)) return\n         handleChange('status', 'MAINTENANCE_MODE', false)\n         createTemplateWithParentId(state.template.id)\n+            .then(handleTexts(languageId))\n             .then((tmp) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/225#discussion_r1828723200",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateDetails.tsx",
//         "line": 217,
//         "comment": "same",
//         "commitId": "5b221b178bc9570f2c985d83ca953eb749d89854",
//         "codeSnippet": "@@ -213,6 +214,7 @@ const TemplateDetails: FC = () => {\n                             name\n                         ).then(() => template)\n                     )\n+                    .then(handleTexts(languageId))",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/225#discussion_r1828723287",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/ToDoCreater.tsx",
//         "line": null,
//         "comment": "remove?",
//         "commitId": "84e41eb50c5c65da8f58383d5ff8e5aefba0d88a",
//         "codeSnippet": "@@ -2,9 +2,11 @@ import { FC, useState } from 'react'\n import { useTranslation } from 'react-i18next'\n \n import dayjs, { Dayjs } from 'dayjs'\n+import { P } from 'ts-pattern'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/232#discussion_r1830922975",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step2/SectionDrawer/validation.ts",
//         "line": 3,
//         "comment": "trim maybe?",
//         "commitId": "84e41eb50c5c65da8f58383d5ff8e5aefba0d88a",
//         "codeSnippet": "@@ -1,7 +1,5 @@\n-import { TEMPLATE_SECTION_MAX_LENGTH } from '@/features/template-details/constants'\n-\n-export const validateSectionName = (name: string): boolean => {\n-    if (name.length > TEMPLATE_SECTION_MAX_LENGTH) return false\n+export const validateName = (name: string, maxLength: number): boolean => {\n+    if (name.length > maxLength) return false",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/232#discussion_r1830925022",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/Components/TextFieldWithValidation/TextFieldWithValidation.tsx",
//         "line": null,
//         "comment": "its better to move all the optional at least and required in the first place. its good practice",
//         "commitId": "84e41eb50c5c65da8f58383d5ff8e5aefba0d88a",
//         "codeSnippet": "@@ -2,16 +2,21 @@ import React, { FC, useEffect, useState } from 'react'\n \n import { TextField, TextFieldProps, Typography } from '@mui/material'\n \n-export type TextFieldWithValidationProps = Omit<TextFieldProps, 'onChange'> & {\n+export type TextFieldWithValidationProps = Omit<\n+    TextFieldProps,\n+    'onChange' | 'onBlur'\n+> & {\n     onChange?: (val: string) => void",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/232#discussion_r1830925492",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/ToDoCreater.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "84e41eb50c5c65da8f58383d5ff8e5aefba0d88a",
//         "codeSnippet": "@@ -2,9 +2,11 @@ import { FC, useState } from 'react'\n import { useTranslation } from 'react-i18next'\n \n import dayjs, { Dayjs } from 'dayjs'\n+import { P } from 'ts-pattern'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/232#discussion_r1830941438",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/Components/TextFieldWithValidation/TextFieldWithValidation.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "84e41eb50c5c65da8f58383d5ff8e5aefba0d88a",
//         "codeSnippet": "@@ -2,16 +2,21 @@ import React, { FC, useEffect, useState } from 'react'\n \n import { TextField, TextFieldProps, Typography } from '@mui/material'\n \n-export type TextFieldWithValidationProps = Omit<TextFieldProps, 'onChange'> & {\n+export type TextFieldWithValidationProps = Omit<\n+    TextFieldProps,\n+    'onChange' | 'onBlur'\n+> & {\n     onChange?: (val: string) => void",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/232#discussion_r1830958792",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step2/SectionDrawer/validation.ts",
//         "line": 3,
//         "comment": "done",
//         "commitId": "84e41eb50c5c65da8f58383d5ff8e5aefba0d88a",
//         "codeSnippet": "@@ -1,7 +1,5 @@\n-import { TEMPLATE_SECTION_MAX_LENGTH } from '@/features/template-details/constants'\n-\n-export const validateSectionName = (name: string): boolean => {\n-    if (name.length > TEMPLATE_SECTION_MAX_LENGTH) return false\n+export const validateName = (name: string, maxLength: number): boolean => {\n+    if (name.length > maxLength) return false",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/232#discussion_r1830973333",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/locales/fi-FI/global.json",
//         "line": 8,
//         "comment": "these are not updated??",
//         "commitId": "1aea001f560651980b463857c8e0644afbd3b27a",
//         "codeSnippet": "@@ -1,10 +1,10 @@\n {\n-    \"refresh\": \"Reload page\",\n+    \"refresh\": \"Lataa sivu uudelleen\",\n     \"discard\": \"Hylkää\",\n     \"one-to-one-title\": \"One to One\",\n     \"open\": \"Avaa\",\n     \"previous\": \"Edellinen\",\n-    \"search\": \"Hae\",\n+    \"search\": \"Etsi\",\n     \"snack-active\": \"Todo marked as active\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/238#discussion_r1833963995",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/locales/fi-FI/global.json",
//         "line": 17,
//         "comment": "this too",
//         "commitId": "1aea001f560651980b463857c8e0644afbd3b27a",
//         "codeSnippet": "@@ -13,28 +13,28 @@\n     \"todos-tab\": \"To-dos\",\n     \"comment\": \"Kommentoi\",\n     \"created-in\": \"Created-In\",\n-    \"delete-page\": \"Delete page\",\n+    \"delete-page\": \"Poista sivu\",\n     \"delete-template\": \"Delete Template\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/238#discussion_r1833964580",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/locales/fi-FI/meeting.json",
//         "line": 50,
//         "comment": "not updated",
//         "commitId": "1aea001f560651980b463857c8e0644afbd3b27a",
//         "codeSnippet": "@@ -44,71 +44,71 @@\n     \"created-header\": \"Luotu\",\n     \"deadline-header\": \"Määräaika\",\n     \"todo-save\": \"Tallenna\",\n-    \"remaining-todo-dialog-info\": \"For remaining To-Dos you can only change the deadline.\",\n-    \"error\": \"Error while saving\",\n-    \"reopened\": \"Meeting reopened\",\n+    \"remaining-todo-dialog-info\": \"Jäljellä olevien tehtävien osalta voit ainoastaan muuttaa määräaikaa.\",\n+    \"error\": \"Virhe tallennuksessa\",\n+    \"reopened\": \"Tapaaminen avattu uudelleen\",\n     \"submit-success\": \"Submit successfully\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/238#discussion_r1833967093",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/locales/fi-FI/meeting.json",
//         "line": 71,
//         "comment": "not updated",
//         "commitId": "1aea001f560651980b463857c8e0644afbd3b27a",
//         "codeSnippet": "@@ -44,71 +44,71 @@\n     \"created-header\": \"Luotu\",\n     \"deadline-header\": \"Määräaika\",\n     \"todo-save\": \"Tallenna\",\n-    \"remaining-todo-dialog-info\": \"For remaining To-Dos you can only change the deadline.\",\n-    \"error\": \"Error while saving\",\n-    \"reopened\": \"Meeting reopened\",\n+    \"remaining-todo-dialog-info\": \"Jäljellä olevien tehtävien osalta voit ainoastaan muuttaa määräaikaa.\",\n+    \"error\": \"Virhe tallennuksessa\",\n+    \"reopened\": \"Tapaaminen avattu uudelleen\",\n     \"submit-success\": \"Submit successfully\",\n-    \"add-existing-objectives\": \"Add existing objectives\",\n-    \"add-existing-pdg\": \"Add existing PDG\",\n-    \"add-existing-kpis\": \"Add existing KPIs\",\n-    \"create-todo\": \"Todo created\",\n-    \"create-error-todo\": \"Error while creating todo\",\n-    \"snack-update\": \"Todo updated\",\n-    \"snack-delete\": \"Todo deleted\",\n-    \"snack-delete-error\": \"Error deleting todo\",\n-    \"summary-placeholder\": \"A summary of what was discussed\",\n-    \"no-archived-todo-text\": \"You have no archived To-Dos\",\n-    \"error-fetch-goal-page-data\": \"Error fetching goal page data\",\n-    \"error-delete-topic\": \"Error deleting topic\",\n-    \"error-save-remark\": \"Error saving remark\",\n-    \"error-fetching-owner-goals\": \"Error fetching owner goals\",\n-    \"error-adding-goals\": \"Error adding goals\",\n+    \"add-existing-objectives\": \"Lisää olemassa olevat tavoitteet\",\n+    \"add-existing-pdg\": \"Lisää olemassa oleva HKT:t\",\n+    \"add-existing-kpis\": \"Lisää olemassa olevat KPI:t\",\n+    \"create-todo\": \"Tehtävä luotu\",\n+    \"create-error-todo\": \"Virhe tehtävän luonnissa\",\n+    \"snack-update\": \"Tehtävä päivitetty\",\n+    \"snack-delete\": \"Tehtävä poistettu\",\n+    \"snack-delete-error\": \"Virhe tehtävän poistossa\",\n+    \"summary-placeholder\": \"Yhteenveto keskustelusta\",\n+    \"no-archived-todo-text\": \"Sinulla ei ole arkistoituja tehtäviä\",\n+    \"error-fetch-goal-page-data\": \"Virhe tavoitesivun tietojen haussa\",\n+    \"error-delete-topic\": \"Virhe aiheen poistossa\",\n+    \"error-save-remark\": \"Virhe kommentin tallennuksessa\",\n+    \"error-fetching-owner-goals\": \"Virhe tavoitteiden haussa\",\n+    \"error-adding-goals\": \"Virhe tavoitteiden lisäämisessä\",\n     \"pdg\": \"Henkilökohtainen kehitystavoite\",\n     \"objective\": \"Tavoite\",\n-    \"no-objective-found\": \"No objectives found.\",\n-    \"no-objective-found-description\": \"It seems that no objectives have been created for\",\n-    \"no-pdg-found\": \"No personal development goals found.\",\n+    \"no-objective-found\": \"Tavoitteita ei löytynyt.\",\n+    \"no-objective-found-description\": \"Vaikuttaa siltä, että tavoitteita ei ole luotu kohteelle\",\n+    \"no-pdg-found\": \"Henkilökohtaisia kehitystavoitteita ei löytynyt.\",\n     \"no-pdg-found-description\": \"It seems that no PDG have been created for\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/238#discussion_r1833967464",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/locales/fi-FI/meeting.json",
//         "line": 104,
//         "comment": "not updated\r\n",
//         "commitId": "1aea001f560651980b463857c8e0644afbd3b27a",
//         "codeSnippet": "@@ -44,71 +44,71 @@\n     \"created-header\": \"Luotu\",\n     \"deadline-header\": \"Määräaika\",\n     \"todo-save\": \"Tallenna\",\n-    \"remaining-todo-dialog-info\": \"For remaining To-Dos you can only change the deadline.\",\n-    \"error\": \"Error while saving\",\n-    \"reopened\": \"Meeting reopened\",\n+    \"remaining-todo-dialog-info\": \"Jäljellä olevien tehtävien osalta voit ainoastaan muuttaa määräaikaa.\",\n+    \"error\": \"Virhe tallennuksessa\",\n+    \"reopened\": \"Tapaaminen avattu uudelleen\",\n     \"submit-success\": \"Submit successfully\",\n-    \"add-existing-objectives\": \"Add existing objectives\",\n-    \"add-existing-pdg\": \"Add existing PDG\",\n-    \"add-existing-kpis\": \"Add existing KPIs\",\n-    \"create-todo\": \"Todo created\",\n-    \"create-error-todo\": \"Error while creating todo\",\n-    \"snack-update\": \"Todo updated\",\n-    \"snack-delete\": \"Todo deleted\",\n-    \"snack-delete-error\": \"Error deleting todo\",\n-    \"summary-placeholder\": \"A summary of what was discussed\",\n-    \"no-archived-todo-text\": \"You have no archived To-Dos\",\n-    \"error-fetch-goal-page-data\": \"Error fetching goal page data\",\n-    \"error-delete-topic\": \"Error deleting topic\",\n-    \"error-save-remark\": \"Error saving remark\",\n-    \"error-fetching-owner-goals\": \"Error fetching owner goals\",\n-    \"error-adding-goals\": \"Error adding goals\",\n+    \"add-existing-objectives\": \"Lisää olemassa olevat tavoitteet\",\n+    \"add-existing-pdg\": \"Lisää olemassa oleva HKT:t\",\n+    \"add-existing-kpis\": \"Lisää olemassa olevat KPI:t\",\n+    \"create-todo\": \"Tehtävä luotu\",\n+    \"create-error-todo\": \"Virhe tehtävän luonnissa\",\n+    \"snack-update\": \"Tehtävä päivitetty\",\n+    \"snack-delete\": \"Tehtävä poistettu\",\n+    \"snack-delete-error\": \"Virhe tehtävän poistossa\",\n+    \"summary-placeholder\": \"Yhteenveto keskustelusta\",\n+    \"no-archived-todo-text\": \"Sinulla ei ole arkistoituja tehtäviä\",\n+    \"error-fetch-goal-page-data\": \"Virhe tavoitesivun tietojen haussa\",\n+    \"error-delete-topic\": \"Virhe aiheen poistossa\",\n+    \"error-save-remark\": \"Virhe kommentin tallennuksessa\",\n+    \"error-fetching-owner-goals\": \"Virhe tavoitteiden haussa\",\n+    \"error-adding-goals\": \"Virhe tavoitteiden lisäämisessä\",\n     \"pdg\": \"Henkilökohtainen kehitystavoite\",\n     \"objective\": \"Tavoite\",\n-    \"no-objective-found\": \"No objectives found.\",\n-    \"no-objective-found-description\": \"It seems that no objectives have been created for\",\n-    \"no-pdg-found\": \"No personal development goals found.\",\n+    \"no-objective-found\": \"Tavoitteita ei löytynyt.\",\n+    \"no-objective-found-description\": \"Vaikuttaa siltä, että tavoitteita ei ole luotu kohteelle\",\n+    \"no-pdg-found\": \"Henkilökohtaisia kehitystavoitteita ei löytynyt.\",\n     \"no-pdg-found-description\": \"It seems that no PDG have been created for\",\n-    \"no-kpi-found\": \"No KPI found.\",\n+    \"no-kpi-found\": \"Avainlukuja ei löytynyt.\",\n     \"no-kpi-found-description\": \"It seems that no KPI have been created for\",\n-    \"no-goal-found\": \"No goals found.\",\n-    \"no-goal-found-description\": \"It seems that no goals have been created for\",\n+    \"no-goal-found\": \"Tavoitteita ei löytynyt.\",\n+    \"no-goal-found-description\": \"Vaikuttaa siltä, että tavoitteita ei ole luotu kohteelle\",\n     \"owner\": \"OMISTAJA\",\n     \"deadline\": \"Määräaika\",\n-    \"no-items-to-add\": \"No items to add\",\n+    \"no-items-to-add\": \"Ei lisättäviä kohteita\",\n     \"close\": \"Sulje\",\n-    \"add-goal\": \"Add goal\",\n-    \"no-objective-added-yet\": \"No objectives added yet.\",\n-    \"no-objective-added-yet-description\": \"You can create a new objective or add an existing one.\",\n-    \"no-pdg-added-yet\": \"No personal development goals added yet.\",\n-    \"no-pdg-added-yet-description\": \"You can create a new PDG or add an existing one.\",\n-    \"no-kpi-added-yet\": \"No KPIs added yet.\",\n-    \"no-kpi-added-yet-description\": \"You can create a new KPI or add an existing one.\",\n-    \"add-new-goal\": \"Add new goal\",\n-    \"only-managers-have-access\": \"Vain esihenkilöillä on oikeus luoda kehityskeskusteluja alaistensa kanssa.\",\n+    \"add-goal\": \"Lisää tavoite\",\n+    \"no-objective-added-yet\": \"Tavoitteita ei ole lisätty vielä.\",\n+    \"no-objective-added-yet-description\": \"Voit luoda uuden tavoitteen tai lisätä olemassa olevan.\",\n+    \"no-pdg-added-yet\": \"Henkilökohtaisia kehitystavoitteita ei ole lisätty vielä.\",\n+    \"no-pdg-added-yet-description\": \"Voit luoda uuden henkilökohtaisen kehitystavoitteen tai lisätä olemassa olevan.\",\n+    \"no-kpi-added-yet\": \"Avainlukuja ei ole lisätty vielä.\",\n+    \"no-kpi-added-yet-description\": \"Voit luoda uuden avainluvun tai lisätä olemassa olevan.\",\n+    \"add-new-goal\": \"Lisää uusi tavoite\",\n+    \"only-managers-have-access\": \"Vain esihenkilöillä on oikeus luoda henkilökohtaisia kehitystavoitteita alaistensa kanssa.\",\n     \"add-existing-goal\": \"Lisää olemassa oleva\",\n     \"edit\": \"Muokkaa\",\n     \"remove-goal\": \"Poista 1:1-tapaamisesta\",\n     \"remove\": \"Poista\",\n     \"topic-delete-text\": \"Poista tämä kohde ja kaikki siihen liittyvät kommentit?\",\n-    \"topic-delete-comments-text\": \"Huomaa: Tämä kohta poistetaan järjestelmästä. Toimintoa ei voi kumota.\",\n+    \"topic-delete-comments-text\": \"Huomautus: Kohde poistetaan järjestelmästä. Tätä toimintoa ei voi perua.\",\n     \"topic-remove-text\": \"Poista tästä 1:1-tapaamisesta tämä kohde ja kaikki siihen liittyvät kommentit?\",\n     \"topic-remove-comments-text\": \"Huomaa: Poistat kohteen tapaamisesta mutta et järjestelmästä.\",\n     \"progress\": \"Edistyminen\",\n     \"done\": \"Valmis\",\n     \"start-date\": \"Aloituspäivä\",\n-    \"goal-updated-successfully\": \"Goal updated successfully\",\n-    \"goal-created-successfully\": \"Goal created successfully\",\n-    \"goal-deleted-successfully\": \"Goal deleted successfully\",\n-    \"error-saving-goal\": \"Error while saving goal\",\n+    \"goal-updated-successfully\": \"Tavoitteen päivitys onnistui\",\n+    \"goal-created-successfully\": \"Tavoitteen luonti onnistui\",\n+    \"goal-deleted-successfully\": \"Tavoitteen poisto onnistui\",\n+    \"error-saving-goal\": \"Virhe tavoitteen tallennuksessa\",\n     \"error-deleting-goal\": \"Error while saving goal\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/238#discussion_r1833969416",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/locales/fi-FI/template-details.json",
//         "line": 20,
//         "comment": "not updated",
//         "commitId": "1aea001f560651980b463857c8e0644afbd3b27a",
//         "codeSnippet": "@@ -1,110 +1,110 @@\n {\n     \"cancel\": \"Peruuta\",\n     \"copy-btn\": \"Kopioi\",\n-    \"copy-verification-title\": \"Copy template\",\n-    \"template-name-helper-text\": \"Give your template a name that is clear and understandable\",\n+    \"copy-verification-title\": \"Kopioi malli\",\n+    \"template-name-helper-text\": \"Anna mallille nimi, joka on selkeä ja ymmärrettävä\",\n     \"template-name\": \"Mallin nimi\",\n-    \"delete-verification-warning\": \"This change cannot be undone\",\n+    \"delete-verification-warning\": \"Tätä muutosta ei voi perua\",\n     \"close\": \"Sulje\",\n-    \"go-to-overview\": \"Go to template overview\",\n+    \"go-to-overview\": \"Siirry mallien yleiskatsaukseen\",\n     \"discard-changes-title\": \"Hylkää muutokset\",\n-    \"discard-changes-info\": \"Any unpublished changes will be discarded.\",\n-    \"go-back\": \"Go to overview page\",\n-    \"old-version-header\": \"Outdated template\",\n-    \"old-version-message\": \"It looks like you are using an older version of this template. Please return to the overview page to select the latest version.\",\n-    \"published-dialog-title\": \"Template published!\",\n+    \"discard-changes-info\": \"Kaikki julkaisemattomat muutokset hylätään.\",\n+    \"go-back\": \"Siirry yhteenvetosivulle\",\n+    \"old-version-header\": \"Vanhentunut malli\",\n+    \"old-version-message\": \"Vaikuttaa siltä, että käytät mallin vanhempaa versiota. Palaa yhteenvetosivulle ja valitse viimeisin versio.\",\n+    \"published-dialog-title\": \"Malli julkaistu!\",\n     \"published-dialog-description\": \"Malli on nyt saatavilla, kun aloitat uuden tapaamisen\",\n     \"saved\": \"Tallennettu\",\n-    \"template-updated\": \"Template is now in editable. You can now make changes and re-publish. Unpublished version will be deleted.\",\n-    \"template-updated-error\": \"Update failed. Please try again\",\n+    \"template-updated\": \"Malli on nyt muokattavissa. Voit tehdä muutoksia ja julkaista uudelleen. Julkaisematon versio poistetaan.\",\n+    \"template-updated-error\": \"Päivitys epäonnistui. Yritä uudelleen\",\n     \"template-published\": \"Template is now published!\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/238#discussion_r1833972010",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/Components/RichTextEditor/RichTextEditor.tsx",
//         "line": null,
//         "comment": "use color from CO color palette ",
//         "commitId": "a51fffba83ae8a1b459692d5db2ceab2d793f3fd",
//         "codeSnippet": "@@ -117,7 +107,7 @@ export const RichTextEditor = ({\n                 '.sceditor-container': {\n                     transition: 'height 0.3s ease-in-out',\n                     border: maxLength\n-                        ? bbCodetoPlainText(currentValue).length > maxLength\n+                        ? bbcodeToPlainText(currentValue).length > maxLength\n                             ? '1px solid red'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/241#discussion_r1836390570",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Topic/TopicHeader.tsx",
//         "line": null,
//         "comment": "kindly check if translation needed for t('add-a-topic')?",
//         "commitId": "a51fffba83ae8a1b459692d5db2ceab2d793f3fd",
//         "codeSnippet": "@@ -63,55 +63,18 @@ const TopicHeader: FC<Props> = ({\n         }, 600)\n     }\n \n-    const convertBBCodeToHTML = (bbcode: string): string => {\n-        let html = bbcode\n-            .replace(/\\[b\\](.*?)\\[\\/b\\]/g, '<strong>$1</strong>') // Convert bold tags\n-            .replace(/\\[i\\](.*?)\\[\\/i\\]/g, '<em>$1</em>') // Convert italic tags\n-            .replace(/\\[url=(.*?)\\](.*?)\\[\\/url\\]/g, '<a href=\"$1\">$2</a>') // Convert URL tags\n-            .replace(\n-                /\\[email=(.*?)\\](.*?)\\[\\/email\\]/g,\n-                '<a href=\"mailto:$1\">$2</a>'\n-            ) // Convert email tags\n-            .replace(/\\[img\\](.*?)\\[\\/img\\]/g, '<img src=\"$1\" alt=\"\" />') // Convert image tags\n-            .replace(\n-                /\\[quote\\](.*?)\\[\\/quote\\]/g,\n-                '<blockquote>$1</blockquote>'\n-            ) // Convert quote tags\n-            .replace(/\\[list\\](.*?)\\[\\/list\\]/g, '<ul>$1</ul>') // Convert list tags\n-            .replace(/\\[\\*\\](.*?)\\n/g, '<li>$1</li>') // Convert list items\n-            .replace(/\\[br\\]/g, '<br />') // Convert line breaks\n-            .replace(/\\n/g, '<br />') // Convert new lines to <br> for HTML\n-\n-        // Clean up any remaining BBCode tags\n-        html = html.replace(/\\[.*?\\]/g, '')\n-\n-        return html\n-    }\n-\n     return (\n         <FlexBox\n             flexDirection='column'\n             onClick={onClick}\n             style={{ cursor: 'pointer' }}\n         >\n             <FlexBox justifyContent='space-between' alignItems='center'>\n-                <Typography\n-                    fontWeight='550'\n-                    overflow='hidden'\n-                    textOverflow='ellipsis'\n-                    variant='subtitle1'\n-                >\n-                    {isEmpty(question) ? (\n-                        'Add a topic'\n-                    ) : (\n-                        <div\n-                            dangerouslySetInnerHTML={{\n-                                __html: convertBBCodeToHTML(safeContent)\n-                            }}\n-                        />\n-                    )}\n-                </Typography>\n-\n+                <RichTextPreview\n+                    content={\n+                        safeContent.length === 0 ? 'Add a topic' : safeContent",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/241#discussion_r1836405468",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Topic/TopicHeader.tsx",
//         "line": null,
//         "comment": "its better to use isEmpty(\"safeContent\") for string as it will trim the empty spaces and checks the length! Rest depends upon the requirement!",
//         "commitId": "a51fffba83ae8a1b459692d5db2ceab2d793f3fd",
//         "codeSnippet": "@@ -63,55 +63,18 @@ const TopicHeader: FC<Props> = ({\n         }, 600)\n     }\n \n-    const convertBBCodeToHTML = (bbcode: string): string => {\n-        let html = bbcode\n-            .replace(/\\[b\\](.*?)\\[\\/b\\]/g, '<strong>$1</strong>') // Convert bold tags\n-            .replace(/\\[i\\](.*?)\\[\\/i\\]/g, '<em>$1</em>') // Convert italic tags\n-            .replace(/\\[url=(.*?)\\](.*?)\\[\\/url\\]/g, '<a href=\"$1\">$2</a>') // Convert URL tags\n-            .replace(\n-                /\\[email=(.*?)\\](.*?)\\[\\/email\\]/g,\n-                '<a href=\"mailto:$1\">$2</a>'\n-            ) // Convert email tags\n-            .replace(/\\[img\\](.*?)\\[\\/img\\]/g, '<img src=\"$1\" alt=\"\" />') // Convert image tags\n-            .replace(\n-                /\\[quote\\](.*?)\\[\\/quote\\]/g,\n-                '<blockquote>$1</blockquote>'\n-            ) // Convert quote tags\n-            .replace(/\\[list\\](.*?)\\[\\/list\\]/g, '<ul>$1</ul>') // Convert list tags\n-            .replace(/\\[\\*\\](.*?)\\n/g, '<li>$1</li>') // Convert list items\n-            .replace(/\\[br\\]/g, '<br />') // Convert line breaks\n-            .replace(/\\n/g, '<br />') // Convert new lines to <br> for HTML\n-\n-        // Clean up any remaining BBCode tags\n-        html = html.replace(/\\[.*?\\]/g, '')\n-\n-        return html\n-    }\n-\n     return (\n         <FlexBox\n             flexDirection='column'\n             onClick={onClick}\n             style={{ cursor: 'pointer' }}\n         >\n             <FlexBox justifyContent='space-between' alignItems='center'>\n-                <Typography\n-                    fontWeight='550'\n-                    overflow='hidden'\n-                    textOverflow='ellipsis'\n-                    variant='subtitle1'\n-                >\n-                    {isEmpty(question) ? (\n-                        'Add a topic'\n-                    ) : (\n-                        <div\n-                            dangerouslySetInnerHTML={{\n-                                __html: convertBBCodeToHTML(safeContent)\n-                            }}\n-                        />\n-                    )}\n-                </Typography>\n-\n+                <RichTextPreview\n+                    content={\n+                        safeContent.length === 0 ? 'Add a topic' : safeContent",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/241#discussion_r1836424887",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Topic/TopicHeader.tsx",
//         "line": null,
//         "comment": "done",
//         "commitId": "a51fffba83ae8a1b459692d5db2ceab2d793f3fd",
//         "codeSnippet": "@@ -63,55 +63,18 @@ const TopicHeader: FC<Props> = ({\n         }, 600)\n     }\n \n-    const convertBBCodeToHTML = (bbcode: string): string => {\n-        let html = bbcode\n-            .replace(/\\[b\\](.*?)\\[\\/b\\]/g, '<strong>$1</strong>') // Convert bold tags\n-            .replace(/\\[i\\](.*?)\\[\\/i\\]/g, '<em>$1</em>') // Convert italic tags\n-            .replace(/\\[url=(.*?)\\](.*?)\\[\\/url\\]/g, '<a href=\"$1\">$2</a>') // Convert URL tags\n-            .replace(\n-                /\\[email=(.*?)\\](.*?)\\[\\/email\\]/g,\n-                '<a href=\"mailto:$1\">$2</a>'\n-            ) // Convert email tags\n-            .replace(/\\[img\\](.*?)\\[\\/img\\]/g, '<img src=\"$1\" alt=\"\" />') // Convert image tags\n-            .replace(\n-                /\\[quote\\](.*?)\\[\\/quote\\]/g,\n-                '<blockquote>$1</blockquote>'\n-            ) // Convert quote tags\n-            .replace(/\\[list\\](.*?)\\[\\/list\\]/g, '<ul>$1</ul>') // Convert list tags\n-            .replace(/\\[\\*\\](.*?)\\n/g, '<li>$1</li>') // Convert list items\n-            .replace(/\\[br\\]/g, '<br />') // Convert line breaks\n-            .replace(/\\n/g, '<br />') // Convert new lines to <br> for HTML\n-\n-        // Clean up any remaining BBCode tags\n-        html = html.replace(/\\[.*?\\]/g, '')\n-\n-        return html\n-    }\n-\n     return (\n         <FlexBox\n             flexDirection='column'\n             onClick={onClick}\n             style={{ cursor: 'pointer' }}\n         >\n             <FlexBox justifyContent='space-between' alignItems='center'>\n-                <Typography\n-                    fontWeight='550'\n-                    overflow='hidden'\n-                    textOverflow='ellipsis'\n-                    variant='subtitle1'\n-                >\n-                    {isEmpty(question) ? (\n-                        'Add a topic'\n-                    ) : (\n-                        <div\n-                            dangerouslySetInnerHTML={{\n-                                __html: convertBBCodeToHTML(safeContent)\n-                            }}\n-                        />\n-                    )}\n-                </Typography>\n-\n+                <RichTextPreview\n+                    content={\n+                        safeContent.length === 0 ? 'Add a topic' : safeContent",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/241#discussion_r1837477385",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/locales/da-DK/template-details.json",
//         "line": null,
//         "comment": "Add in source file only i.e. en-GB, remove from others",
//         "commitId": "d4e5c00fefe1e1401a60c237988f93de2de96c94",
//         "codeSnippet": "@@ -1,5 +1,6 @@\n {\n     \"cancel\": \"Annuller\",\n+    \"yes\": \"Yes\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/251#discussion_r1848307202",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/Dialogs/DiscardBlockerDialog.tsx",
//         "line": 24,
//         "comment": "this dialog is used for breadcrumb redirection also (template) :\r\n useEffect(() => {\r\n        if (blocker.state === 'blocked') {\r\n            setShowVerifyDiscardBlocker(getOpenState(null, goToOverview))\r\n        }\r\n    }, [blocker]),\r\n    please use different dialog or pass the 'ok' as variable (make the dialog box reusable\"",
//         "commitId": "d4e5c00fefe1e1401a60c237988f93de2de96c94",
//         "codeSnippet": "@@ -17,11 +17,11 @@ const DiscardDialog: FC<Props> = ({ dialogState, onClose }) => {\n         <Dialog\n             dialogState={dialogState}\n             closeBtn={{\n-                text: t('close')\n+                text: t('cancel')\n             }}\n             submitBtn={{\n                 showCaution: true,\n-                text: t('go-to-overview')\n+                text: t('yes')",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/251#discussion_r1848320662",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Pages/GoalManagement.tsx",
//         "line": 345,
//         "comment": "please check if showGuidanceForGoalPage is set for correct conditions or not",
//         "commitId": "f1f3c9320c482a8517baf19c7273b53752afc02c",
//         "codeSnippet": "@@ -344,9 +345,17 @@ const GoalManagement: FC<Props> = ({ oneToOneId, section }) => {\n             {showGuidanceForGoalPage() && (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/254#discussion_r1848331508",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/Providers/OneToOneProvider/OneToOneProvider.tsx",
//         "line": null,
//         "comment": "We do not require to fetch other data than one to one.",
//         "commitId": "afe4d7c963c23595d7d8249285622cd3abe94e7b",
//         "codeSnippet": "@@ -187,9 +199,10 @@ const OneToOneProvider: FCC = ({ children }) => {\n                     })\n                     .finally(() => {\n                         setTodosLoader(false)\n+                        setOverviewLoader(false)\n                     })\n             })\n-    }, [])\n+    }, [completedOneToOneDeleted])",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/255#discussion_r1850031602",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/SelectTopic.tsx",
//         "line": null,
//         "comment": "put in translation : t('answer')",
//         "commitId": "6a6c81ad0ce862363b4e96686cadff3e16344a56",
//         "codeSnippet": "@@ -0,0 +1,213 @@\n+import React, { FC, Fragment, useCallback, useEffect, useRef } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { isEmpty } from 'lodash/fp'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { RichTextPreview } from '@/Components/RichTextEditor'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { contentparser } from '@/services/template'\n+import { Question, Rights, SettingType, UserInfo } from '@/services/topics'\n+import { ColoredAvatar } from '@catalystone/react-core-ui'\n+import {\n+    Avatar,\n+    Divider,\n+    FormControl,\n+    MenuItem,\n+    Select,\n+    SelectChangeEvent,\n+    TextField,\n+    Typography\n+} from '@mui/material'\n+import { Box, Stack } from '@mui/system'\n+\n+type Props = {\n+    topicData: Question\n+    onSelect: (\n+        event: React.ChangeEvent<HTMLInputElement>,\n+        topicId: string,\n+        topicType: number\n+    ) => void\n+    onComment: (\n+        event: React.FocusEvent<\n+            HTMLInputElement | HTMLTextAreaElement,\n+            Element\n+        >,\n+        topicId: string,\n+        topicType: number\n+    ) => void\n+    userData: UserInfo[]\n+    showAnswer: boolean\n+}\n+const SelectTopic: FC<Props> = ({\n+    onSelect,\n+    onComment,\n+    topicData,\n+    userData,\n+    showAnswer\n+}) => {\n+    const { t } = useTranslation('meeting')\n+    const { t: g } = useTranslation('global')\n+    const { loggedInUser, languageId } = useGlobal()\n+    const prevCommentRef = useRef<string | null>('')\n+    const [selectedOptionId, setSelectedOptionId] = React.useState(\n+        topicData.selectedOptionId\n+    )\n+    const handleChange = (\n+        event: SelectChangeEvent<string>,\n+        topicId: string,\n+        topicType: number\n+    ) => {\n+        onSelect(\n+            event as unknown as React.ChangeEvent<HTMLInputElement>,\n+            topicId,\n+            topicType\n+        )\n+        setSelectedOptionId(event.target.value)\n+    }\n+\n+    const getUserAvatar = useCallback(\n+        (userId: string) => {\n+            return userData.find((user) => user.userId === userId)?.ownerAvatar\n+        },\n+        [userData]\n+    )\n+\n+    const getUserName = useCallback(\n+        (userId: string) => {\n+            return userData.find((user) => user.userId === userId)?.ownerName\n+        },\n+        [userData, loggedInUser]\n+    )\n+    const getUserInitials = useCallback(\n+        (userId: string) => {\n+            return userData.find((user) => user.userId === userId)\n+                ?.ownerNameInitials\n+        },\n+        [userData]\n+    )\n+\n+    useEffect(() => {\n+        prevCommentRef.current = topicData.topicRemarks[0]?.remark\n+    }, [])\n+    const handleBlur = (\n+        event: React.FocusEvent<\n+            HTMLInputElement | HTMLTextAreaElement,\n+            Element\n+        >,\n+        topicId: string,\n+        topicType: number\n+    ) => {\n+        if (event.target.value.trim() !== prevCommentRef.current?.trim()) {\n+            prevCommentRef.current = event.target.value\n+            onComment(event, topicId, topicType)\n+        }\n+    }\n+\n+    return (\n+        <Fragment key={topicData.topicId}>\n+            <RichTextPreview\n+                key={topicData.topicId}\n+                fontSize={24}\n+                fontWeight={400}\n+                pt={3}\n+                content={contentparser(topicData.questionLabel, languageId)}\n+            />\n+            <Divider sx={{ margin: '10px 0' }} />\n+            <FormControl sx={{ my: 2, minWidth: 120, ml: '10px' }}>\n+                {!showAnswer ? (\n+                    <Select\n+                        style={{\n+                            pointerEvents:\n+                                topicData.right === Rights.READ ||\n+                                Rights.NO_RIGHT\n+                                    ? 'none'\n+                                    : 'auto'\n+                        }}\n+                        sx={{ minWidth: '20%' }}\n+                        value={selectedOptionId}\n+                        onChange={(event) =>\n+                            handleChange(\n+                                event,\n+                                topicData.topicId,\n+                                SettingType.MultipleChoice\n+                            )\n+                        }\n+                        defaultValue={topicData.selectedOptionId}\n+                        displayEmpty\n+                    >\n+                        {topicData.options.map((option) => (\n+                            <MenuItem value={option.id}>\n+                                {option.value}\n+                            </MenuItem>\n+                        ))}\n+                    </Select>\n+                ) : (\n+                    <Box>\n+                        {!isEmpty(topicData.answer) ? (\n+                            <Stack direction='row'>\n+                                <Typography fontWeight={600} mr={0.5}>\n+                                    Answer:",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/258#discussion_r1851422146",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/RadioTopic.tsx",
//         "line": null,
//         "comment": "use translation for answer",
//         "commitId": "6a6c81ad0ce862363b4e96686cadff3e16344a56",
//         "codeSnippet": "@@ -104,45 +109,64 @@ const RadioTopic: FC<Props> = ({\n             />\n             <Divider sx={{ margin: '10px 0' }} />\n \n-            <FormControl>\n-                <RadioGroup\n-                    style={{\n-                        pointerEvents:\n-                            topicData.right === Rights.READ || Rights.NO_RIGHT\n-                                ? 'none'\n-                                : 'auto'\n-                    }}\n-                    aria-labelledby='demo-radio-buttons-group-label'\n-                    defaultValue={topicData.selectedOptionId}\n-                    name='radio-buttons-group'\n-                    onChange={(event) =>\n-                        handleChange(\n-                            event,\n-                            topicData.topicId,\n-                            SettingType.MultipleChoice\n-                        )\n-                    }\n-                >\n-                    {topicData.options?.map((option) => {\n-                        return (\n-                            <FormControlLabel\n-                                disabled={\n-                                    topicData.right ===\n-                                        (Rights.READ || Rights.NO_RIGHT) &&\n-                                    topicData.selectedOptionId === option.id\n-                                }\n-                                key={option.id}\n-                                value={option.id}\n-                                control={<Radio />}\n-                                label={contentparser(option.value, languageId)}\n-                            />\n-                        )\n-                    })}\n-                </RadioGroup>\n+            <FormControl sx={{ ml: '10px' }}>\n+                {!showAnswer ? (\n+                    <RadioGroup\n+                        style={{\n+                            pointerEvents:\n+                                topicData.right === Rights.READ ||\n+                                Rights.NO_RIGHT\n+                                    ? 'none'\n+                                    : 'auto'\n+                        }}\n+                        aria-labelledby='demo-radio-buttons-group-label'\n+                        defaultValue={topicData.selectedOptionId}\n+                        name='radio-buttons-group'\n+                        onChange={(event) =>\n+                            handleChange(\n+                                event,\n+                                topicData.topicId,\n+                                SettingType.MultipleChoice\n+                            )\n+                        }\n+                    >\n+                        {topicData.options?.map((option) => {\n+                            return (\n+                                <FormControlLabel\n+                                    disabled={\n+                                        topicData.right ===\n+                                            (Rights.READ || Rights.NO_RIGHT) &&\n+                                        topicData.selectedOptionId === option.id\n+                                    }\n+                                    key={option.id}\n+                                    value={option.id}\n+                                    control={<Radio />}\n+                                    label={contentparser(\n+                                        option.value,\n+                                        languageId\n+                                    )}\n+                                />\n+                            )\n+                        })}\n+                    </RadioGroup>\n+                ) : (\n+                    <Box>\n+                        {!isEmpty(topicData.answer) ? (\n+                            <Stack direction='row'>\n+                                <Typography fontWeight={600} mr={0.5}>\n+                                    Answer:",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/258#discussion_r1851422797",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/RadioTopic.tsx",
//         "line": null,
//         "comment": "use translation for \"not answered\"",
//         "commitId": "6a6c81ad0ce862363b4e96686cadff3e16344a56",
//         "codeSnippet": "@@ -104,45 +109,64 @@ const RadioTopic: FC<Props> = ({\n             />\n             <Divider sx={{ margin: '10px 0' }} />\n \n-            <FormControl>\n-                <RadioGroup\n-                    style={{\n-                        pointerEvents:\n-                            topicData.right === Rights.READ || Rights.NO_RIGHT\n-                                ? 'none'\n-                                : 'auto'\n-                    }}\n-                    aria-labelledby='demo-radio-buttons-group-label'\n-                    defaultValue={topicData.selectedOptionId}\n-                    name='radio-buttons-group'\n-                    onChange={(event) =>\n-                        handleChange(\n-                            event,\n-                            topicData.topicId,\n-                            SettingType.MultipleChoice\n-                        )\n-                    }\n-                >\n-                    {topicData.options?.map((option) => {\n-                        return (\n-                            <FormControlLabel\n-                                disabled={\n-                                    topicData.right ===\n-                                        (Rights.READ || Rights.NO_RIGHT) &&\n-                                    topicData.selectedOptionId === option.id\n-                                }\n-                                key={option.id}\n-                                value={option.id}\n-                                control={<Radio />}\n-                                label={contentparser(option.value, languageId)}\n-                            />\n-                        )\n-                    })}\n-                </RadioGroup>\n+            <FormControl sx={{ ml: '10px' }}>\n+                {!showAnswer ? (\n+                    <RadioGroup\n+                        style={{\n+                            pointerEvents:\n+                                topicData.right === Rights.READ ||\n+                                Rights.NO_RIGHT\n+                                    ? 'none'\n+                                    : 'auto'\n+                        }}\n+                        aria-labelledby='demo-radio-buttons-group-label'\n+                        defaultValue={topicData.selectedOptionId}\n+                        name='radio-buttons-group'\n+                        onChange={(event) =>\n+                            handleChange(\n+                                event,\n+                                topicData.topicId,\n+                                SettingType.MultipleChoice\n+                            )\n+                        }\n+                    >\n+                        {topicData.options?.map((option) => {\n+                            return (\n+                                <FormControlLabel\n+                                    disabled={\n+                                        topicData.right ===\n+                                            (Rights.READ || Rights.NO_RIGHT) &&\n+                                        topicData.selectedOptionId === option.id\n+                                    }\n+                                    key={option.id}\n+                                    value={option.id}\n+                                    control={<Radio />}\n+                                    label={contentparser(\n+                                        option.value,\n+                                        languageId\n+                                    )}\n+                                />\n+                            )\n+                        })}\n+                    </RadioGroup>\n+                ) : (\n+                    <Box>\n+                        {!isEmpty(topicData.answer) ? (\n+                            <Stack direction='row'>\n+                                <Typography fontWeight={600} mr={0.5}>\n+                                    Answer:\n+                                </Typography>\n+                                {topicData.answer}\n+                            </Stack>\n+                        ) : (\n+                            <Typography>(Not answered)</Typography>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/258#discussion_r1851423192",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/SelectTopic.tsx",
//         "line": null,
//         "comment": "use translation for \"not answered\"",
//         "commitId": "6a6c81ad0ce862363b4e96686cadff3e16344a56",
//         "codeSnippet": "@@ -0,0 +1,213 @@\n+import React, { FC, Fragment, useCallback, useEffect, useRef } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { isEmpty } from 'lodash/fp'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import { RichTextPreview } from '@/Components/RichTextEditor'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { contentparser } from '@/services/template'\n+import { Question, Rights, SettingType, UserInfo } from '@/services/topics'\n+import { ColoredAvatar } from '@catalystone/react-core-ui'\n+import {\n+    Avatar,\n+    Divider,\n+    FormControl,\n+    MenuItem,\n+    Select,\n+    SelectChangeEvent,\n+    TextField,\n+    Typography\n+} from '@mui/material'\n+import { Box, Stack } from '@mui/system'\n+\n+type Props = {\n+    topicData: Question\n+    onSelect: (\n+        event: React.ChangeEvent<HTMLInputElement>,\n+        topicId: string,\n+        topicType: number\n+    ) => void\n+    onComment: (\n+        event: React.FocusEvent<\n+            HTMLInputElement | HTMLTextAreaElement,\n+            Element\n+        >,\n+        topicId: string,\n+        topicType: number\n+    ) => void\n+    userData: UserInfo[]\n+    showAnswer: boolean\n+}\n+const SelectTopic: FC<Props> = ({\n+    onSelect,\n+    onComment,\n+    topicData,\n+    userData,\n+    showAnswer\n+}) => {\n+    const { t } = useTranslation('meeting')\n+    const { t: g } = useTranslation('global')\n+    const { loggedInUser, languageId } = useGlobal()\n+    const prevCommentRef = useRef<string | null>('')\n+    const [selectedOptionId, setSelectedOptionId] = React.useState(\n+        topicData.selectedOptionId\n+    )\n+    const handleChange = (\n+        event: SelectChangeEvent<string>,\n+        topicId: string,\n+        topicType: number\n+    ) => {\n+        onSelect(\n+            event as unknown as React.ChangeEvent<HTMLInputElement>,\n+            topicId,\n+            topicType\n+        )\n+        setSelectedOptionId(event.target.value)\n+    }\n+\n+    const getUserAvatar = useCallback(\n+        (userId: string) => {\n+            return userData.find((user) => user.userId === userId)?.ownerAvatar\n+        },\n+        [userData]\n+    )\n+\n+    const getUserName = useCallback(\n+        (userId: string) => {\n+            return userData.find((user) => user.userId === userId)?.ownerName\n+        },\n+        [userData, loggedInUser]\n+    )\n+    const getUserInitials = useCallback(\n+        (userId: string) => {\n+            return userData.find((user) => user.userId === userId)\n+                ?.ownerNameInitials\n+        },\n+        [userData]\n+    )\n+\n+    useEffect(() => {\n+        prevCommentRef.current = topicData.topicRemarks[0]?.remark\n+    }, [])\n+    const handleBlur = (\n+        event: React.FocusEvent<\n+            HTMLInputElement | HTMLTextAreaElement,\n+            Element\n+        >,\n+        topicId: string,\n+        topicType: number\n+    ) => {\n+        if (event.target.value.trim() !== prevCommentRef.current?.trim()) {\n+            prevCommentRef.current = event.target.value\n+            onComment(event, topicId, topicType)\n+        }\n+    }\n+\n+    return (\n+        <Fragment key={topicData.topicId}>\n+            <RichTextPreview\n+                key={topicData.topicId}\n+                fontSize={24}\n+                fontWeight={400}\n+                pt={3}\n+                content={contentparser(topicData.questionLabel, languageId)}\n+            />\n+            <Divider sx={{ margin: '10px 0' }} />\n+            <FormControl sx={{ my: 2, minWidth: 120, ml: '10px' }}>\n+                {!showAnswer ? (\n+                    <Select\n+                        style={{\n+                            pointerEvents:\n+                                topicData.right === Rights.READ ||\n+                                Rights.NO_RIGHT\n+                                    ? 'none'\n+                                    : 'auto'\n+                        }}\n+                        sx={{ minWidth: '20%' }}\n+                        value={selectedOptionId}\n+                        onChange={(event) =>\n+                            handleChange(\n+                                event,\n+                                topicData.topicId,\n+                                SettingType.MultipleChoice\n+                            )\n+                        }\n+                        defaultValue={topicData.selectedOptionId}\n+                        displayEmpty\n+                    >\n+                        {topicData.options.map((option) => (\n+                            <MenuItem value={option.id}>\n+                                {option.value}\n+                            </MenuItem>\n+                        ))}\n+                    </Select>\n+                ) : (\n+                    <Box>\n+                        {!isEmpty(topicData.answer) ? (\n+                            <Stack direction='row'>\n+                                <Typography fontWeight={600} mr={0.5}>\n+                                    Answer:\n+                                </Typography>\n+                                {topicData.answer}\n+                            </Stack>\n+                        ) : (\n+                            <Typography>(Not answered)</Typography>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/258#discussion_r1851427709",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/TodoEditor.tsx",
//         "line": null,
//         "comment": "use translation for \"remaove deadline\"\r\n",
//         "commitId": "2add248d0f9e0bf522cd7f080dc2477c3cc18453",
//         "codeSnippet": "@@ -125,12 +132,24 @@ const TodoEditor: FC<TodoEditorProps> = ({\n                 </FormControl>\n             </Grid>\n             <Grid my={2} item xs={12}>\n-                <DatePicker\n-                    sx={{ width: '100%' }}\n-                    label='Controlled picker'\n-                    value={dayjs(deadLine)}\n-                    onChange={(newValue) => setDateValue(newValue || null)}\n-                />\n+                <Stack display='flex' direction='row'>\n+                    <DatePicker\n+                        sx={{ width: '70%' }}\n+                        label='Controlled picker'\n+                        value={dayjs(deadLine)}\n+                        onChange={(newValue) => setDateValue(newValue || null)}\n+                    />\n+                    <Typography\n+                        sx={{\n+                            cursor: 'pointer',\n+                            color: 'info.main',\n+                            margin: 'auto'\n+                        }}\n+                        onClick={() => setDateValue(null)}\n+                    >\n+                        Remove deadline",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/259#discussion_r1851449430",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/CommentTopic.tsx",
//         "line": null,
//         "comment": "remove rem if not set",
//         "commitId": "cd144c7d542fb2b2d47c009bb7e2fbe5d0ea375b",
//         "codeSnippet": "@@ -94,29 +100,40 @@ const CommentTopic: FC<Props> = ({ userData, onComment, topicData, index }) => {\n     }\n \n     return (\n-        <Box margin='1rem' key={topicData.topicId}>\n+        <Box sx={{ cardProps }} padding='1rem' key={topicData.topicId}>\n             <Stack display='flex' direction='row'>\n-                <Box>{index}.</Box>\n+                <Box>{index}-</Box>\n                 <RichTextPreview\n+                    className='topic-label'\n                     key={topicData.topicId}\n                     fontSize={16}\n                     ml={0.5}\n                     fontWeight={400}\n                     content={contentparser(topicData.questionLabel, languageId)}\n                 />\n+                {(meetingFinished() ||\n+                    meeting.currentState === STATUS_READY_PREPARED) &&\n+                    isEmpty(topicData.topicRemarks[0]?.remark) && (\n+                        <Chip\n+                            label={h('not-answered')}\n+                            sx={{\n+                                backgroundColor: 'warning.light',\n+                                color: '#9E5908',\n+                                fontWeight: 600,\n+                                fontSize: '12px',\n+                                height: '24px',\n+                                ml: '.5rem'\n+                            }}\n+                        />\n+                    )}\n             </Stack>\n \n             <Divider sx={{ mt: '.5rem', mb: '.5rem' }} />\n \n-            {(meetingFinished() ||\n-                meeting.currentState === STATUS_READY_PREPARED) &&\n-                isEmpty(topicData.topicRemarks[0]?.remark) && (\n-                    <Typography>{h('(not-answered)')}</Typography>\n-                )}\n             {topicData.topicRemarks?.map((topic) => {\n                 return (\n                     (!isEmpty(topic.remark) || !meetingFinished()) && (\n-                        <Box sx={{ my: '1rem' }}>\n+                        <Box sx={{ my: 'rem' }}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/294#discussion_r1877907655",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/todo-table/TodoTableBody.tsx",
//         "line": null,
//         "comment": "should use (prev)=>!prev\r\nfor proper state management",
//         "commitId": "cd144c7d542fb2b2d47c009bb7e2fbe5d0ea375b",
//         "codeSnippet": "@@ -95,8 +97,17 @@ const TodoTableBody: FC<Props> = ({\n         overflowWrap: 'anywhere'\n     }))\n \n+    useEffect(() => {\n+        setTimeout(() => {\n+            todoListLocal.forEach((todo) => {\n+                todo.showAnimation = false\n+            })\n+            setRemoveAnimation(!removeAnimation) // will highlight newly created todo for 2 seconds.",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/294#discussion_r1877913600",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/todo-overview/todo-body/TodoBody.tsx",
//         "line": 169,
//         "comment": "\"handleStateChange\" function is being used at many places in this component.\r\nto archive and to mark done as well.\r\nPlease check for it, that this code does not alter behavior of other functionalities.",
//         "commitId": "705ea1639119092fdf6401a2a2ee8658900466fb",
//         "codeSnippet": "@@ -166,6 +166,7 @@ const TodoBody: FC<TodoBodyProps> = ({\n                     const updatedDetails = todo.todoOverviewDetails.map(\n                         (detail) => {\n                             if (detail.id === todoId) {\n+                                detail.done = !detail.done // to show the UI change immediately",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/302#discussion_r1889969479",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/todo-overview/todo-body/TodoBody.tsx",
//         "line": 169,
//         "comment": "handleStateChange is limited to todo overview here and wont impact anything.",
//         "commitId": "705ea1639119092fdf6401a2a2ee8658900466fb",
//         "codeSnippet": "@@ -166,6 +166,7 @@ const TodoBody: FC<TodoBodyProps> = ({\n                     const updatedDetails = todo.todoOverviewDetails.map(\n                         (detail) => {\n                             if (detail.id === todoId) {\n+                                detail.done = !detail.done // to show the UI change immediately",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/302#discussion_r1891424811",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/GeneralSection/GeneralSection.tsx",
//         "line": null,
//         "comment": "sonar issues need to be fixed.",
//         "commitId": "708d5ec84fbbc583e1fef71e412b45ab67cf723b",
//         "codeSnippet": "@@ -80,56 +81,60 @@ const GeneralSection: FC<Props> = ({ section, state }) => {\n                 }\n             }))\n \n-            return updateTopic(\n+            // First, update the topic\n+            await updateTopic(\n                 state.template.id,\n                 section.id,\n                 qs.id,\n                 'type',\n                 type\n-            ).then(() => {\n-                if (type === SettingType.Comment) return\n+            )\n \n-                Promise.all(\n-                    qs.options.map((option, id): Promise<Option> => {\n-                        return new Promise((resolve) => {\n-                            setTimeout(() => {\n-                                createSubTopic(\n-                                    state.template.id,\n-                                    section.id,\n-                                    qs.id\n-                                ).then((id) =>\n-                                    updateSubTopic(\n-                                        state.template.id,\n-                                        section.id,\n-                                        qs.id,\n-                                        id,\n-                                        option.value\n-                                    ).then(() =>\n-                                        resolve({\n-                                            ...option,\n-                                            id\n-                                        })\n-                                    )\n-                                )\n-                            }, id * 50)\n-                        })\n-                    })\n-                ).then((options) => {\n-                    setSections((sections) => ({\n-                        ...sections,\n-                        [section.id]: {\n-                            ...sections[section.id],\n-                            questionSettings: (\n-                                sections[section.id] as General\n-                            ).questionSettings.map((x) => {\n-                                return isEqual(x.id, qs.id)\n-                                    ? { ...x, type, options }\n-                                    : x\n-                            })\n-                        }\n-                    }))\n+            if (type === SettingType.Comment) {\n+                return\n+            }\n+\n+            // Create sub-topics for each option in parallel\n+            const options = await Promise.all(\n+                qs.options.map(async (option, id): Promise<Option> => {\n+                    // Introduce a slight delay to simulate async operations\n+                    await new Promise((resolve) => setTimeout(resolve, id * 50))",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/308#discussion_r1906618358",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/GeneralSection/GeneralSection.tsx",
//         "line": null,
//         "comment": "Make a common method for this.",
//         "commitId": "708d5ec84fbbc583e1fef71e412b45ab67cf723b",
//         "codeSnippet": "@@ -80,56 +81,60 @@ const GeneralSection: FC<Props> = ({ section, state }) => {\n                 }\n             }))\n \n-            return updateTopic(\n+            // First, update the topic\n+            await updateTopic(\n                 state.template.id,\n                 section.id,\n                 qs.id,\n                 'type',\n                 type\n-            ).then(() => {\n-                if (type === SettingType.Comment) return\n+            )\n \n-                Promise.all(\n-                    qs.options.map((option, id): Promise<Option> => {\n-                        return new Promise((resolve) => {\n-                            setTimeout(() => {\n-                                createSubTopic(\n-                                    state.template.id,\n-                                    section.id,\n-                                    qs.id\n-                                ).then((id) =>\n-                                    updateSubTopic(\n-                                        state.template.id,\n-                                        section.id,\n-                                        qs.id,\n-                                        id,\n-                                        option.value\n-                                    ).then(() =>\n-                                        resolve({\n-                                            ...option,\n-                                            id\n-                                        })\n-                                    )\n-                                )\n-                            }, id * 50)\n-                        })\n-                    })\n-                ).then((options) => {\n-                    setSections((sections) => ({\n-                        ...sections,\n-                        [section.id]: {\n-                            ...sections[section.id],\n-                            questionSettings: (\n-                                sections[section.id] as General\n-                            ).questionSettings.map((x) => {\n-                                return isEqual(x.id, qs.id)\n-                                    ? { ...x, type, options }\n-                                    : x\n-                            })\n-                        }\n-                    }))\n+            if (type === SettingType.Comment) {\n+                return\n+            }\n+\n+            // Create sub-topics for each option in parallel\n+            const options = await Promise.all(\n+                qs.options.map(async (option, id): Promise<Option> => {\n+                    // Introduce a slight delay to simulate async operations\n+                    await new Promise((resolve) => setTimeout(resolve, id * 50))\n+\n+                    const subTopicId = await createSubTopic(\n+                        state.template.id,\n+                        section.id,\n+                        qs.id\n+                    )\n+\n+                    await updateSubTopic(\n+                        state.template.id,\n+                        section.id,\n+                        qs.id,\n+                        subTopicId,\n+                        option.value\n+                    )\n+\n+                    return {\n+                        ...option,\n+                        id: subTopicId\n+                    }\n                 })\n-            })\n+            )\n+\n+            // Update the state again after all sub-topics have been created and updated\n+            setSections((sections) => ({",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/308#discussion_r1906618890",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one/OneToOneLayout.tsx",
//         "line": null,
//         "comment": "remove",
//         "commitId": "d2639d4771cfdd289ed7f4fc9d93ad45df28eb93",
//         "codeSnippet": "@@ -2,6 +2,7 @@ import { FC, useEffect, useState } from 'react'\n import { useTranslation } from 'react-i18next'\n import { Outlet, useLocation, useNavigate } from 'react-router-dom'\n \n+import { id } from 'fp-ts/lib/Refinement'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/346#discussion_r1926900351",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "public/locales/sv-SE/template-overview.json",
//         "line": 4,
//         "comment": "why this change?",
//         "commitId": "ea9b406c934df255686f7fd9831df918a72c44df",
//         "codeSnippet": "@@ -1,7 +1,7 @@\n {\n     \"insights\": \"Insikt\",\n     \"templates\": \"Mallar\",\n-    \"create-new-btn\": \"Skapa nytt\",\n+    \"create-new-btn\": \"Skapa ny mall\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/385#discussion_r1951970043",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalActionButtons.tsx",
//         "line": null,
//         "comment": "canAddGoal check can be applied to whole block.",
//         "commitId": "d92ce5658625adf5d011ed2a7eb1122034c8eaa2",
//         "codeSnippet": "@@ -69,22 +63,47 @@ const GoalActionButtons: FC<Props> = ({\n                     }\n                     arrow\n                 >\n-                    <Box>\n+                    <Box mr='8px'>\n                         {canAddGoal && (\n                             <Button\n+                                size='small'\n+                                sx={{\n+                                    fontSize: '13px'\n+                                }}\n                                 variant='text'\n                                 disabled={\n                                     meeting.revieweeManager !==\n                                     meeting.reviewerId\n                                 }\n-                                onClick={onClickAddExistingGoal}\n+                                onClick={(event) => {\n+                                    event.stopPropagation()\n+                                    onClickAddExistingGoal()\n+                                }}\n                             >\n                                 {t('add-existing-goal')}\n                             </Button>\n                         )}\n                     </Box>\n                 </Tooltip>\n             )}\n+            <Box>\n+                {canAddGoal && (\n+                    <Button\n+                        size='small'\n+                        sx={{\n+                            fontSize: '13px'\n+                        }}\n+                        disabled={!hasPermissionForGoal}\n+                        variant='contained'\n+                        onClick={(event) => {\n+                            event.stopPropagation()\n+                            createOrUpdateGoal(10, goalType, null, false, true)\n+                        }}\n+                    >\n+                        {getButtonName()}\n+                    </Button>\n+                )}\n+            </Box>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/387#discussion_r1951979630",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalSection.tsx",
//         "line": 24,
//         "comment": "remove?",
//         "commitId": "d92ce5658625adf5d011ed2a7eb1122034c8eaa2",
//         "codeSnippet": "@@ -21,9 +17,10 @@ import {\n     AccordionDetails,\n     AccordionSummary,\n     Box,\n-    keyframes,\n+    Chip,\n     Typography\n } from '@mui/material'\n+import { Stack } from '@mui/system'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/387#discussion_r1951980095",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalSection.tsx",
//         "line": null,
//         "comment": "Move to style?",
//         "commitId": "d92ce5658625adf5d011ed2a7eb1122034c8eaa2",
//         "codeSnippet": "@@ -109,65 +111,99 @@ const GoalSection: FC<Props> = ({\n         if (!emptyStateProps) return null\n \n         return (\n-            <EmptyState\n-                imageSize={{ width: '100px', height: '100px' }}\n-                src={emptyStateProps.src}\n-                emptyStateText={emptyStateProps.text}\n-                emptyStateTextDescription={emptyStateProps.description}\n-                emptyStateTextSize='16px'\n-                emptyStateTextDescriptionSize='14px'\n-            />\n+            <Stack direction='column' textAlign='center' my='24px' mx='12px'>\n+                <Typography fontWeight={600} fontSize='14px'>\n+                    {emptyStateProps.text}\n+                </Typography>\n+                <Typography color='#222222BF' fontSize='14px'>\n+                    {emptyStateProps.description}\n+                </Typography>\n+            </Stack>\n         )\n     }\n \n     return (\n         <Box mt='32px'>\n-            {(goalData?.data?.length ?? 0) > 0 ? (\n-                <Accordion\n-                    slotProps={{ transition: { timeout: 1000 } }}\n-                    expanded={expanded}\n-                    onChange={handleToggleAccordion}\n-                    elevation={0}\n+            <Accordion\n+                slotProps={{ transition: { timeout: 1000 } }}\n+                expanded={expanded}\n+                onChange={handleToggleAccordion}\n+                elevation={0}\n+                sx={{\n+                    border: '1px solid lightgrey',\n+                    borderRadius: '4px',\n+                    borderBottom: !expanded ? 'none' : '1px solid lightgrey'\n+                }}\n+            >\n+                <AccordionSummary\n+                    expandIcon={\n+                        <ExpandMoreIcon\n+                            sx={{ color: '#757575', fontSize: '24px' }}\n+                        />\n+                    }\n+                    sx={{\n+                        borderBottom: '1px solid lightgrey',\n+                        borderLeft: `12px solid ${getGoalTypeColor()}`,\n+                        borderRadius: '4px 4px 0 0',\n+                        padding: '0px 12px 0px 52px',\n+                        '.MuiAccordionSummary-content, .MuiAccordionSummary-content.Mui-expanded':\n+                            { margin: 0 },\n+                        '.MuiAccordionSummary-expandIconWrapper': {\n+                            position: 'absolute',\n+                            marginLeft: '12px',\n+                            left: 0\n+                        },\n+                        minHeight: '0px!important'\n+                    }}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/387#discussion_r1951985052",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalDetails.tsx",
//         "line": 111,
//         "comment": "can create a styled accordion use Style and import here??",
//         "commitId": "4dd941aee017754d27c85e4f4bbde63807772f2e",
//         "codeSnippet": "@@ -108,7 +108,12 @@ const GoalDetails: FC<Props> = ({\n     return (\n         <>\n             <Accordion\n-                sx={{ animation: `${fadeIn} 1s ease-in forwards` }}\n+                sx={{",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/393#discussion_r1957602999",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/todo-table/TodoTableBody.tsx",
//         "line": 227,
//         "comment": "Maybe a common styled variable?",
//         "commitId": "d3a18d33a1cf4cbebb61eac708931bb1eb93e6cc",
//         "codeSnippet": "@@ -102,348 +102,363 @@ const TodoTableBody: FC<Props> = ({\n             todoListLocal.forEach((todo) => {\n                 todo.showAnimation = false\n             })\n-            setRemoveAnimation((prev) => !prev) // will highlight newly created todo for 2 seconds.\n+            setRemoveAnimation((prev) => !prev) // will highlight newly created To-do for 2 seconds.\n         }, 2000)\n     }, [removeAnimation])\n \n     return (\n         <Grid container alignSelf='center'>\n-            {todoListLocal?.map((todo: Todo, index) => (\n-                <Fragment key={todo.id}>\n-                    <StyledGridItem\n-                        isSliding={todo.id === deletedTodoId}\n-                        display='flex'\n-                        item\n-                        xs={5}\n-                        sx={{\n-                            pointerEvents: `${todo.rights !== Rights.WRITE ? 'none' : ''}`,\n-                            backgroundColor: todo.showAnimation\n-                                ? '#EDF9FC'\n-                                : '',\n-                            transition: 'background-color 2s ease-out'\n-                        }}\n-                    >\n-                        {todo.done ? (\n-                            <CheckedIcon\n-                                onClick={() =>\n-                                    handleChangeStatus(index, todo.id, false)\n-                                }\n-                                sx={{\n-                                    color: todo.done ? '#005f78' : '#969696',\n-                                    cursor: 'pointer',\n-                                    ':hover': {\n-                                        scale: '1.125',\n-                                        transition: '0.3s'\n-                                    },\n-                                    visibility: !todo.archived\n-                                        ? 'visible'\n-                                        : 'hidden',\n-                                    ml: '9px'\n-                                }}\n-                            />\n-                        ) : (\n-                            <UncheckedIcon\n-                                onClick={() =>\n-                                    handleChangeStatus(index, todo.id, true)\n-                                }\n-                                sx={{\n-                                    ':hover': {\n-                                        scale: '1.125',\n-                                        transition: '0.4s'\n-                                    },\n-                                    visibility: !todo.archived\n-                                        ? 'visible'\n-                                        : 'hidden',\n-                                    ml: '9px'\n-                                }}\n-                            />\n-                        )}\n-                        <TextWrapper>\n-                            <Typography sx={{ overflow: 'hidden' }}>\n-                                {todo?.title}\n-                            </Typography>\n-                        </TextWrapper>\n-                    </StyledGridItem>\n-                    <StyledGridItem\n-                        sx={{\n-                            pointerEvents: `${todo.rights === (Rights.READ || Rights.NO_RIGHT) ? 'none' : ''}`,\n-                            backgroundColor: todo.showAnimation\n-                                ? '#EDF9FC'\n-                                : '',\n-                            transition: 'background-color 2s ease-out'\n-                        }}\n-                        item\n-                        xs={2}\n-                        isSliding={todo.id === deletedTodoId}\n-                    >\n-                        <Stack direction='row'>\n-                            <Box>\n-                                {!todo.archived &&\n-                                (todo.done ||\n-                                    !dayjs(todo?.deadline)\n-                                        .startOf('day')\n-                                        .isBefore(dayjs().startOf('day'))) ? (\n-                                    <Chip\n-                                        label={\n-                                            todo.done\n-                                                ? t('completed-todo')\n-                                                : t('pending-todo')\n-                                        }\n-                                        sx={{\n-                                            backgroundColor: todo.done\n-                                                ? '#A5D6BF'\n-                                                : '#F9A61A4D',\n-                                            color: !todo.done\n-                                                ? 'warning.dark'\n-                                                : 'success.main',\n-                                            fontWeight: 600,\n-                                            minWidth: '80px',\n-                                            fontSize: '12px',\n-                                            height: '24px'\n-                                        }}\n-                                    />\n-                                ) : (\n-                                    !todo.archived && (\n+            {todoListLocal?.map((todo: Todo, index) => {\n+                const hasMenuItems =\n+                    (!todo.remaining && !isMeetingFinishedOrReopened()) ||\n+                    (allowArchive(todo.remaining) &&\n+                        loggedInUser === todo.ownerId)\n+                return (\n+                    <Fragment key={todo.id}>\n+                        <StyledGridItem\n+                            isSliding={todo.id === deletedTodoId}\n+                            display='flex'\n+                            item\n+                            xs={5}\n+                            sx={{\n+                                pointerEvents: `${todo.rights !== Rights.WRITE ? 'none' : ''}`,\n+                                backgroundColor: todo.showAnimation\n+                                    ? '#EDF9FC'\n+                                    : '',\n+                                transition: 'background-color 2s ease-out'\n+                            }}\n+                        >\n+                            {todo.done ? (\n+                                <CheckedIcon\n+                                    onClick={() =>\n+                                        handleChangeStatus(\n+                                            index,\n+                                            todo.id,\n+                                            false\n+                                        )\n+                                    }\n+                                    sx={{\n+                                        color: todo.done\n+                                            ? '#005f78'\n+                                            : '#969696',\n+                                        cursor: 'pointer',\n+                                        ':hover': {\n+                                            scale: '1.125',\n+                                            transition: '0.3s'\n+                                        },\n+                                        visibility: !todo.archived\n+                                            ? 'visible'\n+                                            : 'hidden',\n+                                        ml: '9px'\n+                                    }}\n+                                />\n+                            ) : (\n+                                <UncheckedIcon\n+                                    onClick={() =>\n+                                        handleChangeStatus(index, todo.id, true)\n+                                    }\n+                                    sx={{\n+                                        ':hover': {\n+                                            scale: '1.125',\n+                                            transition: '0.4s'\n+                                        },\n+                                        visibility: !todo.archived\n+                                            ? 'visible'\n+                                            : 'hidden',\n+                                        ml: '9px'\n+                                    }}\n+                                />\n+                            )}\n+                            <TextWrapper>\n+                                <Typography sx={{ overflow: 'hidden' }}>\n+                                    {todo?.title}\n+                                </Typography>\n+                            </TextWrapper>\n+                        </StyledGridItem>\n+                        <StyledGridItem\n+                            sx={{\n+                                pointerEvents: `${todo.rights === (Rights.READ || Rights.NO_RIGHT) ? 'none' : ''}`,\n+                                backgroundColor: todo.showAnimation\n+                                    ? '#EDF9FC'\n+                                    : '',\n+                                transition: 'background-color 2s ease-out'\n+                            }}\n+                            item\n+                            xs={2}\n+                            isSliding={todo.id === deletedTodoId}\n+                        >\n+                            <Stack direction='row'>\n+                                <Box>\n+                                    {!todo.archived &&\n+                                    (todo.done ||\n+                                        !dayjs(todo?.deadline)\n+                                            .startOf('day')\n+                                            .isBefore(\n+                                                dayjs().startOf('day')\n+                                            )) ? (\n                                         <Chip\n-                                            label={t('todo-overdue')}\n+                                            label={\n+                                                todo.done\n+                                                    ? t('completed-todo')\n+                                                    : t('pending-todo')\n+                                            }\n                                             sx={{\n-                                                backgroundColor: 'error.light',\n-                                                color: '#A1195B',\n+                                                backgroundColor: todo.done\n+                                                    ? '#A5D6BF'\n+                                                    : '#F9A61A4D',\n+                                                color: !todo.done\n+                                                    ? 'warning.dark'\n+                                                    : 'success.main',\n                                                 fontWeight: 600,\n                                                 minWidth: '80px',\n                                                 fontSize: '12px',\n                                                 height: '24px'\n                                             }}\n                                         />\n-                                    )\n-                                )}\n-                                {todo.archived && (\n-                                    <Chip\n-                                        label={t('archived')}\n-                                        sx={{\n-                                            backgroundColor: 'grey[400]',\n-                                            color: 'grey[900]',\n-                                            fontWeight: 600,\n-                                            minWidth: '80px',\n-                                            fontSize: '12px',\n-                                            height: '24px'\n-                                        }}\n-                                    />\n-                                )}\n-                                <DoneOnDate>\n-                                    <DateFormatter\n-                                        sx={{ fontSize: '12px' }}\n-                                        dateToFormat={\n-                                            todo.archived\n-                                                ? todo.archivedDate\n-                                                : todo.doneOn\n-                                        }\n-                                        warning={false}\n-                                    />\n-                                </DoneOnDate>\n-                            </Box>\n-                        </Stack>\n-                    </StyledGridItem>\n-                    <StyledGridItem\n-                        item\n-                        xs={2}\n-                        isSliding={todo.id === deletedTodoId}\n-                        sx={{\n-                            backgroundColor: todo.showAnimation\n-                                ? '#EDF9FC'\n-                                : '',\n-                            transition: 'background-color 2s ease-out'\n-                        }}\n-                    >\n-                        <Typography>\n-                            <DateFormatter\n-                                sx={{ fontSize: '14px' }}\n-                                dateToFormat={todo?.createdOn}\n-                                warning={false}\n-                            />\n-                        </Typography>\n-                    </StyledGridItem>\n-\n-                    <StyledGridItem\n-                        item\n-                        xs={2}\n-                        isSliding={todo.id === deletedTodoId}\n-                        sx={{\n-                            backgroundColor: todo.showAnimation\n-                                ? '#EDF9FC'\n-                                : '',\n-                            transition: 'background-color 2s ease-out'\n-                        }}\n-                    >\n-                        <Typography fontSize='14px'>\n-                            {todo.deadline ? (\n+                                    ) : (\n+                                        !todo.archived && (\n+                                            <Chip\n+                                                label={t('todo-overdue')}\n+                                                sx={{\n+                                                    backgroundColor:\n+                                                        'error.light',\n+                                                    color: '#A1195B',\n+                                                    fontWeight: 600,\n+                                                    minWidth: '80px',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/394#discussion_r1959594624",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/employee-details/one-to-one-accordion/styled.ts",
//         "line": 7,
//         "comment": "does started and awaiting sign off have both same color in chip?? please check if this is ok or not",
//         "commitId": "60d4dae3423993fad71ae611c1abe293d5beeca6",
//         "codeSnippet": "@@ -4,15 +4,15 @@ import { styled, Chip, AccordionSummary, Button } from '@mui/material'\n export const colorMap: Record<number, string> = {\n     1: 'secondary',\n     2: 'info',\n-    3: 'warning',\n+    3: 'info',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/395#discussion_r1960951872",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": 89,
//         "comment": "please check this condition",
//         "commitId": "60d4dae3423993fad71ae611c1abe293d5beeca6",
//         "codeSnippet": "@@ -60,19 +68,47 @@ const EmployeeAvatar: FC<UserDetail> = ({ userDetails, showTimeStamp }) => {\n                     />\n                 </FlexBox>\n             )}\n-            {showTimeStamp && (\n-                <FlexBox alignItems='center'>\n-                    <Divider\n-                        sx={{ marginLeft: 2 }}\n-                        orientation='vertical'\n-                        flexItem\n-                    />\n-                    <Typography ml={1} color='GrayText'>\n-                        {t('saved')}\n-                        {timestamp}\n-                    </Typography>\n-                </FlexBox>\n-            )}\n+            <FlexBox alignItems='center'>\n+                <Divider\n+                    sx={{ marginLeft: '12px' }}\n+                    orientation='vertical'\n+                    flexItem\n+                />\n+                <Typography sx={{ marginLeft: '12px' }} color='GrayText'>\n+                    {`${t('saved')} `}\n+                    {timestamp}\n+                </Typography>\n+                <Divider\n+                    sx={{ marginLeft: 2 }}\n+                    orientation='vertical'\n+                    flexItem\n+                />\n+                {meeting.currentState ? (\n+                    <Box>\n+                        {meeting.isReopened &&\n+                        meeting.currentState !== STATUS_REOPEN &&",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/395#discussion_r1960961316",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1/Signoff.tsx",
//         "line": null,
//         "comment": "remove",
//         "commitId": "185d3b283d8ea7fdd6f5d26eaa8ed1ea43dfdf59",
//         "codeSnippet": "@@ -26,14 +29,17 @@ const Signoff: FC<Props> = ({ state, isConfirmStep }) => {\n                 marginTop={isConfirmStep ? '16px' : '8px'}\n                 marginBottom={isConfirmStep ? '16px' : '0px'}\n             >\n-                <Switch\n-                    checked={state.template.requiredSignoff}\n-                    onChange={(e) => {\n+                <DebouncedSwitch\n+                    checked={checked}\n+                    onChange={(e, newChecked) => {\n+                        console.log('New Value:', newChecked)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/399#discussion_r1962910815",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step1/Signoff.tsx",
//         "line": null,
//         "comment": "ok\r\n",
//         "commitId": "185d3b283d8ea7fdd6f5d26eaa8ed1ea43dfdf59",
//         "codeSnippet": "@@ -26,14 +29,17 @@ const Signoff: FC<Props> = ({ state, isConfirmStep }) => {\n                 marginTop={isConfirmStep ? '16px' : '8px'}\n                 marginBottom={isConfirmStep ? '16px' : '0px'}\n             >\n-                <Switch\n-                    checked={state.template.requiredSignoff}\n-                    onChange={(e) => {\n+                <DebouncedSwitch\n+                    checked={checked}\n+                    onChange={(e, newChecked) => {\n+                        console.log('New Value:', newChecked)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/399#discussion_r1962913087",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 478,
//         "comment": "why ` used?\r\n",
//         "commitId": "f8e91cb16c838f4cafe6e66f38b9f7f5e4975551",
//         "codeSnippet": "@@ -459,8 +468,20 @@ const EmployeeDetails: FC = () => {\n             <TemplateSelector\n                 onClose={() => setOpen(false)}\n                 open={open}\n-                onSubmit={handleSubmitSelected}\n+                onSubmit={(template) => confirmSubmission(template)}\n             />\n+            {isOpen(startOneToOneDialogState) && (\n+                <AlertDialog\n+                    dialogState={startOneToOneDialogState}\n+                    actionBtnTxt={g('yes')}\n+                    cancelBtnTxt={g('no')}\n+                    message={g(`confirm-start-oto-with-single`)}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/409#discussion_r1969381424",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 479,
//         "comment": "is this optional?\r\n",
//         "commitId": "f8e91cb16c838f4cafe6e66f38b9f7f5e4975551",
//         "codeSnippet": "@@ -459,8 +468,20 @@ const EmployeeDetails: FC = () => {\n             <TemplateSelector\n                 onClose={() => setOpen(false)}\n                 open={open}\n-                onSubmit={handleSubmitSelected}\n+                onSubmit={(template) => confirmSubmission(template)}\n             />\n+            {isOpen(startOneToOneDialogState) && (\n+                <AlertDialog\n+                    dialogState={startOneToOneDialogState}\n+                    actionBtnTxt={g('yes')}\n+                    cancelBtnTxt={g('no')}\n+                    message={g(`confirm-start-oto-with-single`)}\n+                    header=''",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/409#discussion_r1969382028",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-overview/OneToOneOverviewDataTable.tsx",
//         "line": 124,
//         "comment": "log in console??",
//         "commitId": "f8e91cb16c838f4cafe6e66f38b9f7f5e4975551",
//         "codeSnippet": "@@ -66,34 +76,50 @@ const OneToOneOverviewDataTable: FC = () => {\n         setOpen(false)\n     }\n \n-    const handleSubmit = (template: Nullable<Template>) => {\n+    const confirmStartOneToOne = (\n+        template: Nullable<Template>,\n+        isSelected = false\n+    ) => {\n         if (!template) return\n+        if (isSelected) {\n+            setStartOneToOneDialogState(\n+                getOpenState({ template }, handleSubmitSelected)\n+            )\n+        } else {\n+            setStartOneToOneDialogState(\n+                getOpenState({ template, selectedPeople }, handleSubmit)\n+            )\n+        }\n+    }\n+\n+    const handleSubmit = ({ template }: { template: Template }) => {\n+        setStartOneToOneDialogState(getClosedState())\n         handleStartOneToOne(\n             template.templateId,\n             template.workflowType,\n             selectedPeople.map(({ id }) => id)\n         )\n             .then(() => {\n                 createSnack({ alert: { severity: 'success' } })(\n-                    g('meeting-started')\n+                    h('meeting-started')\n                 )\n             })\n             .finally(() => handleClose())\n     }\n \n-    const handleSubmitSelected = (template: Nullable<Template>) => {\n-        if (!template) return\n+    const handleSubmitSelected = ({ template }: { template: Template }) => {\n+        setStartOneToOneDialogState(getClosedState())\n         handleStartOneToOne(template.templateId, template.workflowType, [\n             selected!\n         ])\n             .then(() => {\n                 createSnack({ alert: { severity: 'success' } })(\n-                    g('meeting-started')\n+                    h('meeting-started')\n                 )\n             })\n             .catch((error) => {\n                 createSnack({ alert: { severity: 'error' } })(\n-                    g('meeting-not-started')\n+                    h('meeting-not-started')\n                 )\n                 console.log(error)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/409#discussion_r1969383551",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 374,
//         "comment": "The signoffFeatureToggleEnabled flag is used in the filter call but not included in the dependency array of the surrounding effect, which may result in stale values. Please include signoffFeatureToggleEnabled in the dependency array of the useEffect hook.",
//         "commitId": "4a5361e8a883bc2442e404f3ca4b916e5a694e6a",
//         "codeSnippet": "@@ -370,7 +371,8 @@ const EmployeeDetails: FC = () => {\n             filter(\n                 employeeOneToOnes.employeeOneToOneDetails,\n                 filterString,\n-                statuses\n+                statuses,",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/416#discussion_r1976890653",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 374,
//         "comment": "I don't think this is required as signoffFeatureToggleEnabled is a static value that don't change untill we refresh the whole applicaion from browser.",
//         "commitId": "4a5361e8a883bc2442e404f3ca4b916e5a694e6a",
//         "codeSnippet": "@@ -370,7 +371,8 @@ const EmployeeDetails: FC = () => {\n             filter(\n                 employeeOneToOnes.employeeOneToOneDetails,\n                 filterString,\n-                statuses\n+                statuses,",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/416#discussion_r1976892828",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/filter/filter.ts",
//         "line": null,
//         "comment": "The word 'fuction' appears to be a typo and should be corrected to 'function'.\n```suggestion\n/* remove function when removing signoff feature toggle and rename function*/\n```",
//         "commitId": "4a5361e8a883bc2442e404f3ca4b916e5a694e6a",
//         "codeSnippet": "@@ -63,6 +63,17 @@ const isReopened = (statuses: string[]) => {\n     }\n }\n \n+/* remove function when removing signoff feature toggle and rename fuction*/",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/416#discussion_r1976898960",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Pages/GoalManagement.tsx",
//         "line": null,
//         "comment": "The 'saveGoal' callback references 'saveGoalItemFromMonoToOnetoOne', but the dependency array is empty. To avoid potential stale closures if these dependencies change, consider adding them to the dependency array.",
//         "commitId": "688018027672ae7bae3fc40d86a0309024ba3b4d",
//         "codeSnippet": "@@ -89,14 +89,17 @@ const GoalManagement: FC<Props> = ({ oneToOneId, section }) => {\n     const [reviewee] = userData\n     const { languageId } = useGlobal()\n \n-    const saveGoal = (data: CustomEvent) => {\n-        if (data.detail.itemId !== '0') {\n-            saveGoalItemFromMonoToOnetoOne(\n-                data.detail.itemId,\n-                data.detail.itemType\n-            )\n-        }\n-    }\n+    const saveGoal = useCallback(",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/418#discussion_r1979225683",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Step2/SectionDrawer/SectionDrawer.tsx",
//         "line": 219,
//         "comment": "can we use RoleConstants?\r\nfrom here\r\nsrc/features/one-to-one-meeting/constants.ts",
//         "commitId": "0f019390b71220afd6c65382793e13bf39f343a5",
//         "codeSnippet": "@@ -201,7 +206,19 @@ const SectionDrawer: FC<InnerProps> = ({\n                             </Typography>\n                             <FormControlLabel\n                                 sx={{ margin: 0 }}\n-                                disabled={isReadOnly(state)}\n+                                disabled={\n+                                    isReadOnly(state) ||\n+                                    (page.type === PageType.Goal &&\n+                                        !(\n+                                            state.template\n+                                                .availableForCustomRoles\n+                                                .length === 0 &&\n+                                            state.template.availableForRoles\n+                                                .length === 1 &&\n+                                            state.template\n+                                                .availableForRoles[0] === 1",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/422#discussion_r1984456741",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/App/App.tsx",
//         "line": null,
//         "comment": "remove this is not in use",
//         "commitId": "fb753771e41f2f11b25ad58983acd728247e270f",
//         "codeSnippet": "@@ -29,17 +33,20 @@ const App: FC<AppProps> = ({\n     publicUrl = import.meta.env.VITE_LOCALE_BASE_URL,\n     environment: { apiUrl }\n }) => {\n+    const assetsBasePath = getAssetsBasePath()",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/428#discussion_r1984587975",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Signatures/Signature.tsx",
//         "line": 170,
//         "comment": "add user's date format ",
//         "commitId": "fb753771e41f2f11b25ad58983acd728247e270f",
//         "codeSnippet": "@@ -0,0 +1,141 @@\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import FlexBox from '@/Components/FlexBox'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import {\n+    AWAITING_SIGN_OFF,\n+    STATUS_COMPLETE,\n+    STATUS_READY,\n+    STATUS_READY_PREPARED\n+} from '@/features/employee-details/constants'\n+import {\n+    getMeetingSignatures,\n+    OneToOneMeetingResponse,\n+    StateTransition\n+} from '@/services/one-to-one'\n+import { UserInfo } from '@/services/topics'\n+import { ColoredAvatar } from '@catalystone/react-core-ui'\n+import { Box } from '@mui/material'\n+\n+import { getAssetsBasePath } from '../../../App/config/assetsPath'\n+import {\n+    ConfirmReadText,\n+    LineSeparator,\n+    SignatureStyled,\n+    SignatureText,\n+    TextWrapper\n+} from './styled'\n+\n+type props = {\n+    id: string\n+    meeting: OneToOneMeetingResponse\n+    reviewer: UserInfo\n+    reviewee: UserInfo\n+}\n+\n+const Signature: FC<props> = ({ id, meeting, reviewee, reviewer }) => {\n+    const { loggedInUser } = useGlobal()\n+    const assetsBasePath = getAssetsBasePath()\n+    const { t } = useTranslation('one-to-one')\n+\n+    const [signatureTextReviewer, setSignatureTextReviewer] =\n+        useState<string>('')\n+    const [signatureTextReviewee, setSignatureTextReviewee] =\n+        useState<string>('')\n+\n+    useEffect(() => {\n+        const reviewerLoggedIn = loggedInUser === reviewer?.userId\n+\n+        getMeetingSignatures(id).then((stateTransition: StateTransition) => {\n+            const transitionHistoryLength =\n+                stateTransition.stateTransitionLogs.length\n+\n+            if (meeting.currentState === AWAITING_SIGN_OFF) {\n+                setSignatureTextReviewer(\n+                    reviewerLoggedIn\n+                        ? `${t('you-signed')} ${localDate(stateTransition.stateTransitionLogs[transitionHistoryLength - 1].changedOn)}`\n+                        : `${reviewer?.ownerName} ${t('has-signed')} ${localDate(stateTransition.stateTransitionLogs[transitionHistoryLength - 1].changedOn)}`\n+                )\n+                setSignatureTextReviewee(\n+                    reviewerLoggedIn\n+                        ? `${reviewee.ownerName} ${t('has-not-signed')}`\n+                        : `${t('you-not-signed')}`\n+                )\n+            } else if (meeting.currentState === STATUS_COMPLETE) {\n+                setSignatureTextReviewer(\n+                    reviewerLoggedIn\n+                        ? `${t('you-signed')} ${localDate(stateTransition.stateTransitionLogs[transitionHistoryLength - 2].changedOn)}`\n+                        : `${reviewer?.ownerName} ${t('has-signed')} ${localDate(stateTransition.stateTransitionLogs[transitionHistoryLength - 2].changedOn)}`\n+                )\n+                setSignatureTextReviewee(\n+                    reviewerLoggedIn\n+                        ? `${reviewee?.ownerName} ${t('has-signed')} ${localDate(stateTransition.stateTransitionLogs[transitionHistoryLength - 1].changedOn)}`\n+                        : `${t('you-signed')} ${localDate(stateTransition.stateTransitionLogs[transitionHistoryLength - 1].changedOn)}`\n+                )\n+            } else if (\n+                meeting.currentState === STATUS_READY ||\n+                STATUS_READY_PREPARED\n+            ) {\n+                setSignatureTextReviewer(\n+                    reviewerLoggedIn\n+                        ? `${t('you-not-signed')}`\n+                        : `${reviewer?.ownerName} ${t('has-not-signed')}`\n+                )\n+                setSignatureTextReviewee(\n+                    reviewerLoggedIn\n+                        ? `${reviewee.ownerName} ${t('has-not-signed')}`\n+                        : `${t('you-not-signed')}`\n+                )\n+            }\n+        })\n+    }, [meeting.currentState])\n+\n+    const localDate = (isoString: string) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/428#discussion_r1984597383",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/services/one-to-one/types.ts",
//         "line": null,
//         "comment": "remove",
//         "commitId": "fb753771e41f2f11b25ad58983acd728247e270f",
//         "codeSnippet": "@@ -1,3 +1,5 @@\n+import { fromState } from 'fp-ts/lib/StateT'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/428#discussion_r1984598644",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/App/App.tsx",
//         "line": null,
//         "comment": "it  is used ",
//         "commitId": "fb753771e41f2f11b25ad58983acd728247e270f",
//         "codeSnippet": "@@ -29,17 +33,20 @@ const App: FC<AppProps> = ({\n     publicUrl = import.meta.env.VITE_LOCALE_BASE_URL,\n     environment: { apiUrl }\n }) => {\n+    const assetsBasePath = getAssetsBasePath()",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/428#discussion_r1984602004",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/CommentTopic.tsx",
//         "line": null,
//         "comment": "kindly check whether we really need trim() or not :)",
//         "commitId": "bd40c7dfa221c93e5af812d352bdf6b5c379a1dd",
//         "codeSnippet": "@@ -140,28 +140,29 @@ const CommentTopic: FC<Props> = ({ userData, onComment, topicData, index }) => {\n                 return (\n                     (!isEmpty(topic.remark) || !meetingFinished()) && (\n                         <Box>\n-                            <FlexBox mt={2}>\n-                                <Avatar\n+                            <FlexBox mt={2} gap={1}>\n+                                <ColoredAvatar\n+                                    src={getUserAvatar(topic.remarkBy)}\n                                     sx={{\n-                                        height: 24,\n-                                        width: 24,\n-                                        color: 'red',\n-                                        backgroundColor: 'red'\n+                                        width: '24px',\n+                                        height: '24px',\n+                                        alignItems: 'center'\n                                     }}\n-                                    key={topicData.topicId}\n-                                    src={getUserAvatar(topic.remarkBy)}\n                                 >\n-                                    <ColoredAvatar>\n+                                    <Typography\n+                                        width='24px'\n+                                        height='24px'\n+                                        align='center'\n+                                    >\n                                         {getUserInitials(topic.remarkBy)}\n-                                    </ColoredAvatar>\n-                                </Avatar>\n+                                    </Typography>\n+                                </ColoredAvatar>\n                                 <Typography\n                                     variant='body2'\n                                     alignContent='center'\n-                                    ml={1}\n                                     color='grey.900'\n                                 >\n-                                    {getUserName(topic.remarkBy)}\n+                                    {getUserName(topic.remarkBy)?.trim()}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/432#discussion_r1986621224",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": null,
//         "comment": "no need to check of user avatar.\r\ncoloredAvatar component handles this. please check it ",
//         "commitId": "44512ec88d695ef529a7b4842336e132b1b02db7",
//         "codeSnippet": "@@ -38,7 +38,7 @@ const EmployeeAvatar: FC<UserDetail> = ({ userDetails, meeting }) => {\n                     return (\n                         <Box key={user.userId}>\n                             {!user.ownerAvatar ? (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/433#discussion_r1986621233",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/EmployeeAvatar.tsx",
//         "line": null,
//         "comment": "no need of colorAvatar in colorAvatar",
//         "commitId": "44512ec88d695ef529a7b4842336e132b1b02db7",
//         "codeSnippet": "@@ -48,9 +48,9 @@ const EmployeeAvatar: FC<UserDetail> = ({ userDetails, meeting }) => {\n                                     <ColoredAvatar key={user.userId}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/433#discussion_r1986621595",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/CommentTopic.tsx",
//         "line": null,
//         "comment": "same",
//         "commitId": "44512ec88d695ef529a7b4842336e132b1b02db7",
//         "codeSnippet": "@@ -154,7 +154,7 @@ const CommentTopic: FC<Props> = ({ userData, onComment, topicData, index }) => {\n                                     <ColoredAvatar>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/433#discussion_r1986624734",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/RadioTopic.tsx",
//         "line": null,
//         "comment": "same ",
//         "commitId": "44512ec88d695ef529a7b4842336e132b1b02db7",
//         "codeSnippet": "@@ -218,7 +217,7 @@ const RadioTopic: FC<Props> = ({\n                                 <ColoredAvatar>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/433#discussion_r1986624834",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/ToDoContainer.tsx",
//         "line": 81,
//         "comment": "user Initials to be shown when avatar not found",
//         "commitId": "44512ec88d695ef529a7b4842336e132b1b02db7",
//         "codeSnippet": "@@ -78,11 +73,10 @@ const ToDoContainer: FC<Todos> = ({\n                     sx={{ '.Mui-expanded': { margin: '0' } }}\n                 >\n                     <StyledSummaryContent>\n-                        <Avatar src={userInfo.ownerAvatar}>\n-                            <ColoredAvatar>\n-                                {userInfo.ownerNameInitials}\n-                            </ColoredAvatar>\n-                        </Avatar>\n+                        <ColoredAvatar",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/433#discussion_r1986630391",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/ToDoCreater.tsx",
//         "line": 107,
//         "comment": "user Initials to be shown when owner avatar not found",
//         "commitId": "44512ec88d695ef529a7b4842336e132b1b02db7",
//         "codeSnippet": "@@ -104,7 +104,7 @@ const ToDoCreater: FC<ToDoCreaterProps> = ({\n                                         value={`${user.userId}&${index}`}\n                                     >\n                                         <FlexBox>\n-                                            <Avatar\n+                                            <ColoredAvatar",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/433#discussion_r1986631211",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/TodoEditor.tsx",
//         "line": 113,
//         "comment": "user initials to be shown when user avatar not found",
//         "commitId": "44512ec88d695ef529a7b4842336e132b1b02db7",
//         "codeSnippet": "@@ -110,7 +110,7 @@ const TodoEditor: FC<TodoEditorProps> = ({\n                                     value={`${user.userId}&${index}`}\n                                 >\n                                     <FlexBox>\n-                                        <Avatar\n+                                        <ColoredAvatar",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/433#discussion_r1986632048",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Signatures/Signature.tsx",
//         "line": 48,
//         "comment": "The useEffect hook only depends on meeting.currentState while also using loggedInUser, reviewer, and id, which may lead to stale values. Consider adding loggedInUser, reviewer, and id to the dependency array.",
//         "commitId": "fb753771e41f2f11b25ad58983acd728247e270f",
//         "codeSnippet": "@@ -0,0 +1,217 @@\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import DateFormatter from '@/Components/DateFormatter'\n+import FlexBox from '@/Components/FlexBox'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import {\n+    AWAITING_SIGN_OFF,\n+    STATUS_COMPLETE,\n+    STATUS_READY,\n+    STATUS_READY_PREPARED\n+} from '@/features/employee-details/constants'\n+import {\n+    getMeetingSignatures,\n+    OneToOneMeetingResponse,\n+    StateTransition\n+} from '@/services/one-to-one'\n+import { UserInfo } from '@/services/topics'\n+import { ColoredAvatar } from '@catalystone/react-core-ui'\n+import { Box, Typography } from '@mui/material'\n+\n+import { getAssetsBasePath } from '../../../App/config/assetsPath'\n+import {\n+    ConfirmReadText,\n+    LineSeparator,\n+    SignatureStyled,\n+    SignatureText,\n+    TextWrapper\n+} from './styled'\n+\n+type props = {\n+    id: string\n+    meeting: OneToOneMeetingResponse\n+    reviewer: UserInfo\n+    reviewee: UserInfo\n+}\n+\n+const Signature: FC<props> = ({ id, meeting, reviewee, reviewer }) => {\n+    const { loggedInUser } = useGlobal()\n+    const assetsBasePath = getAssetsBasePath()\n+    const { t } = useTranslation('one-to-one')\n+\n+    const [signatureTextReviewer, setSignatureTextReviewer] =\n+        useState<React.ReactNode>(<Typography />)\n+    const [signatureTextReviewee, setSignatureTextReviewee] =\n+        useState<React.ReactNode>(<Typography />)\n+\n+    useEffect(() => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/428#discussion_r1986673313",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/App/App.tsx",
//         "line": null,
//         "comment": "The assetsBasePath is retrieved before initializeAssetsBasePath is called, potentially resulting in an empty value when used (e.g., for initializing SCEditor). Reorder the execution so that initializeAssetsBasePath is called before retrieving assetsBasePath.\n```suggestion\n\n```",
//         "commitId": "fb753771e41f2f11b25ad58983acd728247e270f",
//         "codeSnippet": "@@ -29,17 +33,20 @@ const App: FC<AppProps> = ({\n     publicUrl = import.meta.env.VITE_LOCALE_BASE_URL,\n     environment: { apiUrl }\n }) => {\n+    const assetsBasePath = getAssetsBasePath()\n     const { initialize: initializeSCEditor } = useSCEditor()",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/428#discussion_r1986673318",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/useMeeting.tsx",
//         "line": null,
//         "comment": "msg and isreopened can be moved outside",
//         "commitId": "be420745bf45c84884b11df965d2cb3ef9219af9",
//         "codeSnippet": "@@ -168,10 +170,17 @@ const useMeeting = () => {\n                             ? MeetingStateConstants.SIGN_OFF_AND_SHARE\n                             : AWAITING_SIGN_OFF,\n                         () => {\n-                            nextAvalableAction = MeetingStateConstants.REOPEN\n-                            msg = t('you-signed-off')\n-                            currentState = AWAITING_SIGN_OFF\n-                            isReopened = meeting.isReopened\n+                            if (loggedInUser === meeting.reviewerId) {\n+                                nextAvalableAction =\n+                                    MeetingStateConstants.REOPEN\n+                                msg = t('you-signed-off')",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/438#discussion_r1988489148",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/Topic-type/goal-topics/GoalSection.tsx",
//         "line": 108,
//         "comment": "The useMemo hook references meeting and loggedInUser values but has an empty dependency array. Consider adding meeting.isReopened, meeting.currentState, loggedInUser, and meeting.reviewerId to the dependency array to avoid stale values.",
//         "commitId": "95332826602620bff2a3a17660a1f1726e73a145",
//         "codeSnippet": "@@ -96,6 +105,15 @@ const GoalSection: FC<Props> = ({\n             .otherwise(() => null)\n     }\n \n+    const showEmptyStateDescription = useMemo(() => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/448#discussion_r2009546909",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": 76,
//         "comment": "The DateFormatter component returns a React element (Warning) when 'time' is not provided but returns a plain string when 'time' is available. Consider returning a consistently typed React element (e.g., wrapping the string in a Fragment) to ensure consistent rendering behavior.",
//         "commitId": "5985ff4b1636fa6bba801a45217b79ba8cd146a5",
//         "codeSnippet": "@@ -72,11 +74,14 @@ const DateFormatter: FC<DateFormatterProps> = ({\n         }\n     }\n \n-    return (\n-        <Warning warning={warning} {...typographyProps}>\n-            {convertDateInUserFormat()}\n-        </Warning>\n-    )\n+    if (!time.length) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/469#discussion_r2024180195",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": 83,
//         "comment": "should return same type??",
//         "commitId": "5985ff4b1636fa6bba801a45217b79ba8cd146a5",
//         "codeSnippet": "@@ -71,11 +73,14 @@ const DateFormatter: FC<DateFormatterProps> = ({\n         }\n     }\n \n-    return (\n-        <Warning warning={warning} {...typographyProps}>\n-            {convertDateInUserFormat()}\n-        </Warning>\n-    )\n+    if (!time.length) {\n+        return (\n+            <Warning warning={warning} {...typographyProps}>\n+                {convertDateInUserFormat()}\n+            </Warning>\n+        )\n+    }\n+    return `${convertDateInUserFormat()} ${time}`.trim()",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/469#discussion_r2024186930",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/Components/DateFormatter/DateFormatter.tsx",
//         "line": 83,
//         "comment": "no",
//         "commitId": "5985ff4b1636fa6bba801a45217b79ba8cd146a5",
//         "codeSnippet": "@@ -71,11 +73,14 @@ const DateFormatter: FC<DateFormatterProps> = ({\n         }\n     }\n \n-    return (\n-        <Warning warning={warning} {...typographyProps}>\n-            {convertDateInUserFormat()}\n-        </Warning>\n-    )\n+    if (!time.length) {\n+        return (\n+            <Warning warning={warning} {...typographyProps}>\n+                {convertDateInUserFormat()}\n+            </Warning>\n+        )\n+    }\n+    return `${convertDateInUserFormat()} ${time}`.trim()",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/469#discussion_r2024194573",
//         "author": "u-arora"
//     },
//     {
//         "file": "src/features/one-to-one/OneToOneLayout.tsx",
//         "line": null,
//         "comment": "The button with id 'status-review' has an empty label, which could lead to a confusing UI. Consider providing a meaningful label or documenting that the empty string is intentional.\n```suggestion\n                        label: g('status-review'),\n```",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -107,6 +108,7 @@ const OneToOneLayout: FC = () => {\n             if (srSupportEnabled) {\n                 setActionButtons((prev) => [\n                     {\n+                        id: 'status-review',\n                         label: '',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2026817207",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/one-to-one/OneToOneLayout.tsx",
//         "line": null,
//         "comment": "this is intended",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -107,6 +108,7 @@ const OneToOneLayout: FC = () => {\n             if (srSupportEnabled) {\n                 setActionButtons((prev) => [\n                     {\n+                        id: 'status-review',\n                         label: '',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2026828945",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 219,
//         "comment": "The dependency array in this effect omits 'srSupportEnabled', which is used inside the effect. Consider adding 'srSupportEnabled' to ensure the effect updates correctly when its value changes.\n```suggestion\n    }, [participantData, loggedInUserData, id, srSupportEnabled])\n```",
//         "commitId": "441f18296f50d68a6b65b7a6c404ebc85d8d0b45",
//         "codeSnippet": "@@ -170,55 +168,54 @@ const EmployeeDetails: FC = () => {\n \n     useEffect(() => {\n         if (!participantData) {\n-            setLayoutTitle('')\n+            setTitle('')\n             return\n         }\n         const loggedInUserName =\n             loggedInUserData?.fields[StandardField.NAME]?.data[0]\n \n         const participantName =\n             participantData?.fields[StandardField.NAME]?.data[0]\n-\n-        setLayoutTitle(`${participantName} and ${loggedInUserName}`)\n+        setTitle(`${participantName} and ${loggedInUserName}`)\n         setBreadcrumbs([\n-            { name: 'One to One', path: '/', type: 'internal' },\n+            { name: 'One to One', path: '/' },\n             {\n                 name: t(participantName ?? ''),\n-                path: `/employee/${id}`,\n-                type: 'internal'\n-            }\n-        ])\n-        setActionButtons([\n-            {\n-                id: 'new-meeting',\n-                label: g('new-meeting'),\n-                onClick: () => setOpen(true),\n-                variant: 'contained',\n-                disabled: !employeeOneToOnes.profileActive\n+                path: `/employee/${id}`\n             }\n         ])\n+\n         if (srSupportEnabled && id && subordinates.includes(id)) {\n-            setActionButtons((prev) => [\n+            setActions([\n                 {\n                     id: 'status-review',\n                     label: '',\n                     onClick: () => {},\n                     endIcon: <StatusReview fromDrillDown employee={id} />\n                 },\n-                ...prev\n+                {\n+                    id: 'new-meeting',\n+                    label: g('new-meeting'),\n+                    onClick: () => setOpen(true),\n+                    variant: 'contained',\n+                    disabled: !employeeOneToOnes.profileActive\n+                }\n+            ])\n+        } else {\n+            setActions([\n+                {\n+                    id: 'new-meeting',\n+                    label: g('new-meeting'),\n+                    onClick: () => setOpen(true),\n+                    variant: 'contained',\n+                    disabled: !employeeOneToOnes.profileActive\n+                }\n             ])\n         }\n         return () => {\n-            setBreadcrumbs([])\n+            setBreadcrumbs([]) // Reset breadcrumbs when component unmounts\n         }\n-    }, [\n-        participantData,\n-        loggedInUserData,\n-        setLayoutTitle,\n-        setBreadcrumbs,\n-        id,\n-        setActionButtons\n-    ])\n+    }, [participantData, loggedInUserData, id])\n ",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/471#discussion_r2028129817",
//         "author": "Copilot"
//     },
//     {
//         "file": "proxy.config.ts",
//         "line": null,
//         "comment": "keep this on local only",
//         "commitId": "441f18296f50d68a6b65b7a6c404ebc85d8d0b45",
//         "codeSnippet": "@@ -9,11 +9,11 @@ const proxy: Record<string, string | ProxyOptions> = {\n             return path\n         },\n         headers: {\n-            origin: 'https://onetooneroutinedev1.devtest.catalystone.dev'\n+            origin: 'https://onetooneroutinedev2.devtest.catalystone.dev'\n         }\n     },\n     '/mono': {\n-        target: 'https://onetooneroutinedev1.devtest.catalystone.dev',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/471#discussion_r2028130295",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": 135,
//         "comment": "Setting an empty label for the disabled action may confuse users; consider providing an informative label or removing the disabled action from the layout.\n```suggestion\n                    label: 'Create New Template (Unavailable)',\n```",
//         "commitId": "78a27f3ca818c4c810b94820160cd9ca0456db45",
//         "codeSnippet": "@@ -120,29 +114,60 @@ const AdministrationLandingPage: React.FC = () => {\n         setPermissionsResolved(true)\n     }, [searchParams, permissions, tabs])\n \n+    useEffect(() => {\n+        setLayout({\n+            type: 'tabs',\n+            active: selected,\n+            onChangeActive: onClickTab,\n+            items: Object.values(tabs)\n+        })\n+        if (\n+            isEqual(\n+                tabs[selected]?.permissionId,\n+                PermissionTab.TemplateOverview\n+            )\n+        ) {\n+            setActions([createNewTemplateButton])\n+        } else {\n+            setActions([\n+                {\n+                    id: 'create-new-template-btn',\n+                    label: '',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/474#discussion_r2032585804",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": 135,
//         "comment": "this is intended to fix the alignment of title.",
//         "commitId": "78a27f3ca818c4c810b94820160cd9ca0456db45",
//         "codeSnippet": "@@ -120,29 +114,60 @@ const AdministrationLandingPage: React.FC = () => {\n         setPermissionsResolved(true)\n     }, [searchParams, permissions, tabs])\n \n+    useEffect(() => {\n+        setLayout({\n+            type: 'tabs',\n+            active: selected,\n+            onChangeActive: onClickTab,\n+            items: Object.values(tabs)\n+        })\n+        if (\n+            isEqual(\n+                tabs[selected]?.permissionId,\n+                PermissionTab.TemplateOverview\n+            )\n+        ) {\n+            setActions([createNewTemplateButton])\n+        } else {\n+            setActions([\n+                {\n+                    id: 'create-new-template-btn',\n+                    label: '',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/474#discussion_r2032606484",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/TemplateDetails.tsx",
//         "line": 490,
//         "comment": "TemplateProvider should be removed everywhere in latest version",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -450,12 +470,26 @@ const TemplateDetails: FC = () => {\n                 dialogState={showVerifyDelete}\n                 onClose={() => setShowVerifyDelete(getClosedState())}\n             />\n-        </Layout>\n+        </>\n+    )\n+}\n+\n+const LayoutWrapper: FCC = ({ children }) => {\n+    const { state } = useTemplate()\n+    if (!isReady(state)) return null\n+    return (\n+        <Box width='100vw' display='flex' justifyContent='center'>\n+            <Box width='1200px'>\n+                <Layout title=''>{children}</Layout>\n+            </Box>\n+        </Box>\n     )\n }\n \n export default () => (\n     <TemplateProvider>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2033097812",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/template-details/TemplateDetails.tsx",
//         "line": 490,
//         "comment": "You should use <Layout ...props here and I guess you can also add some of your actions directly and update them later. If it makes sense, haven't read to closely on the logic ",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -450,12 +470,26 @@ const TemplateDetails: FC = () => {\n                 dialogState={showVerifyDelete}\n                 onClose={() => setShowVerifyDelete(getClosedState())}\n             />\n-        </Layout>\n+        </>\n+    )\n+}\n+\n+const LayoutWrapper: FCC = ({ children }) => {\n+    const { state } = useTemplate()\n+    if (!isReady(state)) return null\n+    return (\n+        <Box width='100vw' display='flex' justifyContent='center'>\n+            <Box width='1200px'>\n+                <Layout title=''>{children}</Layout>\n+            </Box>\n+        </Box>\n     )\n }\n \n export default () => (\n     <TemplateProvider>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2033099885",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "Use .finally for your setResolved and remove the throw ",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -120,29 +115,64 @@ const AdministrationLandingPage: React.FC = () => {\n         setPermissionsResolved(true)\n     }, [searchParams, permissions, tabs])\n \n+    useEffect(() => {\n+        setLayout({\n+            type: 'tabs',\n+            active: selected,\n+            onChangeActive: onClickTab,\n+            items: Object.values(tabs)\n+        })\n+        if (\n+            isEqual(\n+                tabs[selected]?.permissionId,\n+                PermissionTab.TemplateOverview\n+            )\n+        ) {\n+            setActions([createNewTemplateButton])\n+        } else {\n+            setActions([\n+                {\n+                    id: 'create-new-template-btn',\n+                    label: '',\n+                    disabled: true\n+                }\n+            ])\n+        }\n+        setTitle('One to One')\n+    }, [selected, permissionsResolved, permissions])\n     if (!permissionsResolved) return null\n+    return tabs[selected].Component\n+}\n+\n+const LayoutWrapper: React.FC = () => {\n+    const [resolved, setResolved] = useState(false)\n+    const [permissions, setPermissions] = useState<PermissionTab[]>([])\n+\n+    useEffect(() => {\n+        getPermissions()\n+            .then((permissions) => {\n+                setPermissions(permissions)\n+\n+                if (isEmpty(permissions)) {\n+                    throw new Error('No permissions available')\n+                }\n+\n+                setResolved(true)\n+            })\n+            .catch(() => setResolved(true))",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2033103926",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "What happens when window is < that 1200px? ",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -120,29 +115,64 @@ const AdministrationLandingPage: React.FC = () => {\n         setPermissionsResolved(true)\n     }, [searchParams, permissions, tabs])\n \n+    useEffect(() => {\n+        setLayout({\n+            type: 'tabs',\n+            active: selected,\n+            onChangeActive: onClickTab,\n+            items: Object.values(tabs)\n+        })\n+        if (\n+            isEqual(\n+                tabs[selected]?.permissionId,\n+                PermissionTab.TemplateOverview\n+            )\n+        ) {\n+            setActions([createNewTemplateButton])\n+        } else {\n+            setActions([\n+                {\n+                    id: 'create-new-template-btn',\n+                    label: '',\n+                    disabled: true\n+                }\n+            ])\n+        }\n+        setTitle('One to One')\n+    }, [selected, permissionsResolved, permissions])\n     if (!permissionsResolved) return null\n+    return tabs[selected].Component\n+}\n+\n+const LayoutWrapper: React.FC = () => {\n+    const [resolved, setResolved] = useState(false)\n+    const [permissions, setPermissions] = useState<PermissionTab[]>([])\n+\n+    useEffect(() => {\n+        getPermissions()\n+            .then((permissions) => {\n+                setPermissions(permissions)\n+\n+                if (isEmpty(permissions)) {\n+                    throw new Error('No permissions available')\n+                }\n+\n+                setResolved(true)\n+            })\n+            .catch(() => setResolved(true))\n+    }, [])\n+\n+    if (!resolved) return null\n \n     return (\n-        <Layout\n-            title='One to One'\n-            actions={\n-                isEqual(\n-                    tabs[selected]?.permissionId,\n-                    PermissionTab.TemplateOverview\n-                )\n-                    ? [createNewTemplateButton]\n-                    : []\n-            }\n-            layoutProps={{\n-                type: 'tabs',\n-                activeTab: selected,\n-                onClickTab,\n-                tabs: Object.values(tabs)\n-            }}\n-        >\n-            {tabs[selected].Component}\n-        </Layout>\n+        <Box width='100vw' display='flex' justifyContent='center'>\n+            <Box width='1200px'>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2033105655",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 215,
//         "comment": "You should not need this anymore in theory. You should wrap every page in a new Layout so the Context should be refreshed ",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -170,53 +168,54 @@ const EmployeeDetails: FC = () => {\n \n     useEffect(() => {\n         if (!participantData) {\n-            setLayoutTitle('')\n+            setTitle('')\n             return\n         }\n         const loggedInUserName =\n             loggedInUserData?.fields[StandardField.NAME]?.data[0]\n \n         const participantName =\n             participantData?.fields[StandardField.NAME]?.data[0]\n-\n-        setLayoutTitle(`${participantName} and ${loggedInUserName}`)\n+        setTitle(`${participantName} and ${loggedInUserName}`)\n         setBreadcrumbs([\n-            { name: 'One to One', path: '/', type: 'internal' },\n+            { name: 'One to One', path: '/' },\n             {\n                 name: t(participantName ?? ''),\n-                path: `/employee/${id}`,\n-                type: 'internal'\n-            }\n-        ])\n-        setActionButtons([\n-            {\n-                label: g('new-meeting'),\n-                onClick: () => setOpen(true),\n-                variant: 'contained',\n-                disabled: !employeeOneToOnes.profileActive\n+                path: `/employee/${id}`\n             }\n         ])\n+\n         if (srSupportEnabled && id && subordinates.includes(id)) {\n-            setActionButtons((prev) => [\n+            setActions([\n                 {\n+                    id: 'status-review',\n                     label: '',\n                     onClick: () => {},\n                     endIcon: <StatusReview fromDrillDown employee={id} />\n                 },\n-                ...prev\n+                {\n+                    id: 'new-meeting',\n+                    label: g('new-meeting'),\n+                    onClick: () => setOpen(true),\n+                    variant: 'contained',\n+                    disabled: !employeeOneToOnes.profileActive\n+                }\n+            ])\n+        } else {\n+            setActions([\n+                {\n+                    id: 'new-meeting',\n+                    label: g('new-meeting'),\n+                    onClick: () => setOpen(true),\n+                    variant: 'contained',\n+                    disabled: !employeeOneToOnes.profileActive\n+                }\n             ])\n         }\n         return () => {\n-            setBreadcrumbs([])\n+            setBreadcrumbs([]) // Reset breadcrumbs when component unmounts",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2033108890",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": null,
//         "comment": "I urge you to not mutate\r\n\r\nsectionSteps.map((item) => ({ ...item, state: item.order < stepIndex ? 'completed' : 'enabled' }))",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -236,137 +241,114 @@ const MeetingDetails: FC = () => {\n             }\n         })\n         setSectionSteps(sectionStepsTemp as SectionSteps[])\n-    }, [sections, userData])\n+    }, [sections])\n \n     const handleNavigate = () => {\n         setAfterCompletetionDialogOpen(false)\n         navigate('/')\n     }\n \n-    useMemo(() => {\n-        setTimeout(() => {\n-            // This is a hack to make sure the steps are updated after the state is updated\n-            setSectionSteps((prev) => {\n-                return prev.map((item) => {\n-                    if (item.order < step) {\n-                        item.state = 'completed'\n-                    } else {\n-                        item.state = 'enabled'\n-                    }\n-                    return item\n-                })\n-            })\n-        }, DEBOUNCE_DELAY)\n-    }, [step])\n+    // will trigger when switching bw tabs of layout\n+    const handleStepChange = (stepIndex: number) => {\n+        setStep(stepIndex)\n+        updateLayout({\n+            active: stepIndex,\n+            onChangeActive: handleStepChange,\n+            items: sectionSteps.map((item) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2033110834",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": 269,
//         "comment": "Maybe this wild string should be interpolated instead?",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -236,137 +241,114 @@ const MeetingDetails: FC = () => {\n             }\n         })\n         setSectionSteps(sectionStepsTemp as SectionSteps[])\n-    }, [sections, userData])\n+    }, [sections])\n \n     const handleNavigate = () => {\n         setAfterCompletetionDialogOpen(false)\n         navigate('/')\n     }\n \n-    useMemo(() => {\n-        setTimeout(() => {\n-            // This is a hack to make sure the steps are updated after the state is updated\n-            setSectionSteps((prev) => {\n-                return prev.map((item) => {\n-                    if (item.order < step) {\n-                        item.state = 'completed'\n-                    } else {\n-                        item.state = 'enabled'\n-                    }\n-                    return item\n-                })\n-            })\n-        }, DEBOUNCE_DELAY)\n-    }, [step])\n+    // will trigger when switching bw tabs of layout\n+    const handleStepChange = (stepIndex: number) => {\n+        setStep(stepIndex)\n+        updateLayout({\n+            active: stepIndex,\n+            onChangeActive: handleStepChange,\n+            items: sectionSteps.map((item) => {\n+                if (item.order < stepIndex) {\n+                    item.state = 'completed'\n+                } else {\n+                    item.state = 'enabled'\n+                }\n+                return item\n+            }),\n+            type: 'stepper'\n+        })\n+    }\n \n-    return (\n-        <Layout\n-            actions={\n-                [\n-                    availableActions?.includes(\n-                        MeetingStateConstants.REOPEN\n-                    ) && {\n-                        label: g('reopen-meeting'),\n-                        onClick: onReopen,\n-                        variant: 'outlined'\n-                    },\n-                    meeting.deletable && {\n-                        label: g('delete'),\n-                        onClick: onDelete,\n-                        variant: 'outlined',\n-                        color: 'error'\n-                    },\n-                    {\n-                        label: t('close'),\n-                        onClick: onClose,\n-                        variant: 'text'\n-                    }\n-                ].filter(Boolean) as ButtonProps[]\n-            }\n-            breadcrumbs={{\n-                crumbs: [\n-                    {\n-                        name: 'One to One',\n-                        path: '/',\n-                        type: 'internal'\n-                    },\n-                    {\n-                        name:\n-                            loggedInUser === reviewee?.userId\n-                                ? reviewer?.ownerName\n-                                : reviewee?.ownerName,\n-                        path: participantDrillDownPageRoute,\n-                        type: 'internal'\n-                    }\n-                ]\n-            }}\n-            title={\n-                userData[0]\n-                    ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`\n-                    : `${t('loading')}....`\n-            }\n-            subTitle={\n-                <EmployeeAvatar userDetails={userData} meeting={meeting} />\n+    // will prepare the layout\n+    useEffect(() => {\n+        setTitle(\n+            userData[0]\n+                ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2033113177",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": 270,
//         "comment": "loading could include ... in translation, no? :) ",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -236,137 +241,114 @@ const MeetingDetails: FC = () => {\n             }\n         })\n         setSectionSteps(sectionStepsTemp as SectionSteps[])\n-    }, [sections, userData])\n+    }, [sections])\n \n     const handleNavigate = () => {\n         setAfterCompletetionDialogOpen(false)\n         navigate('/')\n     }\n \n-    useMemo(() => {\n-        setTimeout(() => {\n-            // This is a hack to make sure the steps are updated after the state is updated\n-            setSectionSteps((prev) => {\n-                return prev.map((item) => {\n-                    if (item.order < step) {\n-                        item.state = 'completed'\n-                    } else {\n-                        item.state = 'enabled'\n-                    }\n-                    return item\n-                })\n-            })\n-        }, DEBOUNCE_DELAY)\n-    }, [step])\n+    // will trigger when switching bw tabs of layout\n+    const handleStepChange = (stepIndex: number) => {\n+        setStep(stepIndex)\n+        updateLayout({\n+            active: stepIndex,\n+            onChangeActive: handleStepChange,\n+            items: sectionSteps.map((item) => {\n+                if (item.order < stepIndex) {\n+                    item.state = 'completed'\n+                } else {\n+                    item.state = 'enabled'\n+                }\n+                return item\n+            }),\n+            type: 'stepper'\n+        })\n+    }\n \n-    return (\n-        <Layout\n-            actions={\n-                [\n-                    availableActions?.includes(\n-                        MeetingStateConstants.REOPEN\n-                    ) && {\n-                        label: g('reopen-meeting'),\n-                        onClick: onReopen,\n-                        variant: 'outlined'\n-                    },\n-                    meeting.deletable && {\n-                        label: g('delete'),\n-                        onClick: onDelete,\n-                        variant: 'outlined',\n-                        color: 'error'\n-                    },\n-                    {\n-                        label: t('close'),\n-                        onClick: onClose,\n-                        variant: 'text'\n-                    }\n-                ].filter(Boolean) as ButtonProps[]\n-            }\n-            breadcrumbs={{\n-                crumbs: [\n-                    {\n-                        name: 'One to One',\n-                        path: '/',\n-                        type: 'internal'\n-                    },\n-                    {\n-                        name:\n-                            loggedInUser === reviewee?.userId\n-                                ? reviewer?.ownerName\n-                                : reviewee?.ownerName,\n-                        path: participantDrillDownPageRoute,\n-                        type: 'internal'\n-                    }\n-                ]\n-            }}\n-            title={\n-                userData[0]\n-                    ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`\n-                    : `${t('loading')}....`\n-            }\n-            subTitle={\n-                <EmployeeAvatar userDetails={userData} meeting={meeting} />\n+    // will prepare the layout\n+    useEffect(() => {\n+        setTitle(\n+            userData[0]\n+                ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`\n+                : `${t('loading')}....`",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2033113592",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/MeetingNotesTopics.tsx",
//         "line": 235,
//         "comment": "Need key here ",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -151,100 +155,138 @@ const MeetingNotesTopics: FC<Props> = ({ description }) => {\n     }, [topics, meeting])\n \n     return (\n-        <Stack\n-            sx={{\n-                width: '100%'\n-            }}\n-        >\n-            {meeting.availableActions.includes(\n-                MeetingStateConstants.SUBMIT_TO_MANAGER\n-            ) && (\n-                <Alert sx={{ mt: '2rem' }} severity='info'>\n-                    {t('meeting-note')}\n-                </Alert>\n-            )}\n-\n-            {showNoteWhenNoTodo() && loggedInUser === meeting.revieweeId && (\n-                <Typography\n-                    mt='2rem'\n-                    mb='2rem'\n-                    variant='body1'\n-                    sx={{ color: 'grey' }}\n-                >\n-                    {t('what-we-talked-note')}\n-                </Typography>\n-            )}\n-\n-            {!meeting.availableActions.includes(MeetingStateConstants.REOPEN) &&\n-                !meeting.availableActions.includes(\n+        <>\n+            <Stack\n+                sx={{\n+                    width: '100%'\n+                }}\n+            >\n+                {meeting.availableActions.includes(\n                     MeetingStateConstants.SUBMIT_TO_MANAGER\n-                ) &&\n-                meeting.currentState !== AWAITING_SIGN_OFF &&\n-                !isEmpty(meeting.availableActions) && (\n-                    <Box mt='2rem'>\n-                        <RichTextEditor\n-                            disabled={false}\n-                            value={contentparser(description, languageId)}\n-                            onChange={handleMeetingNotesChange}\n-                            toolbarOptions={{\n-                                doclink: false,\n-                                source: false\n-                            }}\n-                        />\n-                    </Box>\n+                ) && (\n+                    <Alert sx={{ mt: '2rem' }} severity='info'>\n+                        {t('meeting-note')}\n+                    </Alert>\n                 )}\n \n-            {(meeting.availableActions.includes(MeetingStateConstants.REOPEN) ||\n-                meeting.currentState === AWAITING_SIGN_OFF ||\n-                isEmpty(meeting.availableActions)) &&\n-                !isEmpty(description) && (\n-                    <FlexBox mt='2rem'>\n-                        <RichTextEditor\n-                            value={contentparser(description, languageId)}\n-                            previewMode\n-                        />\n-                    </FlexBox>\n+                {showNoteWhenNoTodo() &&\n+                    loggedInUser === meeting.revieweeId && (\n+                        <Typography\n+                            mt='2rem'\n+                            mb='2rem'\n+                            variant='body1'\n+                            sx={{ color: 'grey' }}\n+                        >\n+                            {t('what-we-talked-note')}\n+                        </Typography>\n+                    )}\n+\n+                {!meeting.availableActions.includes(\n+                    MeetingStateConstants.REOPEN\n+                ) &&\n+                    !meeting.availableActions.includes(\n+                        MeetingStateConstants.SUBMIT_TO_MANAGER\n+                    ) &&\n+                    meeting.currentState !== AWAITING_SIGN_OFF &&\n+                    !isEmpty(meeting.availableActions) && (\n+                        <Box mt='2rem'>\n+                            <RichTextEditor\n+                                disabled={false}\n+                                value={contentparser(description, languageId)}\n+                                onChange={handleMeetingNotesChange}\n+                                toolbarOptions={{\n+                                    doclink: false,\n+                                    source: false\n+                                }}\n+                            />\n+                        </Box>\n+                    )}\n+\n+                {(meeting.availableActions.includes(\n+                    MeetingStateConstants.REOPEN\n+                ) ||\n+                    meeting.currentState === AWAITING_SIGN_OFF ||\n+                    isEmpty(meeting.availableActions)) &&\n+                    !isEmpty(description) && (\n+                        <FlexBox mt='2rem'>\n+                            <RichTextEditor\n+                                value={contentparser(description, languageId)}\n+                                previewMode\n+                            />\n+                        </FlexBox>\n+                    )}\n+\n+                {showTodoContainer() && (\n+                    <ToDoCreater\n+                        createdTodo={handleNewTodoCreation}\n+                        descriptionLabel={g('description')}\n+                        headerTxt='To-Dos'\n+                        btnText={t('add-todo')}\n+                        label={t('choose-owner')}\n+                        userData={userData}\n+                        btnLoadingState={buttonLoadingStatus}\n+                    />\n                 )}\n \n-            {showTodoContainer() && (\n-                <ToDoCreater\n-                    createdTodo={handleNewTodoCreation}\n-                    descriptionLabel={g('description')}\n-                    headerTxt='To-Dos'\n-                    btnText={t('add-todo')}\n-                    label={t('choose-owner')}\n-                    userData={userData}\n-                    btnLoadingState={buttonLoadingStatus}\n-                />\n-            )}\n-\n-            {userData.map((user: UserInfo) => {\n-                return (\n-                    (!isEmpty(meeting.availableActions) ||\n-                        meeting.currentState === STATUS_COMPLETE) && (\n-                        <ToDoContainer\n-                            userInfo={user}\n-                            createdTodoList={getOwnerSpecificTodos(\n-                                user.userId,\n-                                createdTodoList\n-                            )}\n-                            remainingTodoList={\n-                                isMeetingNotReopenedOrFinished()\n-                                    ? getOwnerSpecificTodos(\n-                                          user.userId,\n-                                          remainingTodoList\n-                                      )\n-                                    : []\n-                            }\n-                            archivedTodoList={getOwnerSpecificTodos(\n-                                user.userId,\n-                                archivedTodoList\n-                            )}\n-                        />\n+                {userData.map((user: UserInfo) => {\n+                    return (\n+                        (!isEmpty(meeting.availableActions) ||\n+                            meeting.currentState === STATUS_COMPLETE) && (\n+                            <ToDoContainer",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2033116172",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/features/template-details/TemplateDetails.tsx",
//         "line": 490,
//         "comment": "Template provider is our component and holds the context.\r\nI think we can not remove it.",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -450,12 +470,26 @@ const TemplateDetails: FC = () => {\n                 dialogState={showVerifyDelete}\n                 onClose={() => setShowVerifyDelete(getClosedState())}\n             />\n-        </Layout>\n+        </>\n+    )\n+}\n+\n+const LayoutWrapper: FCC = ({ children }) => {\n+    const { state } = useTemplate()\n+    if (!isReady(state)) return null\n+    return (\n+        <Box width='100vw' display='flex' justifyContent='center'>\n+            <Box width='1200px'>\n+                <Layout title=''>{children}</Layout>\n+            </Box>\n+        </Box>\n     )\n }\n \n export default () => (\n     <TemplateProvider>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2034407644",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "Yes I have changed this to add an error screen when API fails or permissions are empty as it will break the code.",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -120,29 +115,64 @@ const AdministrationLandingPage: React.FC = () => {\n         setPermissionsResolved(true)\n     }, [searchParams, permissions, tabs])\n \n+    useEffect(() => {\n+        setLayout({\n+            type: 'tabs',\n+            active: selected,\n+            onChangeActive: onClickTab,\n+            items: Object.values(tabs)\n+        })\n+        if (\n+            isEqual(\n+                tabs[selected]?.permissionId,\n+                PermissionTab.TemplateOverview\n+            )\n+        ) {\n+            setActions([createNewTemplateButton])\n+        } else {\n+            setActions([\n+                {\n+                    id: 'create-new-template-btn',\n+                    label: '',\n+                    disabled: true\n+                }\n+            ])\n+        }\n+        setTitle('One to One')\n+    }, [selected, permissionsResolved, permissions])\n     if (!permissionsResolved) return null\n+    return tabs[selected].Component\n+}\n+\n+const LayoutWrapper: React.FC = () => {\n+    const [resolved, setResolved] = useState(false)\n+    const [permissions, setPermissions] = useState<PermissionTab[]>([])\n+\n+    useEffect(() => {\n+        getPermissions()\n+            .then((permissions) => {\n+                setPermissions(permissions)\n+\n+                if (isEmpty(permissions)) {\n+                    throw new Error('No permissions available')\n+                }\n+\n+                setResolved(true)\n+            })\n+            .catch(() => setResolved(true))",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2035037767",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "Added maxWidth instead",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -120,29 +115,64 @@ const AdministrationLandingPage: React.FC = () => {\n         setPermissionsResolved(true)\n     }, [searchParams, permissions, tabs])\n \n+    useEffect(() => {\n+        setLayout({\n+            type: 'tabs',\n+            active: selected,\n+            onChangeActive: onClickTab,\n+            items: Object.values(tabs)\n+        })\n+        if (\n+            isEqual(\n+                tabs[selected]?.permissionId,\n+                PermissionTab.TemplateOverview\n+            )\n+        ) {\n+            setActions([createNewTemplateButton])\n+        } else {\n+            setActions([\n+                {\n+                    id: 'create-new-template-btn',\n+                    label: '',\n+                    disabled: true\n+                }\n+            ])\n+        }\n+        setTitle('One to One')\n+    }, [selected, permissionsResolved, permissions])\n     if (!permissionsResolved) return null\n+    return tabs[selected].Component\n+}\n+\n+const LayoutWrapper: React.FC = () => {\n+    const [resolved, setResolved] = useState(false)\n+    const [permissions, setPermissions] = useState<PermissionTab[]>([])\n+\n+    useEffect(() => {\n+        getPermissions()\n+            .then((permissions) => {\n+                setPermissions(permissions)\n+\n+                if (isEmpty(permissions)) {\n+                    throw new Error('No permissions available')\n+                }\n+\n+                setResolved(true)\n+            })\n+            .catch(() => setResolved(true))\n+    }, [])\n+\n+    if (!resolved) return null\n \n     return (\n-        <Layout\n-            title='One to One'\n-            actions={\n-                isEqual(\n-                    tabs[selected]?.permissionId,\n-                    PermissionTab.TemplateOverview\n-                )\n-                    ? [createNewTemplateButton]\n-                    : []\n-            }\n-            layoutProps={{\n-                type: 'tabs',\n-                activeTab: selected,\n-                onClickTab,\n-                tabs: Object.values(tabs)\n-            }}\n-        >\n-            {tabs[selected].Component}\n-        </Layout>\n+        <Box width='100vw' display='flex' justifyContent='center'>\n+            <Box width='1200px'>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2035205787",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": null,
//         "comment": "@deepakParmarOO7 Please look into this :)",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -236,137 +241,114 @@ const MeetingDetails: FC = () => {\n             }\n         })\n         setSectionSteps(sectionStepsTemp as SectionSteps[])\n-    }, [sections, userData])\n+    }, [sections])\n \n     const handleNavigate = () => {\n         setAfterCompletetionDialogOpen(false)\n         navigate('/')\n     }\n \n-    useMemo(() => {\n-        setTimeout(() => {\n-            // This is a hack to make sure the steps are updated after the state is updated\n-            setSectionSteps((prev) => {\n-                return prev.map((item) => {\n-                    if (item.order < step) {\n-                        item.state = 'completed'\n-                    } else {\n-                        item.state = 'enabled'\n-                    }\n-                    return item\n-                })\n-            })\n-        }, DEBOUNCE_DELAY)\n-    }, [step])\n+    // will trigger when switching bw tabs of layout\n+    const handleStepChange = (stepIndex: number) => {\n+        setStep(stepIndex)\n+        updateLayout({\n+            active: stepIndex,\n+            onChangeActive: handleStepChange,\n+            items: sectionSteps.map((item) => {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2035219400",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": 269,
//         "comment": "@deepakParmarOO7 Please look into this",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -236,137 +241,114 @@ const MeetingDetails: FC = () => {\n             }\n         })\n         setSectionSteps(sectionStepsTemp as SectionSteps[])\n-    }, [sections, userData])\n+    }, [sections])\n \n     const handleNavigate = () => {\n         setAfterCompletetionDialogOpen(false)\n         navigate('/')\n     }\n \n-    useMemo(() => {\n-        setTimeout(() => {\n-            // This is a hack to make sure the steps are updated after the state is updated\n-            setSectionSteps((prev) => {\n-                return prev.map((item) => {\n-                    if (item.order < step) {\n-                        item.state = 'completed'\n-                    } else {\n-                        item.state = 'enabled'\n-                    }\n-                    return item\n-                })\n-            })\n-        }, DEBOUNCE_DELAY)\n-    }, [step])\n+    // will trigger when switching bw tabs of layout\n+    const handleStepChange = (stepIndex: number) => {\n+        setStep(stepIndex)\n+        updateLayout({\n+            active: stepIndex,\n+            onChangeActive: handleStepChange,\n+            items: sectionSteps.map((item) => {\n+                if (item.order < stepIndex) {\n+                    item.state = 'completed'\n+                } else {\n+                    item.state = 'enabled'\n+                }\n+                return item\n+            }),\n+            type: 'stepper'\n+        })\n+    }\n \n-    return (\n-        <Layout\n-            actions={\n-                [\n-                    availableActions?.includes(\n-                        MeetingStateConstants.REOPEN\n-                    ) && {\n-                        label: g('reopen-meeting'),\n-                        onClick: onReopen,\n-                        variant: 'outlined'\n-                    },\n-                    meeting.deletable && {\n-                        label: g('delete'),\n-                        onClick: onDelete,\n-                        variant: 'outlined',\n-                        color: 'error'\n-                    },\n-                    {\n-                        label: t('close'),\n-                        onClick: onClose,\n-                        variant: 'text'\n-                    }\n-                ].filter(Boolean) as ButtonProps[]\n-            }\n-            breadcrumbs={{\n-                crumbs: [\n-                    {\n-                        name: 'One to One',\n-                        path: '/',\n-                        type: 'internal'\n-                    },\n-                    {\n-                        name:\n-                            loggedInUser === reviewee?.userId\n-                                ? reviewer?.ownerName\n-                                : reviewee?.ownerName,\n-                        path: participantDrillDownPageRoute,\n-                        type: 'internal'\n-                    }\n-                ]\n-            }}\n-            title={\n-                userData[0]\n-                    ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`\n-                    : `${t('loading')}....`\n-            }\n-            subTitle={\n-                <EmployeeAvatar userDetails={userData} meeting={meeting} />\n+    // will prepare the layout\n+    useEffect(() => {\n+        setTitle(\n+            userData[0]\n+                ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2035220600",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": 270,
//         "comment": "@deepakParmarOO7 Please look into this\r\n",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -236,137 +241,114 @@ const MeetingDetails: FC = () => {\n             }\n         })\n         setSectionSteps(sectionStepsTemp as SectionSteps[])\n-    }, [sections, userData])\n+    }, [sections])\n \n     const handleNavigate = () => {\n         setAfterCompletetionDialogOpen(false)\n         navigate('/')\n     }\n \n-    useMemo(() => {\n-        setTimeout(() => {\n-            // This is a hack to make sure the steps are updated after the state is updated\n-            setSectionSteps((prev) => {\n-                return prev.map((item) => {\n-                    if (item.order < step) {\n-                        item.state = 'completed'\n-                    } else {\n-                        item.state = 'enabled'\n-                    }\n-                    return item\n-                })\n-            })\n-        }, DEBOUNCE_DELAY)\n-    }, [step])\n+    // will trigger when switching bw tabs of layout\n+    const handleStepChange = (stepIndex: number) => {\n+        setStep(stepIndex)\n+        updateLayout({\n+            active: stepIndex,\n+            onChangeActive: handleStepChange,\n+            items: sectionSteps.map((item) => {\n+                if (item.order < stepIndex) {\n+                    item.state = 'completed'\n+                } else {\n+                    item.state = 'enabled'\n+                }\n+                return item\n+            }),\n+            type: 'stepper'\n+        })\n+    }\n \n-    return (\n-        <Layout\n-            actions={\n-                [\n-                    availableActions?.includes(\n-                        MeetingStateConstants.REOPEN\n-                    ) && {\n-                        label: g('reopen-meeting'),\n-                        onClick: onReopen,\n-                        variant: 'outlined'\n-                    },\n-                    meeting.deletable && {\n-                        label: g('delete'),\n-                        onClick: onDelete,\n-                        variant: 'outlined',\n-                        color: 'error'\n-                    },\n-                    {\n-                        label: t('close'),\n-                        onClick: onClose,\n-                        variant: 'text'\n-                    }\n-                ].filter(Boolean) as ButtonProps[]\n-            }\n-            breadcrumbs={{\n-                crumbs: [\n-                    {\n-                        name: 'One to One',\n-                        path: '/',\n-                        type: 'internal'\n-                    },\n-                    {\n-                        name:\n-                            loggedInUser === reviewee?.userId\n-                                ? reviewer?.ownerName\n-                                : reviewee?.ownerName,\n-                        path: participantDrillDownPageRoute,\n-                        type: 'internal'\n-                    }\n-                ]\n-            }}\n-            title={\n-                userData[0]\n-                    ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`\n-                    : `${t('loading')}....`\n-            }\n-            subTitle={\n-                <EmployeeAvatar userDetails={userData} meeting={meeting} />\n+    // will prepare the layout\n+    useEffect(() => {\n+        setTitle(\n+            userData[0]\n+                ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`\n+                : `${t('loading')}....`",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2035220958",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/PageTopics/MeetingNotesTopics.tsx",
//         "line": 235,
//         "comment": "@deepakParmarOO7 Please look into this",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -151,100 +155,138 @@ const MeetingNotesTopics: FC<Props> = ({ description }) => {\n     }, [topics, meeting])\n \n     return (\n-        <Stack\n-            sx={{\n-                width: '100%'\n-            }}\n-        >\n-            {meeting.availableActions.includes(\n-                MeetingStateConstants.SUBMIT_TO_MANAGER\n-            ) && (\n-                <Alert sx={{ mt: '2rem' }} severity='info'>\n-                    {t('meeting-note')}\n-                </Alert>\n-            )}\n-\n-            {showNoteWhenNoTodo() && loggedInUser === meeting.revieweeId && (\n-                <Typography\n-                    mt='2rem'\n-                    mb='2rem'\n-                    variant='body1'\n-                    sx={{ color: 'grey' }}\n-                >\n-                    {t('what-we-talked-note')}\n-                </Typography>\n-            )}\n-\n-            {!meeting.availableActions.includes(MeetingStateConstants.REOPEN) &&\n-                !meeting.availableActions.includes(\n+        <>\n+            <Stack\n+                sx={{\n+                    width: '100%'\n+                }}\n+            >\n+                {meeting.availableActions.includes(\n                     MeetingStateConstants.SUBMIT_TO_MANAGER\n-                ) &&\n-                meeting.currentState !== AWAITING_SIGN_OFF &&\n-                !isEmpty(meeting.availableActions) && (\n-                    <Box mt='2rem'>\n-                        <RichTextEditor\n-                            disabled={false}\n-                            value={contentparser(description, languageId)}\n-                            onChange={handleMeetingNotesChange}\n-                            toolbarOptions={{\n-                                doclink: false,\n-                                source: false\n-                            }}\n-                        />\n-                    </Box>\n+                ) && (\n+                    <Alert sx={{ mt: '2rem' }} severity='info'>\n+                        {t('meeting-note')}\n+                    </Alert>\n                 )}\n \n-            {(meeting.availableActions.includes(MeetingStateConstants.REOPEN) ||\n-                meeting.currentState === AWAITING_SIGN_OFF ||\n-                isEmpty(meeting.availableActions)) &&\n-                !isEmpty(description) && (\n-                    <FlexBox mt='2rem'>\n-                        <RichTextEditor\n-                            value={contentparser(description, languageId)}\n-                            previewMode\n-                        />\n-                    </FlexBox>\n+                {showNoteWhenNoTodo() &&\n+                    loggedInUser === meeting.revieweeId && (\n+                        <Typography\n+                            mt='2rem'\n+                            mb='2rem'\n+                            variant='body1'\n+                            sx={{ color: 'grey' }}\n+                        >\n+                            {t('what-we-talked-note')}\n+                        </Typography>\n+                    )}\n+\n+                {!meeting.availableActions.includes(\n+                    MeetingStateConstants.REOPEN\n+                ) &&\n+                    !meeting.availableActions.includes(\n+                        MeetingStateConstants.SUBMIT_TO_MANAGER\n+                    ) &&\n+                    meeting.currentState !== AWAITING_SIGN_OFF &&\n+                    !isEmpty(meeting.availableActions) && (\n+                        <Box mt='2rem'>\n+                            <RichTextEditor\n+                                disabled={false}\n+                                value={contentparser(description, languageId)}\n+                                onChange={handleMeetingNotesChange}\n+                                toolbarOptions={{\n+                                    doclink: false,\n+                                    source: false\n+                                }}\n+                            />\n+                        </Box>\n+                    )}\n+\n+                {(meeting.availableActions.includes(\n+                    MeetingStateConstants.REOPEN\n+                ) ||\n+                    meeting.currentState === AWAITING_SIGN_OFF ||\n+                    isEmpty(meeting.availableActions)) &&\n+                    !isEmpty(description) && (\n+                        <FlexBox mt='2rem'>\n+                            <RichTextEditor\n+                                value={contentparser(description, languageId)}\n+                                previewMode\n+                            />\n+                        </FlexBox>\n+                    )}\n+\n+                {showTodoContainer() && (\n+                    <ToDoCreater\n+                        createdTodo={handleNewTodoCreation}\n+                        descriptionLabel={g('description')}\n+                        headerTxt='To-Dos'\n+                        btnText={t('add-todo')}\n+                        label={t('choose-owner')}\n+                        userData={userData}\n+                        btnLoadingState={buttonLoadingStatus}\n+                    />\n                 )}\n \n-            {showTodoContainer() && (\n-                <ToDoCreater\n-                    createdTodo={handleNewTodoCreation}\n-                    descriptionLabel={g('description')}\n-                    headerTxt='To-Dos'\n-                    btnText={t('add-todo')}\n-                    label={t('choose-owner')}\n-                    userData={userData}\n-                    btnLoadingState={buttonLoadingStatus}\n-                />\n-            )}\n-\n-            {userData.map((user: UserInfo) => {\n-                return (\n-                    (!isEmpty(meeting.availableActions) ||\n-                        meeting.currentState === STATUS_COMPLETE) && (\n-                        <ToDoContainer\n-                            userInfo={user}\n-                            createdTodoList={getOwnerSpecificTodos(\n-                                user.userId,\n-                                createdTodoList\n-                            )}\n-                            remainingTodoList={\n-                                isMeetingNotReopenedOrFinished()\n-                                    ? getOwnerSpecificTodos(\n-                                          user.userId,\n-                                          remainingTodoList\n-                                      )\n-                                    : []\n-                            }\n-                            archivedTodoList={getOwnerSpecificTodos(\n-                                user.userId,\n-                                archivedTodoList\n-                            )}\n-                        />\n+                {userData.map((user: UserInfo) => {\n+                    return (\n+                        (!isEmpty(meeting.availableActions) ||\n+                            meeting.currentState === STATUS_COMPLETE) && (\n+                            <ToDoContainer",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2035221378",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": 215,
//         "comment": "So I tried removing this but this causes an issue when i am routing to overview from employee drill down, as breadcrumb are still present even though they should not be, the structure of this component such that there is an Layout wrapper and inside it we are using <outlet/> to route based on tabs and routing.",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -170,53 +168,54 @@ const EmployeeDetails: FC = () => {\n \n     useEffect(() => {\n         if (!participantData) {\n-            setLayoutTitle('')\n+            setTitle('')\n             return\n         }\n         const loggedInUserName =\n             loggedInUserData?.fields[StandardField.NAME]?.data[0]\n \n         const participantName =\n             participantData?.fields[StandardField.NAME]?.data[0]\n-\n-        setLayoutTitle(`${participantName} and ${loggedInUserName}`)\n+        setTitle(`${participantName} and ${loggedInUserName}`)\n         setBreadcrumbs([\n-            { name: 'One to One', path: '/', type: 'internal' },\n+            { name: 'One to One', path: '/' },\n             {\n                 name: t(participantName ?? ''),\n-                path: `/employee/${id}`,\n-                type: 'internal'\n-            }\n-        ])\n-        setActionButtons([\n-            {\n-                label: g('new-meeting'),\n-                onClick: () => setOpen(true),\n-                variant: 'contained',\n-                disabled: !employeeOneToOnes.profileActive\n+                path: `/employee/${id}`\n             }\n         ])\n+\n         if (srSupportEnabled && id && subordinates.includes(id)) {\n-            setActionButtons((prev) => [\n+            setActions([\n                 {\n+                    id: 'status-review',\n                     label: '',\n                     onClick: () => {},\n                     endIcon: <StatusReview fromDrillDown employee={id} />\n                 },\n-                ...prev\n+                {\n+                    id: 'new-meeting',\n+                    label: g('new-meeting'),\n+                    onClick: () => setOpen(true),\n+                    variant: 'contained',\n+                    disabled: !employeeOneToOnes.profileActive\n+                }\n+            ])\n+        } else {\n+            setActions([\n+                {\n+                    id: 'new-meeting',\n+                    label: g('new-meeting'),\n+                    onClick: () => setOpen(true),\n+                    variant: 'contained',\n+                    disabled: !employeeOneToOnes.profileActive\n+                }\n             ])\n         }\n         return () => {\n-            setBreadcrumbs([])\n+            setBreadcrumbs([]) // Reset breadcrumbs when component unmounts",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2036521378",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "The action button for 'status-review' has an empty label which may affect accessibility and user clarity. Consider providing a descriptive label for the status review button.\n```suggestion\n                    label: t('status-review'),\n```",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -170,53 +168,54 @@ const EmployeeDetails: FC = () => {\n \n     useEffect(() => {\n         if (!participantData) {\n-            setLayoutTitle('')\n+            setTitle('')\n             return\n         }\n         const loggedInUserName =\n             loggedInUserData?.fields[StandardField.NAME]?.data[0]\n \n         const participantName =\n             participantData?.fields[StandardField.NAME]?.data[0]\n-\n-        setLayoutTitle(`${participantName} and ${loggedInUserName}`)\n+        setTitle(`${participantName} and ${loggedInUserName}`)\n         setBreadcrumbs([\n-            { name: 'One to One', path: '/', type: 'internal' },\n+            { name: 'One to One', path: '/' },\n             {\n                 name: t(participantName ?? ''),\n-                path: `/employee/${id}`,\n-                type: 'internal'\n-            }\n-        ])\n-        setActionButtons([\n-            {\n-                label: g('new-meeting'),\n-                onClick: () => setOpen(true),\n-                variant: 'contained',\n-                disabled: !employeeOneToOnes.profileActive\n+                path: `/employee/${id}`\n             }\n         ])\n+\n         if (srSupportEnabled && id && subordinates.includes(id)) {\n-            setActionButtons((prev) => [\n+            setActions([\n                 {\n+                    id: 'status-review',\n                     label: '',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041486268",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "this is intended",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -170,53 +168,54 @@ const EmployeeDetails: FC = () => {\n \n     useEffect(() => {\n         if (!participantData) {\n-            setLayoutTitle('')\n+            setTitle('')\n             return\n         }\n         const loggedInUserName =\n             loggedInUserData?.fields[StandardField.NAME]?.data[0]\n \n         const participantName =\n             participantData?.fields[StandardField.NAME]?.data[0]\n-\n-        setLayoutTitle(`${participantName} and ${loggedInUserName}`)\n+        setTitle(`${participantName} and ${loggedInUserName}`)\n         setBreadcrumbs([\n-            { name: 'One to One', path: '/', type: 'internal' },\n+            { name: 'One to One', path: '/' },\n             {\n                 name: t(participantName ?? ''),\n-                path: `/employee/${id}`,\n-                type: 'internal'\n-            }\n-        ])\n-        setActionButtons([\n-            {\n-                label: g('new-meeting'),\n-                onClick: () => setOpen(true),\n-                variant: 'contained',\n-                disabled: !employeeOneToOnes.profileActive\n+                path: `/employee/${id}`\n             }\n         ])\n+\n         if (srSupportEnabled && id && subordinates.includes(id)) {\n-            setActionButtons((prev) => [\n+            setActions([\n                 {\n+                    id: 'status-review',\n                     label: '',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041490606",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "package.json",
//         "line": null,
//         "comment": "I cannot find  @catalystone/utils in the dependency, kindly check if its needed",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -18,85 +18,88 @@\n         \"check\": \"concurrently \\\"pnpm:prettier\\\" \\\"pnpm:lint\\\"\",\n         \"commit\": \"git-cz\",\n         \"devtools\": \"tsc && cross-env SPA=true vite build && vite preview\",\n-        \"ct\": \"concurrently \\\"pnpm:prettier:fix\\\" \\\"pnpm:lint:fix\\\" && git add . && pnpm run commit\"\n+        \"ct\": \"concurrently \\\"pnpm:prettier:fix\\\" \\\"pnpm:lint:fix\\\" && git add . && pnpm run commit\",\n+        \"update-catalystone\": \"pnpm update @catalystone/react-core @catalystone/react-core-ui @catalystone/utils\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041536445",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/Components/AlertDialog/AlertDialog.tsx",
//         "line": 63,
//         "comment": "Aren't there any constants for variant and font size?",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -60,7 +60,9 @@ const AlertDialog: FC<Props> = ({\n             <DialogContent sx={{ minWidth: '350px', padding: '16px 24px' }}>\n                 <DialogContentText id='alert-dialog-description'>\n                     {!showCustomInfo && (\n-                        <Typography fontSize={16}>{message}</Typography>\n+                        <Typography variant='body1' fontSize={16}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041540044",
//         "author": "aman1820"
//     },
//     {
//         "file": "package.json",
//         "line": null,
//         "comment": "will remove",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -18,85 +18,88 @@\n         \"check\": \"concurrently \\\"pnpm:prettier\\\" \\\"pnpm:lint\\\"\",\n         \"commit\": \"git-cz\",\n         \"devtools\": \"tsc && cross-env SPA=true vite build && vite preview\",\n-        \"ct\": \"concurrently \\\"pnpm:prettier:fix\\\" \\\"pnpm:lint:fix\\\" && git add . && pnpm run commit\"\n+        \"ct\": \"concurrently \\\"pnpm:prettier:fix\\\" \\\"pnpm:lint:fix\\\" && git add . && pnpm run commit\",\n+        \"update-catalystone\": \"pnpm update @catalystone/react-core @catalystone/react-core-ui @catalystone/utils\"",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041542055",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/Components/AlertDialog/AlertDialog.tsx",
//         "line": 63,
//         "comment": "no, mui provide these variants to be entered as strings only.\r\nAbout fontsize it is like CSS so I think there is not need of this and to complicate things more",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -60,7 +60,9 @@ const AlertDialog: FC<Props> = ({\n             <DialogContent sx={{ minWidth: '350px', padding: '16px 24px' }}>\n                 <DialogContentText id='alert-dialog-description'>\n                     {!showCustomInfo && (\n-                        <Typography fontSize={16}>{message}</Typography>\n+                        <Typography variant='body1' fontSize={16}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041546971",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": 120,
//         "comment": "Checks in Line no. 146 and 121 look identical check if its intended.",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -120,29 +117,81 @@ const AdministrationLandingPage: React.FC = () => {\n         setPermissionsResolved(true)\n     }, [searchParams, permissions, tabs])\n \n+    useEffect(() => {\n+        if (!permissionsResolved) return",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041553833",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "Do we need to set permissions in Line no 159 before checking if its empty or should it be the other way around?",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -120,29 +117,81 @@ const AdministrationLandingPage: React.FC = () => {\n         setPermissionsResolved(true)\n     }, [searchParams, permissions, tabs])\n \n+    useEffect(() => {\n+        if (!permissionsResolved) return\n+        setLayout({\n+            type: 'tabs',\n+            active: selected,\n+            onChangeActive: onClickTab,\n+            items: Object.values(tabs)\n+        })\n+        if (\n+            isEqual(\n+                tabs[selected]?.permissionId,\n+                PermissionTab.TemplateOverview\n+            )\n+        ) {\n+            setActions([createNewTemplateButton])\n+        } else {\n+            setActions([\n+                {\n+                    id: 'create-new-template-btn',\n+                    label: '',\n+                    disabled: true\n+                }\n+            ])\n+        }\n+        setTitle('One to One')\n+    }, [selected, permissionsResolved, permissions])\n     if (!permissionsResolved) return null\n+    return tabs[selected].Component\n+}\n \n+const LayoutWrapper: React.FC = () => {\n+    const [resolved, setResolved] = useState(false)\n+    const [permissions, setPermissions] = useState<PermissionTab[]>([])\n+    const [error, setError] = useState(false)\n+    const { t } = useTranslation('template-overview')\n+\n+    const fetchPermissions = () => {\n+        getPermissions()\n+            .then((permissions) => {\n+                setPermissions(permissions)\n+\n+                if (isEmpty(permissions)) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041559186",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "label empty?",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -170,53 +168,54 @@ const EmployeeDetails: FC = () => {\n \n     useEffect(() => {\n         if (!participantData) {\n-            setLayoutTitle('')\n+            setTitle('')\n             return\n         }\n         const loggedInUserName =\n             loggedInUserData?.fields[StandardField.NAME]?.data[0]\n \n         const participantName =\n             participantData?.fields[StandardField.NAME]?.data[0]\n-\n-        setLayoutTitle(`${participantName} and ${loggedInUserName}`)\n+        setTitle(`${participantName} and ${loggedInUserName}`)\n         setBreadcrumbs([\n-            { name: 'One to One', path: '/', type: 'internal' },\n+            { name: 'One to One', path: '/' },\n             {\n                 name: t(participantName ?? ''),\n-                path: `/employee/${id}`,\n-                type: 'internal'\n-            }\n-        ])\n-        setActionButtons([\n-            {\n-                label: g('new-meeting'),\n-                onClick: () => setOpen(true),\n-                variant: 'contained',\n-                disabled: !employeeOneToOnes.profileActive\n+                path: `/employee/${id}`\n             }\n         ])\n+\n         if (srSupportEnabled && id && subordinates.includes(id)) {\n-            setActionButtons((prev) => [\n+            setActions([\n                 {\n+                    id: 'status-review',\n                     label: '',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041566242",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": 283,
//         "comment": "Instead of repeating the same check can we extract a method or const for it?",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -236,137 +241,110 @@ const MeetingDetails: FC = () => {\n             }\n         })\n         setSectionSteps(sectionStepsTemp as SectionSteps[])\n-    }, [sections, userData])\n+    }, [sections])\n \n     const handleNavigate = () => {\n         setAfterCompletetionDialogOpen(false)\n         navigate('/')\n     }\n \n-    useMemo(() => {\n-        setTimeout(() => {\n-            // This is a hack to make sure the steps are updated after the state is updated\n-            setSectionSteps((prev) => {\n-                return prev.map((item) => {\n-                    if (item.order < step) {\n-                        item.state = 'completed'\n-                    } else {\n-                        item.state = 'enabled'\n-                    }\n-                    return item\n-                })\n-            })\n-        }, DEBOUNCE_DELAY)\n-    }, [step])\n+    // will trigger when switching bw tabs of layout\n+    const handleStepChange = (stepIndex: number) => {\n+        setStep(stepIndex)\n+        updateLayout({\n+            active: stepIndex,\n+            onChangeActive: handleStepChange,\n+            items: sectionSteps.map((item) => ({\n+                ...item,\n+                state: item.order < stepIndex ? 'completed' : 'enabled'\n+            })),\n+            type: 'stepper'\n+        })\n+    }\n \n-    return (\n-        <Layout\n-            actions={\n-                [\n-                    availableActions?.includes(\n-                        MeetingStateConstants.REOPEN\n-                    ) && {\n-                        label: g('reopen-meeting'),\n-                        onClick: onReopen,\n-                        variant: 'outlined'\n-                    },\n-                    meeting.deletable && {\n-                        label: g('delete'),\n-                        onClick: onDelete,\n-                        variant: 'outlined',\n-                        color: 'error'\n-                    },\n-                    {\n-                        label: t('close'),\n-                        onClick: onClose,\n-                        variant: 'text'\n-                    }\n-                ].filter(Boolean) as ButtonProps[]\n-            }\n-            breadcrumbs={{\n-                crumbs: [\n-                    {\n-                        name: 'One to One',\n-                        path: '/',\n-                        type: 'internal'\n-                    },\n-                    {\n-                        name:\n-                            loggedInUser === reviewee?.userId\n-                                ? reviewer?.ownerName\n-                                : reviewee?.ownerName,\n-                        path: participantDrillDownPageRoute,\n-                        type: 'internal'\n-                    }\n-                ]\n-            }}\n-            title={\n-                userData[0]\n-                    ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`\n-                    : `${t('loading')}....`\n-            }\n-            subTitle={\n-                <EmployeeAvatar userDetails={userData} meeting={meeting} />\n+    // will prepare the layout\n+    useEffect(() => {\n+        setTitle(\n+            userData[0]\n+                ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`\n+                : `${t('loading')}....`\n+        )\n+\n+        setBreadcrumbs([\n+            {\n+                name: 'One to One',\n+                path: '/'\n+            },\n+            {\n+                name:\n+                    loggedInUser === reviewee?.userId\n+                        ? reviewer?.ownerName\n+                        : reviewee?.ownerName,\n+                path: `/employee/${loggedInUser === reviewee?.userId ? reviewer?.userId : reviewee?.userId}`",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041572640",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": 120,
//         "comment": "yes this intended to handle the fluctuation in layout component. else there is a slight fluctuation as layout title is set when the component is  mounted for the first time and other data is not set",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -120,29 +117,81 @@ const AdministrationLandingPage: React.FC = () => {\n         setPermissionsResolved(true)\n     }, [searchParams, permissions, tabs])\n \n+    useEffect(() => {\n+        if (!permissionsResolved) return",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041572923",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": null,
//         "comment": "when we are doing setPermissions we are setting the state and when we are checking isEmpty(permissions) we are checking the permission fetched from the api. will change the name to resolve this confusion ",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -120,29 +117,81 @@ const AdministrationLandingPage: React.FC = () => {\n         setPermissionsResolved(true)\n     }, [searchParams, permissions, tabs])\n \n+    useEffect(() => {\n+        if (!permissionsResolved) return\n+        setLayout({\n+            type: 'tabs',\n+            active: selected,\n+            onChangeActive: onClickTab,\n+            items: Object.values(tabs)\n+        })\n+        if (\n+            isEqual(\n+                tabs[selected]?.permissionId,\n+                PermissionTab.TemplateOverview\n+            )\n+        ) {\n+            setActions([createNewTemplateButton])\n+        } else {\n+            setActions([\n+                {\n+                    id: 'create-new-template-btn',\n+                    label: '',\n+                    disabled: true\n+                }\n+            ])\n+        }\n+        setTitle('One to One')\n+    }, [selected, permissionsResolved, permissions])\n     if (!permissionsResolved) return null\n+    return tabs[selected].Component\n+}\n \n+const LayoutWrapper: React.FC = () => {\n+    const [resolved, setResolved] = useState(false)\n+    const [permissions, setPermissions] = useState<PermissionTab[]>([])\n+    const [error, setError] = useState(false)\n+    const { t } = useTranslation('template-overview')\n+\n+    const fetchPermissions = () => {\n+        getPermissions()\n+            .then((permissions) => {\n+                setPermissions(permissions)\n+\n+                if (isEmpty(permissions)) {",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041575952",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": 283,
//         "comment": "@deepakParmarOO7 Please look into this",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -236,137 +241,110 @@ const MeetingDetails: FC = () => {\n             }\n         })\n         setSectionSteps(sectionStepsTemp as SectionSteps[])\n-    }, [sections, userData])\n+    }, [sections])\n \n     const handleNavigate = () => {\n         setAfterCompletetionDialogOpen(false)\n         navigate('/')\n     }\n \n-    useMemo(() => {\n-        setTimeout(() => {\n-            // This is a hack to make sure the steps are updated after the state is updated\n-            setSectionSteps((prev) => {\n-                return prev.map((item) => {\n-                    if (item.order < step) {\n-                        item.state = 'completed'\n-                    } else {\n-                        item.state = 'enabled'\n-                    }\n-                    return item\n-                })\n-            })\n-        }, DEBOUNCE_DELAY)\n-    }, [step])\n+    // will trigger when switching bw tabs of layout\n+    const handleStepChange = (stepIndex: number) => {\n+        setStep(stepIndex)\n+        updateLayout({\n+            active: stepIndex,\n+            onChangeActive: handleStepChange,\n+            items: sectionSteps.map((item) => ({\n+                ...item,\n+                state: item.order < stepIndex ? 'completed' : 'enabled'\n+            })),\n+            type: 'stepper'\n+        })\n+    }\n \n-    return (\n-        <Layout\n-            actions={\n-                [\n-                    availableActions?.includes(\n-                        MeetingStateConstants.REOPEN\n-                    ) && {\n-                        label: g('reopen-meeting'),\n-                        onClick: onReopen,\n-                        variant: 'outlined'\n-                    },\n-                    meeting.deletable && {\n-                        label: g('delete'),\n-                        onClick: onDelete,\n-                        variant: 'outlined',\n-                        color: 'error'\n-                    },\n-                    {\n-                        label: t('close'),\n-                        onClick: onClose,\n-                        variant: 'text'\n-                    }\n-                ].filter(Boolean) as ButtonProps[]\n-            }\n-            breadcrumbs={{\n-                crumbs: [\n-                    {\n-                        name: 'One to One',\n-                        path: '/',\n-                        type: 'internal'\n-                    },\n-                    {\n-                        name:\n-                            loggedInUser === reviewee?.userId\n-                                ? reviewer?.ownerName\n-                                : reviewee?.ownerName,\n-                        path: participantDrillDownPageRoute,\n-                        type: 'internal'\n-                    }\n-                ]\n-            }}\n-            title={\n-                userData[0]\n-                    ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`\n-                    : `${t('loading')}....`\n-            }\n-            subTitle={\n-                <EmployeeAvatar userDetails={userData} meeting={meeting} />\n+    // will prepare the layout\n+    useEffect(() => {\n+        setTitle(\n+            userData[0]\n+                ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`\n+                : `${t('loading')}....`\n+        )\n+\n+        setBreadcrumbs([\n+            {\n+                name: 'One to One',\n+                path: '/'\n+            },\n+            {\n+                name:\n+                    loggedInUser === reviewee?.userId\n+                        ? reviewer?.ownerName\n+                        : reviewee?.ownerName,\n+                path: `/employee/${loggedInUser === reviewee?.userId ? reviewer?.userId : reviewee?.userId}`",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041584025",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/MeetingDetails.tsx",
//         "line": 283,
//         "comment": "looks good kindly recheck :P",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -236,137 +241,110 @@ const MeetingDetails: FC = () => {\n             }\n         })\n         setSectionSteps(sectionStepsTemp as SectionSteps[])\n-    }, [sections, userData])\n+    }, [sections])\n \n     const handleNavigate = () => {\n         setAfterCompletetionDialogOpen(false)\n         navigate('/')\n     }\n \n-    useMemo(() => {\n-        setTimeout(() => {\n-            // This is a hack to make sure the steps are updated after the state is updated\n-            setSectionSteps((prev) => {\n-                return prev.map((item) => {\n-                    if (item.order < step) {\n-                        item.state = 'completed'\n-                    } else {\n-                        item.state = 'enabled'\n-                    }\n-                    return item\n-                })\n-            })\n-        }, DEBOUNCE_DELAY)\n-    }, [step])\n+    // will trigger when switching bw tabs of layout\n+    const handleStepChange = (stepIndex: number) => {\n+        setStep(stepIndex)\n+        updateLayout({\n+            active: stepIndex,\n+            onChangeActive: handleStepChange,\n+            items: sectionSteps.map((item) => ({\n+                ...item,\n+                state: item.order < stepIndex ? 'completed' : 'enabled'\n+            })),\n+            type: 'stepper'\n+        })\n+    }\n \n-    return (\n-        <Layout\n-            actions={\n-                [\n-                    availableActions?.includes(\n-                        MeetingStateConstants.REOPEN\n-                    ) && {\n-                        label: g('reopen-meeting'),\n-                        onClick: onReopen,\n-                        variant: 'outlined'\n-                    },\n-                    meeting.deletable && {\n-                        label: g('delete'),\n-                        onClick: onDelete,\n-                        variant: 'outlined',\n-                        color: 'error'\n-                    },\n-                    {\n-                        label: t('close'),\n-                        onClick: onClose,\n-                        variant: 'text'\n-                    }\n-                ].filter(Boolean) as ButtonProps[]\n-            }\n-            breadcrumbs={{\n-                crumbs: [\n-                    {\n-                        name: 'One to One',\n-                        path: '/',\n-                        type: 'internal'\n-                    },\n-                    {\n-                        name:\n-                            loggedInUser === reviewee?.userId\n-                                ? reviewer?.ownerName\n-                                : reviewee?.ownerName,\n-                        path: participantDrillDownPageRoute,\n-                        type: 'internal'\n-                    }\n-                ]\n-            }}\n-            title={\n-                userData[0]\n-                    ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`\n-                    : `${t('loading')}....`\n-            }\n-            subTitle={\n-                <EmployeeAvatar userDetails={userData} meeting={meeting} />\n+    // will prepare the layout\n+    useEffect(() => {\n+        setTitle(\n+            userData[0]\n+                ? `${contentparser(meeting?.templateName, languageId)}: ${reviewee?.ownerName} ${t('and')} ${reviewer?.ownerName}`\n+                : `${t('loading')}....`\n+        )\n+\n+        setBreadcrumbs([\n+            {\n+                name: 'One to One',\n+                path: '/'\n+            },\n+            {\n+                name:\n+                    loggedInUser === reviewee?.userId\n+                        ? reviewer?.ownerName\n+                        : reviewee?.ownerName,\n+                path: `/employee/${loggedInUser === reviewee?.userId ? reviewer?.userId : reviewee?.userId}`",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041834361",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/employee-details/EmployeeDetails.tsx",
//         "line": null,
//         "comment": "Updated this with customButtom option provided in layout upgrades.",
//         "commitId": "6ac94bdba88d18e34ac69118add643db78d977f7",
//         "codeSnippet": "@@ -170,53 +168,54 @@ const EmployeeDetails: FC = () => {\n \n     useEffect(() => {\n         if (!participantData) {\n-            setLayoutTitle('')\n+            setTitle('')\n             return\n         }\n         const loggedInUserName =\n             loggedInUserData?.fields[StandardField.NAME]?.data[0]\n \n         const participantName =\n             participantData?.fields[StandardField.NAME]?.data[0]\n-\n-        setLayoutTitle(`${participantName} and ${loggedInUserName}`)\n+        setTitle(`${participantName} and ${loggedInUserName}`)\n         setBreadcrumbs([\n-            { name: 'One to One', path: '/', type: 'internal' },\n+            { name: 'One to One', path: '/' },\n             {\n                 name: t(participantName ?? ''),\n-                path: `/employee/${id}`,\n-                type: 'internal'\n-            }\n-        ])\n-        setActionButtons([\n-            {\n-                label: g('new-meeting'),\n-                onClick: () => setOpen(true),\n-                variant: 'contained',\n-                disabled: !employeeOneToOnes.profileActive\n+                path: `/employee/${id}`\n             }\n         ])\n+\n         if (srSupportEnabled && id && subordinates.includes(id)) {\n-            setActionButtons((prev) => [\n+            setActions([\n                 {\n+                    id: 'status-review',\n                     label: '',",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/470#discussion_r2041858289",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/App/App.tsx",
//         "line": null,
//         "comment": "ScopedCssBaseline is already a part of AppStarter",
//         "commitId": "681654bd7141540de18ad52edbf80944a9f63dab",
//         "codeSnippet": "@@ -51,50 +46,49 @@ const App = (props: AppProps): JSX.Element => {\n         })\n     }, [])\n \n-    useEffect(() => {\n-        SpaEnvironment.init(environment)\n-        registerUrlWasherInterceptor()\n-        registerUrlInterceptor()\n-        registerHeaderInterceptor()\n-    }, [])\n-\n     useEffect(() => {\n         axiosConfiguration?.registerUnprotectedResources([\n             'cdn',\n             'https://developers.google.com'\n         ])\n-    }, [])\n-\n-    useEffect(() => {\n-        initializeLocale(locale, assetPath)\n-    }, [])\n-\n-    useEffect(() => {\n-        const requestUrlInterceptor = registerUrlInterceptor()\n-        return () => axios.interceptors.request.eject(requestUrlInterceptor)\n+        SpaEnvironment.init(environment)\n+        console.log('environment', environment)\n+        loadInitialLocale(locale!, assetPath)\n+        registerUrlWasherInterceptor()\n+        registerUrlInterceptor()\n+        registerHeaderInterceptor()\n     }, [])\n \n     return (\n-        <ConfigCatProvider\n-            options={{\n-                apiUrl: environment.apiUrl,\n-                product: 'one-to-one'\n-            }}\n-        >\n-            <Providers theme={theme} locale={locale!}>\n-                <ScopedCssBaseline\n-                    sx={{\n-                        backgroundColor: 'background.default',\n-                        minHeight: '100vh',\n-                        paddingBottom: '2rem',\n-                        overflow: 'hidden'\n-                    }}\n-                >\n-                    <GlobalStyles />\n-                    <Router />\n-                </ScopedCssBaseline>\n-            </Providers>\n-        </ConfigCatProvider>\n+        // do not show any fallback until MUI theme ready\n+        <Suspense fallback={null}>\n+            <AppStarter\n+                {...props}\n+                themeProps={{\n+                    locales\n+                }}\n+                configCatProps={{\n+                    apiUrl: environment?.apiUrl || '',\n+                    product: 'one-to-one',\n+                    devMode: import.meta.env.DEV,\n+                    mockFlags: import.meta.env.DEV ? mockedFlags : {}\n+                }}\n+            >\n+                <Providers spaProps={props}>\n+                    <ScopedCssBaseline",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/484#discussion_r2053918982",
//         "author": "yuriimukhin"
//     },
//     {
//         "file": "src/App/App.tsx",
//         "line": null,
//         "comment": "so you can just remove it\r\n",
//         "commitId": "681654bd7141540de18ad52edbf80944a9f63dab",
//         "codeSnippet": "@@ -51,50 +46,49 @@ const App = (props: AppProps): JSX.Element => {\n         })\n     }, [])\n \n-    useEffect(() => {\n-        SpaEnvironment.init(environment)\n-        registerUrlWasherInterceptor()\n-        registerUrlInterceptor()\n-        registerHeaderInterceptor()\n-    }, [])\n-\n     useEffect(() => {\n         axiosConfiguration?.registerUnprotectedResources([\n             'cdn',\n             'https://developers.google.com'\n         ])\n-    }, [])\n-\n-    useEffect(() => {\n-        initializeLocale(locale, assetPath)\n-    }, [])\n-\n-    useEffect(() => {\n-        const requestUrlInterceptor = registerUrlInterceptor()\n-        return () => axios.interceptors.request.eject(requestUrlInterceptor)\n+        SpaEnvironment.init(environment)\n+        console.log('environment', environment)\n+        loadInitialLocale(locale!, assetPath)\n+        registerUrlWasherInterceptor()\n+        registerUrlInterceptor()\n+        registerHeaderInterceptor()\n     }, [])\n \n     return (\n-        <ConfigCatProvider\n-            options={{\n-                apiUrl: environment.apiUrl,\n-                product: 'one-to-one'\n-            }}\n-        >\n-            <Providers theme={theme} locale={locale!}>\n-                <ScopedCssBaseline\n-                    sx={{\n-                        backgroundColor: 'background.default',\n-                        minHeight: '100vh',\n-                        paddingBottom: '2rem',\n-                        overflow: 'hidden'\n-                    }}\n-                >\n-                    <GlobalStyles />\n-                    <Router />\n-                </ScopedCssBaseline>\n-            </Providers>\n-        </ConfigCatProvider>\n+        // do not show any fallback until MUI theme ready\n+        <Suspense fallback={null}>\n+            <AppStarter\n+                {...props}\n+                themeProps={{\n+                    locales\n+                }}\n+                configCatProps={{\n+                    apiUrl: environment?.apiUrl || '',\n+                    product: 'one-to-one',\n+                    devMode: import.meta.env.DEV,\n+                    mockFlags: import.meta.env.DEV ? mockedFlags : {}\n+                }}\n+            >\n+                <Providers spaProps={props}>\n+                    <ScopedCssBaseline",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/484#discussion_r2053919222",
//         "author": "yuriimukhin"
//     },
//     {
//         "file": "src/locales.ts",
//         "line": null,
//         "comment": "For the 'da-DK' locale, the third element repeats 'daDK' instead of a date picker locale; consider using the correct date picker locale if available.",
//         "commitId": "681654bd7141540de18ad52edbf80944a9f63dab",
//         "codeSnippet": "@@ -0,0 +1,55 @@\n+import 'dayjs/locale/da'\n+import 'dayjs/locale/de'\n+import 'dayjs/locale/en'\n+import 'dayjs/locale/fi'\n+import 'dayjs/locale/fr'\n+import 'dayjs/locale/nb'\n+import 'dayjs/locale/nl'\n+import 'dayjs/locale/pl'\n+import 'dayjs/locale/sv'\n+\n+import {\n+    daDK,\n+    deDE,\n+    enUS,\n+    fiFI,\n+    frFR,\n+    nbNO,\n+    nlNL,\n+    plPL,\n+    svSE\n+} from '@mui/material/locale'\n+import {\n+    daDK as daGrid,\n+    deDE as deGrid,\n+    enUS as enGrid,\n+    fiFI as fiGrid,\n+    frFR as frGrid,\n+    nbNO as nbGrid,\n+    nlNL as nlGrid,\n+    plPL as plGrid,\n+    svSE as svGrid\n+} from '@mui/x-data-grid-pro/locales'\n+import {\n+    deDE as deDatePicker,\n+    enUS as enDatePicker,\n+    fiFI as fiDatePicker,\n+    frFR as frDatePicker,\n+    nbNO as nbDatePicker,\n+    nlNL as nlDatePicker,\n+    plPL as plDatePicker,\n+    svSE as svDatePicker\n+} from '@mui/x-date-pickers/locales'\n+\n+export const locales: Record<string, any[]> = {\n+    'en-US': [enUS, enGrid, enDatePicker],\n+    'en-GB': [enUS, enGrid, enDatePicker],\n+    'nb-NO': [nbNO, nbGrid, nbDatePicker],\n+    'sv-SE': [svSE, svGrid, svDatePicker],\n+    'fi-FI': [fiFI, fiGrid, fiDatePicker],\n+    'da-DK': [daDK, daGrid, daDK],",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/484#discussion_r2054079709",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/App/config/locale.ts",
//         "line": null,
//         "comment": "Consider removing or disabling the console.log statement to avoid unintended logging in production.\n```suggestion\n    if (process.env.NODE_ENV !== 'production') {\n        console.log('init locale', locale, localePublicUrl)\n    }\n```",
//         "commitId": "681654bd7141540de18ad52edbf80944a9f63dab",
//         "codeSnippet": "@@ -1,22 +1,32 @@\n-import { initReactI18next } from 'react-i18next'\n+import axios from 'axios'\n+import i18next from 'i18next'\n \n-import i18 from 'i18next'\n-import HttpApi from 'i18next-http-backend/cjs'\n+import { initLocale } from '@catalystone/react-core'\n \n-export const initializeLocale = (locale: string, baseLoadPath: string) => {\n-    i18.use(initReactI18next)\n-        .use(HttpApi)\n-        .init({\n-            lng: locale,\n-            interpolation: { escapeValue: false }, // React already does escaping\n-            load: 'currentOnly',\n-            fallbackLng: 'en-GB',\n-            backend: {\n-                loadPath: `${baseLoadPath}/locales/{{lng}}/{{ns}}.json`,\n-                crossDomain: true\n-            },\n-            react: {\n-                useSuspense: true\n-            }\n-        })\n+/**\n+ * @param {string} locale\n+ * locale code string as 'en', 'nb' etc.\n+ * @param {string} localePublicUrl\n+ * public url of bundle location, to fetch locale .json files\n+ *\n+ * Initial setup and load locale for i19next\n+ * */\n+export const loadInitialLocale = (locale: string, localePublicUrl: string) => {\n+    // init locale from SPA mount props\n+\n+    console.log('init locale', locale, localePublicUrl)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/484#discussion_r2054079724",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/App/config/locale.ts",
//         "line": null,
//         "comment": "This is done in AppStarter :) And only applies if translations are in CDN via project. If you want to start using Crowdin and get translations for shared components also you must look to react template",
//         "commitId": "681654bd7141540de18ad52edbf80944a9f63dab",
//         "codeSnippet": "@@ -1,22 +1,32 @@\n-import { initReactI18next } from 'react-i18next'\n+import axios from 'axios'\n+import i18next from 'i18next'\n \n-import i18 from 'i18next'\n-import HttpApi from 'i18next-http-backend/cjs'\n+import { initLocale } from '@catalystone/react-core'\n \n-export const initializeLocale = (locale: string, baseLoadPath: string) => {\n-    i18.use(initReactI18next)\n-        .use(HttpApi)\n-        .init({\n-            lng: locale,\n-            interpolation: { escapeValue: false }, // React already does escaping\n-            load: 'currentOnly',\n-            fallbackLng: 'en-GB',\n-            backend: {\n-                loadPath: `${baseLoadPath}/locales/{{lng}}/{{ns}}.json`,\n-                crossDomain: true\n-            },\n-            react: {\n-                useSuspense: true\n-            }\n-        })\n+/**\n+ * @param {string} locale\n+ * locale code string as 'en', 'nb' etc.\n+ * @param {string} localePublicUrl\n+ * public url of bundle location, to fetch locale .json files\n+ *\n+ * Initial setup and load locale for i19next\n+ * */\n+export const loadInitialLocale = (locale: string, localePublicUrl: string) => {\n+    // init locale from SPA mount props\n+\n+    console.log('init locale', locale, localePublicUrl)\n+\n+    initLocale(locale, localePublicUrl, () => {})",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/484#discussion_r2055533347",
//         "author": "thomasgodheim"
//     },
//     {
//         "file": "src/App/App.tsx",
//         "line": 60,
//         "comment": "Using a null fallback in the Suspense component might lead to a blank screen during theme initialization. Consider adding a loading indicator to improve user experience.\n```suggestion\n        // Show a loading indicator until MUI theme is ready\n        <Suspense fallback={<div>Loading...</div>}>\n```",
//         "commitId": "681654bd7141540de18ad52edbf80944a9f63dab",
//         "codeSnippet": "@@ -51,50 +44,38 @@ const App = (props: AppProps): JSX.Element => {\n         })\n     }, [])\n \n-    useEffect(() => {\n-        SpaEnvironment.init(environment)\n-        registerUrlWasherInterceptor()\n-        registerUrlInterceptor()\n-        registerHeaderInterceptor()\n-    }, [])\n-\n     useEffect(() => {\n         axiosConfiguration?.registerUnprotectedResources([\n             'cdn',\n             'https://developers.google.com'\n         ])\n-    }, [])\n-\n-    useEffect(() => {\n-        initializeLocale(locale, assetPath)\n-    }, [])\n-\n-    useEffect(() => {\n-        const requestUrlInterceptor = registerUrlInterceptor()\n-        return () => axios.interceptors.request.eject(requestUrlInterceptor)\n+        SpaEnvironment.init(environment)\n+        registerUrlWasherInterceptor()\n+        registerUrlInterceptor()\n+        registerHeaderInterceptor()\n     }, [])\n \n     return (\n-        <ConfigCatProvider\n-            options={{\n-                apiUrl: environment.apiUrl,\n-                product: 'one-to-one'\n-            }}\n-        >\n-            <Providers theme={theme} locale={locale!}>\n-                <ScopedCssBaseline\n-                    sx={{\n-                        backgroundColor: 'background.default',\n-                        minHeight: '100vh',\n-                        paddingBottom: '2rem',\n-                        overflow: 'hidden'\n-                    }}\n-                >\n+        // do not show any fallback until MUI theme ready\n+        <Suspense fallback={null}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/484#discussion_r2055744243",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/one-to-one-overview/StatusChip.tsx",
//         "line": 59,
//         "comment": "The pending branch renders a StyledChip without a label or variant property, unlike the non-pending case. To ensure consistency and clarity on the status chip, consider adding the label and variant (e.g., 'filled') props to the pending chip.",
//         "commitId": "9cbdb8f3cd5ff27a294dd3cc31a2191348a633a9",
//         "codeSnippet": "@@ -61,14 +61,32 @@ const StatusChip: FC<Props> = ({ overview }) => {\n             )\n         ),\n         O.map((status) => (\n-            <StyledChip\n-                key={status}\n-                size='small'\n-                label={getStatusChipLabel(status, overview)}\n-                variant='filled'\n-                // @ts-ignore\n-                $severity={colorMap[status]}\n-            />\n+            status === 'pending' ? (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/485#discussion_r2055768826",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/one-to-one-overview/StatusChip.tsx",
//         "line": 59,
//         "comment": "since we are using condition on pending and complete, should remove colormap and directly pass the color, same can be done for label",
//         "commitId": "9cbdb8f3cd5ff27a294dd3cc31a2191348a633a9",
//         "codeSnippet": "@@ -61,14 +61,32 @@ const StatusChip: FC<Props> = ({ overview }) => {\n             )\n         ),\n         O.map((status) => (\n-            <StyledChip\n-                key={status}\n-                size='small'\n-                label={getStatusChipLabel(status, overview)}\n-                variant='filled'\n-                // @ts-ignore\n-                $severity={colorMap[status]}\n-            />\n+            status === 'pending' ? (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/485#discussion_r2055779553",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-overview/StatusChip.tsx",
//         "line": null,
//         "comment": "please test this check, what I remember is if status is complete then meetincount is always = 0, if this is the case, no need to put this condition",
//         "commitId": "9cbdb8f3cd5ff27a294dd3cc31a2191348a633a9",
//         "codeSnippet": "@@ -69,22 +58,22 @@ const StatusChip: FC<Props> = ({ overview }) => {\n                     sx={{ maxWidth: '200px' }}\n                 >\n                     <StyledChip\n-                        key={status}\n+                        key=\"pending\"\n                         size='small'\n-                        label={getStatusChipLabel(status, overview)}\n+                        label={overview.meetingCount > 1 ? `${t('pending')} (${overview.meetingCount})` : t('pending')}\n                         variant='filled'\n                         // @ts-ignore\n-                        $severity={colorMap[status]}\n+                        $severity=\"warning\"\n                     />\n                 </Tooltip>\n             ) : (\n                 <StyledChip\n-                    key={status}\n+                    key=\"complete\"\n                     size='small'\n-                    label={getStatusChipLabel(status, overview)}\n+                    label={overview.meetingCount > 1 ? `${t('complete')} (${overview.meetingCount})` : t('complete')}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/485#discussion_r2055838455",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/administration-landing-page/AdministrationLandingPage.tsx",
//         "line": 113,
//         "comment": "The variable 'selectedValue' is used within setLayout in the second useEffect, but it is defined only in the first useEffect and not stored in state. This inconsistency between 'selectedValue' and the 'selected' state used for rendering could lead to unpredictable behavior; consider synchronizing them by storing the computed value in state and using that state consistently.",
//         "commitId": "58d24d7465ca68cf6a88f09fa86961f0da7831da",
//         "codeSnippet": "@@ -95,38 +95,28 @@ const AdministrationLandingPage: React.FC<Props> = ({ permissions }) => {\n             .filter((tab): tab is OverviewTab => tab !== undefined)\n \n         setTabs(tabs)\n-    }, [permissions])\n \n-    useEffect(() => {\n-        if (isEmpty(permissions)) return\n-        if (isEmpty(tabs)) return\n-\n-        // Set selected tab\n-        pipe(\n+        const selectedValue = pipe(\n             searchParams.get('initialtab'),\n             O.fromPredicate(isValidTab),\n             O.chain(flow(O.fromNullable)),\n             O.chain(flow(O.fromPredicate(hasPermission(permissions)))),\n             O.getOrElse(() => getTabByPermission(permissions)),\n             getTabView,\n-            findTabIndex(tabs),\n-            setSelected\n+            findTabIndex(tabs)\n         )\n \n-        setPermissionsResolved(true)\n-    }, [searchParams, permissions, tabs])\n+        setSelected(selectedValue)\n \n-    useEffect(() => {\n-        if (!permissionsResolved) return\n         setLayout({\n             type: 'tabs',\n-            active: selected,\n+            active: selectedValue,",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/491#discussion_r2065773249",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/services/one-to-one/service.ts",
//         "line": 93,
//         "comment": "Consider revoking the object URL created with URL.createObjectURL(blob) when it is no longer needed to prevent potential memory leaks. This can be done by calling URL.revokeObjectURL(url) at the appropriate time.",
//         "commitId": "9ac27b3fd3039ac3e5c254f3cd6ef015ec330d12",
//         "codeSnippet": "@@ -81,6 +82,26 @@ export const fetchAdditionalData = (\n     )\n }\n \n+export const fetchEmployeeImage = (\n+    employeeData: EmployeeData[]\n+): Promise<EmployeeData[]> => {\n+    return Promise.all(\n+        employeeData.map((e) => {\n+            const image = e.fields[StandardField.IMAGE]?.data[0]\n+            if (!image) return Promise.resolve(e)\n+            return getUserImageBlob(image).then((blob) => {\n+                const url = URL.createObjectURL(blob)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/498#discussion_r2071143617",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/template-preview/useTemplatePreview.ts",
//         "line": null,
//         "comment": "Mixing async/await with a .then callback here means errors inside the .then won’t be caught and loading state may clear too early. Consider using `const response = await axios.get(...)` inside the try block to properly await and catch errors.\n```suggestion\n                const response = await axios.get(\n                    `/onetooneservice/v2/onetoonetemplates/${templateId}/preview`\n                )\n                setPreviewData(response.data)\n```",
//         "commitId": "0de8a06643f49ec7e45897ed08060b6d3db00cf9",
//         "codeSnippet": "@@ -0,0 +1,37 @@\n+import { useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+\n+const useTemplatePreview = (templateId: string) => {\n+    const [previewData, setPreviewData] = useState<TemplatePreview>()\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [error, setError] = useState<string | null>(null)\n+\n+    useEffect(() => {\n+        if (!templateId) return\n+\n+        const fetchData = async () => {\n+            try {\n+                setLoading(true)\n+                axios\n+                    .get(\n+                        `/onetooneservice/v2/onetoonetemplates/${templateId}/preview`\n+                    )\n+                    .then((response) => {\n+                        setPreviewData(response.data)\n+                    })",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/501#discussion_r2103871777",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/template-preview/TemplatePreviewDetails.tsx",
//         "line": null,
//         "comment": "The `AlertDialog` is never opened because `showErrorDialogOpen` is never set to an open state. Either remove this unused dialog or call `setShowErrorDialogOpen(getOpenState())` when an error occurs.",
//         "commitId": "0de8a06643f49ec7e45897ed08060b6d3db00cf9",
//         "codeSnippet": "@@ -0,0 +1,118 @@\n+import { FC, useEffect, useState } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import AlertDialog from '@/Components/AlertDialog'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import { contentparser } from '@/services/template'\n+import { DialogState, getClosedState, getOpenState } from '@/types/dialog'\n+import { useSnackbar } from '@catalystone/react-core-ui'\n+import { Box, CircularProgress, Step, StepLabel, Stepper } from '@mui/material'\n+\n+import SectionPreview from './Pages/SectionPreview'\n+import useTemplatePreview from './useTemplatePreview'\n+\n+type Props = {\n+    templateId: string\n+}\n+const TemplatePreviewDetails: FC<Props> = ({ templateId }) => {\n+    const [step, setStep] = useState<number>(0)\n+    const { previewData, error } = useTemplatePreview(templateId)\n+    const [sectionSteps, setSectionSteps] = useState<SectionSteps[]>([])\n+    const { languageId } = useGlobal()\n+    const [showErrorDialogOpen, setShowErrorDialogOpen] =\n+        useState<DialogState>(getClosedState())\n+    const { createSnack } = useSnackbar()\n+\n+    const { t } = useTranslation('global')\n+\n+    useEffect(() => {\n+        if (previewData?.pages) {\n+            const sectionStepsTemp = previewData?.pages?.map(\n+                (section, index) => {\n+                    return {\n+                        name: contentparser(section.name, languageId),\n+                        sectionType: section.type,\n+                        order: index\n+                    }\n+                }\n+            )\n+            setSectionSteps(sectionStepsTemp)\n+        }\n+    }, [previewData?.pages])\n+\n+    const handleStepChange = (stepIndex: number) => {\n+        setStep(stepIndex)\n+    }\n+\n+    const handleCancel = () => {\n+        setShowErrorDialogOpen(getClosedState())\n+    }\n+\n+    useEffect(() => {\n+        if (error) {\n+            createSnack({ alert: { severity: 'error' } })(\n+                t('preview-reload-text')\n+            )\n+        }\n+    }, [error])\n+\n+    return (\n+        <>\n+            {!error && previewData ? (\n+                <Box my='16px' sx={{ display: 'flex', height: '100%' }}>\n+                    <Box sx={{ width: '25%', pr: '8px' }}>\n+                        <Stepper activeStep={step} orientation='vertical'>\n+                            {sectionSteps?.map((sectionStep, index) => (\n+                                <Step\n+                                    data-auto-btn-id={\n+                                        sectionStep.sectionType === 2\n+                                            ? 'nav-Meeting-notes'\n+                                            : `nav-page-${index + 1}`\n+                                    }\n+                                    key={sectionStep.order}\n+                                >\n+                                    <StepLabel\n+                                        onClick={() => handleStepChange(index)}\n+                                        sx={{ cursor: 'pointer' }}\n+                                    >\n+                                        {sectionStep.name}\n+                                    </StepLabel>\n+                                </Step>\n+                            ))}\n+                        </Stepper>\n+                    </Box>\n+                    <Box\n+                        sx={{\n+                            width: '75%',\n+                            pl: 2\n+                        }}\n+                    >\n+                        <SectionPreview\n+                            step={step}\n+                            sections={previewData?.pages}\n+                            showSignOff={previewData.requiredSignoff}\n+                        />\n+                    </Box>\n+                </Box>\n+            ) : (\n+                <CircularProgress\n+                    sx={{\n+                        position: 'absolute',\n+                        top: '50%',\n+                        left: '50%'\n+                    }}\n+                />\n+            )}\n+            <AlertDialog",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/501#discussion_r2103871790",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/one-to-one/TemplateCard/TemplateCard.tsx",
//         "line": null,
//         "comment": "There’s a typo in `data-auto-btn-id`: `tempalte-preview` should be `template-preview`.\n```suggestion\n                                    data-auto-btn-id='template-preview'\n```",
//         "commitId": "0de8a06643f49ec7e45897ed08060b6d3db00cf9",
//         "codeSnippet": "@@ -38,57 +33,124 @@ export const TextWrapper = styled('div')<{ containerType: string }>(\n     })\n )\n \n+const ButtonsContainer = styled(FlexBox)(({ theme }) => ({\n+    marginTop: theme.spacing(2),\n+    justifyContent: 'flex-start',\n+    alignItems: 'center'\n+}))\n+\n const TemplateCard: FC<Props> = ({\n     lastUpdatedAt,\n     templateDescription,\n     templateId,\n     templateName,\n     workflowType,\n-    onClick,\n-    selectedTemplate\n+    onPreview,\n+    onInitiateMeeting\n }) => {\n     const { t } = useTranslation('one-to-one')\n     const { t: g } = useTranslation('global')\n-    const { languageId } = useGlobal()\n+    const { languageId, previewModeFeatureToggleEnabled } = useGlobal()\n+    const [previewDialogOpen, setPreviewDialogOpen] = useState(false)\n+\n+    const template: Template = {\n+        templateDescription,\n+        templateId,\n+        templateName,\n+        workflowType,\n+        lastUpdatedAt,\n+        createdDate: lastUpdatedAt,\n+        status: 'PUBLISHED'\n+    }\n+\n+    const handlePreview = useCallback((e: React.MouseEvent) => {\n+        e.stopPropagation()\n+        if (onPreview) {\n+            onPreview(template)\n+        }\n+        setPreviewDialogOpen(true)\n+    }, [])\n+\n+    const handleInitiateMeeting = (e?: React.MouseEvent) => {\n+        if (e) {\n+            e.stopPropagation()\n+        }\n+        if (onInitiateMeeting) {\n+            onInitiateMeeting(template)\n+        }\n+    }\n \n     return (\n-        <CardContainer\n-            $selected={isEqual(selectedTemplate?.templateId, templateId)}\n-            onClick={onClick}\n-        >\n-            {/* <TitleContainer> */}\n-            <Grid container spacing={2}>\n-                <Grid item sm={6}>\n-                    <TextWrapper containerType='name'>\n-                        <Typography variant='h6'>\n-                            {contentparser(templateName, languageId)}\n-                        </Typography>\n-                    </TextWrapper>\n-                    <FlexBox gap={0.3}>\n-                        <Typography fontSize={12}>\n-                            {`${g(`last-updated-txt`)}:`}\n-                        </Typography>\n-                        <DateFormatter\n-                            dateToFormat={lastUpdatedAt}\n-                            fontSize={12}\n-                        />\n-                    </FlexBox>\n-                </Grid>\n+        <>\n+            <CardContainer>\n+                <Grid container spacing={2}>\n+                    <Grid item sm={6}>\n+                        <TextWrapper containerType='name'>\n+                            <Typography variant='h6'>\n+                                {contentparser(templateName, languageId)}\n+                            </Typography>\n+                        </TextWrapper>\n+                        <FlexBox gap={0.3}>\n+                            <Typography fontSize={12}>\n+                                {`${g(`last-updated-txt`)}:`}\n+                            </Typography>\n+                            <DateFormatter\n+                                dateToFormat={lastUpdatedAt}\n+                                fontSize={12}\n+                            />\n+                        </FlexBox>\n+                    </Grid>\n \n-                <Grid container item sm={6} justifyContent='flex-end'>\n-                    <WorkflowPill workflowType={workflowType} />\n-                </Grid>\n-                {/* </TitleContainer> */}\n-\n-                <Grid item sm={12}>\n-                    <TextWrapper containerType='description'>\n-                        <Typography>\n-                            {contentparser(templateDescription, languageId)}\n-                        </Typography>\n-                    </TextWrapper>\n+                    <Grid container item sm={6} justifyContent='flex-end'>\n+                        <WorkflowPill workflowType={workflowType} />\n+                    </Grid>\n+\n+                    <Grid item sm={12}>\n+                        <TextWrapper containerType='description'>\n+                            <Typography>\n+                                {contentparser(templateDescription, languageId)}\n+                            </Typography>\n+                        </TextWrapper>\n+                    </Grid>\n+\n+                    <Grid item sm={12}>\n+                        <ButtonsContainer>\n+                            {true && (\n+                                <Button\n+                                    data-auto-btn-id='tempalte-preview'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/501#discussion_r2103871797",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/ToDoCreater.tsx",
//         "line": null,
//         "comment": "The expression `false || previewMode` is redundant; you can simplify it to `disabled={previewMode}`.\n```suggestion\n                    disabled={previewMode}\n```",
//         "commitId": "0de8a06643f49ec7e45897ed08060b6d3db00cf9",
//         "codeSnippet": "@@ -134,16 +136,30 @@ const ToDoCreater: FC<ToDoCreaterProps> = ({\n                 </Grid>\n                 <Grid item xs={12} width={300} md={5}>\n                     <DatePicker\n+                        disabled={previewMode}\n                         sx={{ width: '100%' }}\n                         label={t('deadline-header')}\n-                        value={deadLine}\n+                        value={previewMode ? null : deadLine}\n                         onChange={(newValue) => setDateValue(newValue)}\n+                        slotProps={{\n+                            textField: {\n+                                InputProps: {\n+                                    sx: {\n+                                        '& .MuiSvgIcon-root': {\n+                                            fill: previewMode\n+                                                ? '#757575'\n+                                                : '#0081A3' // override icon color for preview mode\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }}\n                     />\n                 </Grid>\n                 <TextFieldWithValidation\n                     sx={{ mt: 2 }}\n                     onValidate={(value) => value.length <= 140}\n-                    disabled={false}\n+                    disabled={false || previewMode}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/501#discussion_r2103871805",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/one-to-one/TemplateCard/TemplateCard.tsx",
//         "line": null,
//         "comment": "remove console log",
//         "commitId": "0de8a06643f49ec7e45897ed08060b6d3db00cf9",
//         "codeSnippet": "@@ -38,25 +41,58 @@ export const TextWrapper = styled('div')<{ containerType: string }>(\n     })\n )\n \n+const ButtonsContainer = styled(FlexBox)(({ theme }) => ({\n+    marginTop: theme.spacing(2),\n+    justifyContent: 'flex-start',\n+    alignItems: 'center'\n+}))\n+\n const TemplateCard: FC<Props> = ({\n     lastUpdatedAt,\n     templateDescription,\n     templateId,\n     templateName,\n     workflowType,\n     onClick,\n-    selectedTemplate\n+    selectedTemplate,\n+    onPreview,\n+    onInitiateMeeting\n }) => {\n     const { t } = useTranslation('one-to-one')\n     const { t: g } = useTranslation('global')\n     const { languageId } = useGlobal()\n \n+    const template: Template = {\n+        lastUpdatedAt,\n+        templateDescription,\n+        templateId,\n+        templateName,\n+        workflowType,\n+        createdDate: lastUpdatedAt, // Using lastUpdatedAt as fallback\n+        status: 'PUBLISHED' // Default status\n+    }\n+\n+    const handlePreview = (e: React.MouseEvent) => {\n+        e.stopPropagation()\n+        if (onPreview) {\n+            onPreview(template)\n+        } else {\n+            console.log('Preview template:', template)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/501#discussion_r2103885039",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one/TemplateCard/TemplateCard.tsx",
//         "line": null,
//         "comment": "Grid is deprecated....instead use Grid2",
//         "commitId": "0de8a06643f49ec7e45897ed08060b6d3db00cf9",
//         "codeSnippet": "@@ -87,6 +122,29 @@ const TemplateCard: FC<Props> = ({\n                         </Typography>\n                     </TextWrapper>\n                 </Grid>\n+\n+                <Grid item sm={12}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/501#discussion_r2103886267",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one/TemplateSelector/TemplateSelector.tsx",
//         "line": null,
//         "comment": "remove console log",
//         "commitId": "0de8a06643f49ec7e45897ed08060b6d3db00cf9",
//         "codeSnippet": "@@ -36,20 +28,20 @@ const TemplateSelector: FC<Props> = ({ onClose, open, onSubmit }) => {\n     const [filtered, setFiltered] = useState<Template[]>([])\n     const [filterText, setFilterText] = useState<string>('')\n \n-    const handleSubmit = () => {\n-        onClose()\n-        onSubmit(selected)\n-        setSelected(null)\n-    }\n     const handleClose = () => {\n         setSelected(null)\n         onClose()\n     }\n \n-    const debouncedHandleSubmit = useCallback(\n-        debounce(handleSubmit, 500, { leading: true, trailing: false }),\n-        [selected]\n-    )\n+    const handlePreview = (template: Template) => {\n+        console.log('Preview template:', template)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/501#discussion_r2103887919",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/ToDoCreater.tsx",
//         "line": null,
//         "comment": "please look into copilot comments",
//         "commitId": "0de8a06643f49ec7e45897ed08060b6d3db00cf9",
//         "codeSnippet": "@@ -134,16 +136,30 @@ const ToDoCreater: FC<ToDoCreaterProps> = ({\n                 </Grid>\n                 <Grid item xs={12} width={300} md={5}>\n                     <DatePicker\n+                        disabled={previewMode}\n                         sx={{ width: '100%' }}\n                         label={t('deadline-header')}\n-                        value={deadLine}\n+                        value={previewMode ? null : deadLine}\n                         onChange={(newValue) => setDateValue(newValue)}\n+                        slotProps={{\n+                            textField: {\n+                                InputProps: {\n+                                    sx: {\n+                                        '& .MuiSvgIcon-root': {\n+                                            fill: previewMode\n+                                                ? '#757575'\n+                                                : '#0081A3' // override icon color for preview mode\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }}\n                     />\n                 </Grid>\n                 <TextFieldWithValidation\n                     sx={{ mt: 2 }}\n                     onValidate={(value) => value.length <= 140}\n-                    disabled={false}\n+                    disabled={false || previewMode}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/501#discussion_r2103890277",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-preview/Pages/SectionPreview.tsx",
//         "line": null,
//         "comment": "use already defined enums for general section and goal management section??",
//         "commitId": "0de8a06643f49ec7e45897ed08060b6d3db00cf9",
//         "codeSnippet": "@@ -0,0 +1,33 @@\n+import { FC } from 'react'\n+\n+import { match } from 'ts-pattern'\n+\n+import { Section } from '@/services/one-to-one'\n+import { Box } from '@mui/material'\n+\n+import GeneralSection from './GeneralSection'\n+import GoalManagementSection from './GoalManagementSection'\n+import MeetingNotesSection from './MeetingNotesSection'\n+\n+type PreviewProps = {\n+    step: number\n+    sections: Page[]\n+    showSignOff: boolean\n+}\n+const SectionPreview: FC<PreviewProps> = ({ step, sections, showSignOff }) => {\n+    const pageType = sections[step]?.type\n+    return (\n+        <Box minHeight={300}>\n+            {match(pageType)\n+                .with(1, () => <GeneralSection generalData={sections[step]} />)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/501#discussion_r2104316113",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-preview/useTemplatePreview.ts",
//         "line": null,
//         "comment": "please look into this comment",
//         "commitId": "0de8a06643f49ec7e45897ed08060b6d3db00cf9",
//         "codeSnippet": "@@ -0,0 +1,37 @@\n+import { useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+\n+const useTemplatePreview = (templateId: string) => {\n+    const [previewData, setPreviewData] = useState<TemplatePreview>()\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [error, setError] = useState<string | null>(null)\n+\n+    useEffect(() => {\n+        if (!templateId) return\n+\n+        const fetchData = async () => {\n+            try {\n+                setLoading(true)\n+                axios\n+                    .get(\n+                        `/onetooneservice/v2/onetoonetemplates/${templateId}/preview`\n+                    )\n+                    .then((response) => {\n+                        setPreviewData(response.data)\n+                    })",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/501#discussion_r2104324874",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-preview/useTemplatePreview.ts",
//         "line": null,
//         "comment": "remove console errors\r\n",
//         "commitId": "0de8a06643f49ec7e45897ed08060b6d3db00cf9",
//         "codeSnippet": "@@ -0,0 +1,37 @@\n+import { useEffect, useState } from 'react'\n+\n+import axios from 'axios'\n+\n+const useTemplatePreview = (templateId: string) => {\n+    const [previewData, setPreviewData] = useState<TemplatePreview>()\n+    const [loading, setLoading] = useState<boolean>(true)\n+    const [error, setError] = useState<string | null>(null)\n+\n+    useEffect(() => {\n+        if (!templateId) return\n+\n+        const fetchData = async () => {\n+            try {\n+                setLoading(true)\n+                axios\n+                    .get(\n+                        `/onetooneservice/v2/onetoonetemplates/${templateId}/preview`\n+                    )\n+                    .then((response) => {\n+                        setPreviewData(response.data)\n+                    })\n+            } catch (err: any) {\n+                console.error('Error fetching preview data:', err)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/501#discussion_r2104325224",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-preview/Pages/MeetingNotesSection.tsx",
//         "line": null,
//         "comment": "Using 'new Array(2)' for destructuring results in both reviewee and reviewer being undefined. Initialize these values appropriately or fetch them from a reliable data source to avoid runtime issues when accessing properties.\n```suggestion\n    const [reviewee, reviewer] = [\n        { ownerAvatar: null, ownerNameInitials: '' },\n        { ownerAvatar: null, ownerNameInitials: '' }\n    ]\n```",
//         "commitId": "0de8a06643f49ec7e45897ed08060b6d3db00cf9",
//         "codeSnippet": "@@ -0,0 +1,106 @@\n+import { FC } from 'react'\n+import { useTranslation } from 'react-i18next'\n+\n+import { getAssetsBasePath } from '@/App/config/assetsPath'\n+import FlexBox from '@/Components/FlexBox'\n+import { TextWrapper } from '@/Components/RichTextEditor/RichTextPreview'\n+import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n+import {\n+    ConfirmReadText,\n+    LineSeparator,\n+    SignatureStyled,\n+    SignatureText\n+} from '@/features/one-to-one-meeting/Signatures/styled'\n+import ToDoCreater from '@/features/one-to-one-meeting/to-do-creater/ToDoCreater'\n+import { fadeIn } from '@/features/one-to-one-meeting/to-do-creater/todo-table/styled'\n+import useMeeting from '@/features/one-to-one-meeting/useMeeting'\n+import { ColoredAvatar } from '@catalystone/react-core-ui'\n+import { Box, TextField, Typography, Divider } from '@mui/material'\n+\n+type Props = {\n+    showSignature: boolean\n+}\n+const MeetingNotesSection: FC<Props> = ({ showSignature }) => {\n+    const { t } = useTranslation('one-to-one')\n+    const { t: g } = useTranslation('meeting')\n+    const { t: h } = useTranslation('global')\n+    const assetsBasePath = getAssetsBasePath()\n+    const [reviewee, reviewer] = new Array(2)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/501#discussion_r2104484156",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/one-to-one/TemplateCard/TemplateCard.tsx",
//         "line": null,
//         "comment": "will do in different commit",
//         "commitId": "0de8a06643f49ec7e45897ed08060b6d3db00cf9",
//         "codeSnippet": "@@ -87,6 +122,29 @@ const TemplateCard: FC<Props> = ({\n                         </Typography>\n                     </TextWrapper>\n                 </Grid>\n+\n+                <Grid item sm={12}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/501#discussion_r2104488308",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "public/locales/en-US/template-details.json",
//         "line": null,
//         "comment": "please move this text to one-to-one file, as TemplateCard use one-to-one file as main translation file",
//         "commitId": "89912c5cc9c30e8cc2be8df6afc44176c8fb4e94",
//         "codeSnippet": "@@ -116,5 +116,6 @@\n     \"q-answer\": \"Answer\",\n     \"set-active-page\": \"Set active\",\n     \"require-signoff-text\": \"Require sign-off from both participants\",\n+    \"requires-signature-text\": \"Requires signature\",",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/515#discussion_r2106991960",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one/TemplateCard/TemplateCard.tsx",
//         "line": null,
//         "comment": "please remove if not in use",
//         "commitId": "89912c5cc9c30e8cc2be8df6afc44176c8fb4e94",
//         "codeSnippet": "@@ -45,11 +45,13 @@ const TemplateCard: FC<Props> = ({\n     templateId,\n     templateName,\n     workflowType,\n+    requiredSignoff,\n     onPreview,\n     onInitiateMeeting\n }) => {\n     const { t } = useTranslation('one-to-one')\n     const { t: g } = useTranslation('global')\n+    const { t: d } = useTranslation('template-details')",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/515#discussion_r2107064291",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one/TemplateCard/TemplateCard.tsx",
//         "line": null,
//         "comment": "oops\r\n",
//         "commitId": "89912c5cc9c30e8cc2be8df6afc44176c8fb4e94",
//         "codeSnippet": "@@ -45,11 +45,13 @@ const TemplateCard: FC<Props> = ({\n     templateId,\n     templateName,\n     workflowType,\n+    requiredSignoff,\n     onPreview,\n     onInitiateMeeting\n }) => {\n     const { t } = useTranslation('one-to-one')\n     const { t: g } = useTranslation('global')\n+    const { t: d } = useTranslation('template-details')",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/515#discussion_r2107064642",
//         "author": "aman1820"
//     },
//     {
//         "file": "src/features/template-preview/Pages/GeneralSection.tsx",
//         "line": 58,
//         "comment": "Provide an `alt` text or `aria-label` for the empty state image to ensure screen readers can describe the placeholder.\n```suggestion\n            src={BoxEmpty}\n            alt={t('empty-state-image-alt')}\n```",
//         "commitId": "f5972f37a8ba7170089cb1d103b908d2b04cf295",
//         "codeSnippet": "@@ -50,6 +53,13 @@ const GeneralSection: FC<GeneralSectionProps> = ({ generalData }) => {\n             )}\n             <GeneralSectionTopics topics={generalData?.questionSettings} />\n         </Box>\n+    ) : (\n+        <EmptyState\n+            src={BoxEmpty}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/516#discussion_r2107220709",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/Pages/General.tsx",
//         "line": 61,
//         "comment": "Provide an `alt` text or `aria-label` for the empty state image to improve accessibility for screen reader users.\n```suggestion\n            src={BoxEmpty}\n            alt={t('empty-box-alt', 'Empty box illustration')}\n```",
//         "commitId": "f5972f37a8ba7170089cb1d103b908d2b04cf295",
//         "codeSnippet": "@@ -44,13 +49,20 @@ const GeneralPage: FC<Props> = ({ oneToOneId, section }) => {\n     if (loading) {\n         return <SectionSkeleton />\n     }\n-    return (\n+    return !isEmpty(generalPageData?.topics) ? (\n         <Box sx={{ animation: `${fadeIn} 0.5s ease-in forwards` }}>\n             <Typography variant='h5' mb='0.5rem'>\n                 {contentparser(section.sectionName, languageId)}\n             </Typography>\n             <GeneralPageTopics sectionData={generalPageData} />\n         </Box>\n+    ) : (\n+        <EmptyState\n+            src={BoxEmpty}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/516#discussion_r2107220720",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/main.tsx",
//         "line": 10,
//         "comment": "Casting 'proxyConfig' to Record<string, AuthProxyConfig> may hide potential type mismatches. Consider refining the type definitions for proxyConfig for stronger type-safety.",
//         "commitId": "681654bd7141540de18ad52edbf80944a9f63dab",
//         "codeSnippet": "@@ -1,11 +1,13 @@\n import ReactDOM from 'react-dom/client'\n \n+import { AuthProxyConfig, DevLogin } from '@catalystone/dev-tools'\n+\n+import proxyConfig from '../proxy.config'\n import App from './App/App'\n-import DevLogin from './App/DevLogin'\n import { envMoq } from './mock/environment.mock'\n \n ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n-    <DevLogin>\n-        <App environment={envMoq} />\n+    <DevLogin proxyConfig={proxyConfig as Record<string, AuthProxyConfig>}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/484#discussion_r2108181693",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/main.tsx",
//         "line": 10,
//         "comment": "intended",
//         "commitId": "681654bd7141540de18ad52edbf80944a9f63dab",
//         "codeSnippet": "@@ -1,11 +1,13 @@\n import ReactDOM from 'react-dom/client'\n \n+import { AuthProxyConfig, DevLogin } from '@catalystone/dev-tools'\n+\n+import proxyConfig from '../proxy.config'\n import App from './App/App'\n-import DevLogin from './App/DevLogin'\n import { envMoq } from './mock/environment.mock'\n \n ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n-    <DevLogin>\n-        <App environment={envMoq} />\n+    <DevLogin proxyConfig={proxyConfig as Record<string, AuthProxyConfig>}>",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/484#discussion_r2108698125",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/one-to-one-meeting/to-do-creater/ToDoCreater.tsx",
//         "line": 183,
//         "comment": "[nitpick] Consider refactoring the complex placeholder string construction for improved readability, possibly by extracting the expression into a helper variable.",
//         "commitId": "8e0b3617f2c550a5a0a7c8b3f98d12b8566fe2a1",
//         "codeSnippet": "@@ -166,12 +170,17 @@ const ToDoCreater: FC<ToDoCreaterProps> = ({\n                     maxLength={140}\n                     multiline\n                     rows={3}\n-                    placeholder={`${todo('add-todo-for')} ${\n-                        userData.filter(\n-                            (user) =>\n-                                user.userId === selectedPerson.slice(0, 36)\n-                        )[0]?.ownerName\n-                    }`}\n+                    placeholder={\n+                        !previewMode\n+                            ? `${todo('add-todo-for')} ${\n+                                  userData.filter(\n+                                      (user) =>\n+                                          user.userId ===\n+                                          selectedPerson.slice(0, 36)\n+                                  )[0]?.ownerName\n+                              }`\n+                            : ''\n+                    }",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/522#discussion_r2111708304",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/template-preview/TemplatePreviewDetails.tsx",
//         "line": null,
//         "comment": "why??? no state is declared",
//         "commitId": "4ba12183d09f8f7ffcbf5c49e8dc8af364a24842",
//         "codeSnippet": "@@ -16,22 +16,21 @@ type Props = {\n }\n const TemplatePreviewDetails: FC<Props> = ({ templateId }) => {\n     const [step, setStep] = useState<number>(0)\n-    const { previewData, error } = useTemplatePreview(templateId)\n+    const { previewData, error, loading } = useTemplatePreview(templateId)\n     const [sectionSteps, setSectionSteps] = useState<SectionSteps[]>([])\n     const { languageId } = useGlobal()\n-    const [showErrorDialogOpen, setShowErrorDialogOpen] =\n-        useState<DialogState>(getClosedState())\n+    useState<DialogState>(getClosedState())",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/524#discussion_r2113176383",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-preview/Pages/GeneralSection.tsx",
//         "line": 32,
//         "comment": "[nitpick] There's similar conditional rendering logic for topics/empty state in both this component and `General.tsx`. Consider extracting the common wrapper into a shared component to reduce duplication.",
//         "commitId": "cead353cf8c9e40f188ddd12cd0a17e9f05ae724",
//         "codeSnippet": "@@ -29,7 +29,7 @@ const GeneralSection: FC<GeneralSectionProps> = ({ generalData }) => {\n     const { languageId } = useGlobal()\n     const { t } = useTranslation('meeting')\n \n-    return !isEmpty(generalData.questionSettings) ? (\n+    return (",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/537#discussion_r2135026460",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/template-preview/Pages/MeetingNotesSection.tsx",
//         "line": null,
//         "comment": "Using `g(' ')` likely returns a single space rather than an intentional placeholder. Consider using an empty string (`\"\"`) or the correct translation key to avoid unexpected UI behavior.\n```suggestion\n                defaultValue=\"\"\n```",
//         "commitId": "7feece05f9b7fc17d5e66a3b345e1391206e9255",
//         "codeSnippet": "@@ -44,7 +44,7 @@ const MeetingNotesSection: FC<Props> = ({ showSignature }) => {\n                 label={g('meeting-notes')}\n                 multiline\n                 rows={4}\n-                defaultValue={g('summary-placeholder')}\n+                defaultValue={g(' ')}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/542#discussion_r2139168982",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/Components/RichTextEditor/RichTextEditor.tsx",
//         "line": 79,
//         "comment": "Opening links with `target=\"_blank\"` without `rel=\"noopener noreferrer\"` can introduce security risks. Add `el.setAttribute('rel', 'noopener noreferrer')` alongside the `target` attribute.\n```suggestion\n                    el.setAttribute('target', '_blank')\n                    el.setAttribute('rel', 'noopener noreferrer')\n```",
//         "commitId": "7feece05f9b7fc17d5e66a3b345e1391206e9255",
//         "codeSnippet": "@@ -68,6 +68,20 @@ export const RichTextEditor = ({\n         }\n     }, [value, scEditor])\n \n+    // following logic to make links work inside sc editor due to missing target attribute inside anchor tags!\n+    useEffect(() => {\n+        const iframes = document.querySelectorAll('iframe')\n+        if (iframes.length) {\n+            iframes.forEach((iframe) => {\n+                const editableElements =\n+                    iframe.contentDocument?.querySelectorAll('a[href]')\n+                editableElements?.forEach((el) => {\n+                    el.setAttribute('target', '_blank')",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/542#discussion_r2139168985",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/Components/RichTextEditor/RichTextEditor.tsx",
//         "line": 84,
//         "comment": "This effect queries all iframes on every `value` or `scEditor` change, which may degrade performance. Consider scoping the selection to the editor container or using a MutationObserver for more efficient updates.\n```suggestion\n        if (!ref.current) return;\n\n        const observer = new MutationObserver(() => {\n            const iframes = ref.current?.querySelectorAll('iframe');\n            if (iframes?.length) {\n                iframes.forEach((iframe) => {\n                    const editableElements =\n                        iframe.contentDocument?.querySelectorAll('a[href]');\n                    editableElements?.forEach((el) => {\n                        el.setAttribute('target', '_blank');\n                    });\n                });\n            }\n        });\n\n        observer.observe(ref.current, { childList: true, subtree: true });\n\n        return () => {\n            observer.disconnect();\n        };\n    }, [ref]);\n```",
//         "commitId": "7feece05f9b7fc17d5e66a3b345e1391206e9255",
//         "codeSnippet": "@@ -68,6 +68,20 @@ export const RichTextEditor = ({\n         }\n     }, [value, scEditor])\n \n+    // following logic to make links work inside sc editor due to missing target attribute inside anchor tags!\n+    useEffect(() => {\n+        const iframes = document.querySelectorAll('iframe')\n+        if (iframes.length) {\n+            iframes.forEach((iframe) => {\n+                const editableElements =\n+                    iframe.contentDocument?.querySelectorAll('a[href]')\n+                editableElements?.forEach((el) => {\n+                    el.setAttribute('target', '_blank')\n+                })\n+            })\n+        }\n+    }, [value, scEditor])\n+",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/542#discussion_r2139168990",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/template-preview/Pages/MeetingNotesSection.tsx",
//         "line": null,
//         "comment": "why remove default value, if this is intentional, then should remove g('') also and keep simple ' ' maybe?? ",
//         "commitId": "7feece05f9b7fc17d5e66a3b345e1391206e9255",
//         "codeSnippet": "@@ -44,7 +44,7 @@ const MeetingNotesSection: FC<Props> = ({ showSignature }) => {\n                 label={g('meeting-notes')}\n                 multiline\n                 rows={4}\n-                defaultValue={g('summary-placeholder')}\n+                defaultValue={g(' ')}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/542#discussion_r2139169675",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/Components/RichTextEditor/RichTextEditor.tsx",
//         "line": 79,
//         "comment": "look into this",
//         "commitId": "7feece05f9b7fc17d5e66a3b345e1391206e9255",
//         "codeSnippet": "@@ -68,6 +68,20 @@ export const RichTextEditor = ({\n         }\n     }, [value, scEditor])\n \n+    // following logic to make links work inside sc editor due to missing target attribute inside anchor tags!\n+    useEffect(() => {\n+        const iframes = document.querySelectorAll('iframe')\n+        if (iframes.length) {\n+            iframes.forEach((iframe) => {\n+                const editableElements =\n+                    iframe.contentDocument?.querySelectorAll('a[href]')\n+                editableElements?.forEach((el) => {\n+                    el.setAttribute('target', '_blank')",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/542#discussion_r2139170284",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/Components/RichTextEditor/RichTextEditor.tsx",
//         "line": 84,
//         "comment": "this is related to performance , maybe look into this\r\n",
//         "commitId": "7feece05f9b7fc17d5e66a3b345e1391206e9255",
//         "codeSnippet": "@@ -68,6 +68,20 @@ export const RichTextEditor = ({\n         }\n     }, [value, scEditor])\n \n+    // following logic to make links work inside sc editor due to missing target attribute inside anchor tags!\n+    useEffect(() => {\n+        const iframes = document.querySelectorAll('iframe')\n+        if (iframes.length) {\n+            iframes.forEach((iframe) => {\n+                const editableElements =\n+                    iframe.contentDocument?.querySelectorAll('a[href]')\n+                editableElements?.forEach((el) => {\n+                    el.setAttribute('target', '_blank')\n+                })\n+            })\n+        }\n+    }, [value, scEditor])\n+",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/542#discussion_r2139171113",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-preview/Pages/MeetingNotesSection.tsx",
//         "line": null,
//         "comment": "it wont work in that way, need space",
//         "commitId": "7feece05f9b7fc17d5e66a3b345e1391206e9255",
//         "codeSnippet": "@@ -44,7 +44,7 @@ const MeetingNotesSection: FC<Props> = ({ showSignature }) => {\n                 label={g('meeting-notes')}\n                 multiline\n                 rows={4}\n-                defaultValue={g('summary-placeholder')}\n+                defaultValue={g(' ')}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/542#discussion_r2139172345",
//         "author": "deepakParmarOO7"
//     },
//     {
//         "file": "src/features/template-preview/Pages/MeetingNotesSection.tsx",
//         "line": null,
//         "comment": "why use translator g(' ') for empty space?",
//         "commitId": "7feece05f9b7fc17d5e66a3b345e1391206e9255",
//         "codeSnippet": "@@ -44,7 +44,7 @@ const MeetingNotesSection: FC<Props> = ({ showSignature }) => {\n                 label={g('meeting-notes')}\n                 multiline\n                 rows={4}\n-                defaultValue={g('summary-placeholder')}\n+                defaultValue={g(' ')}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/542#discussion_r2139192196",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-preview/TemplatePreviewDetails.tsx",
//         "line": 90,
//         "comment": "This unconditionally renders `sectionStep.name` in addition to the translated label above, resulting in duplicate text. Remove the redundant line or move it into the `false` branch of the conditional.\n```suggestion\n\n```",
//         "commitId": "d1c3e52d4d37699b7c664cf09d84db1f187ebfcb",
//         "codeSnippet": "@@ -79,6 +79,14 @@ const TemplatePreviewDetails: FC<Props> = ({ templateId }) => {\n                                         onClick={() => handleStepChange(index)}\n                                         sx={{ cursor: 'pointer' }}\n                                     >\n+                                        {sectionStep.sectionType ===\n+                                        SectionType.FINISH\n+                                            ? t('meeting-notes')\n+                                            : contentparser(\n+                                                  sectionStep.name,\n+                                                  languageId\n+                                              )}\n+\n                                         {sectionStep.name}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/552#discussion_r2152166564",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/PageBar/PlainPageBar.tsx",
//         "line": 8,
//         "comment": "The `SectionType` import is added but not used in this file. Remove it to keep imports clean or use it to conditionally render based on section type as in `PageBar.tsx`.\n```suggestion\nimport { SectionById } from '@/services/topics'\n```",
//         "commitId": "d1c3e52d4d37699b7c664cf09d84db1f187ebfcb",
//         "codeSnippet": "@@ -5,7 +5,7 @@ import { PlainPageBarWrapper } from '@/Components/MoveableLiItem/styled'\n import useGlobal from '@/Providers/GlobalProvider/useGlobal'\n import { getSection } from '@/services/section'\n import { contentparser, Page, PageType } from '@/services/template'\n-import { SectionById } from '@/services/topics'\n+import { SectionById, SectionType } from '@/services/topics'",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/552#discussion_r2152166580",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/PageBar/PlainPageBar.tsx",
//         "line": 87,
//         "comment": "This change replaces the dynamic `contentparser(name, languageId)` with a static label for all pages. Consider using a `SectionType` (or `PageType`) check to only apply the static translation for meeting notes and fall back to parsed names otherwise.\n```suggestion\n                            {type === PageType.MeetingNotes\n                                ? h('meeting-notes')\n                                : contentparser(name, languageId)}\n```",
//         "commitId": "d1c3e52d4d37699b7c664cf09d84db1f187ebfcb",
//         "codeSnippet": "@@ -83,7 +84,7 @@ const PlainPageBar: ForwardRefRenderFunction<HTMLLIElement, Props> = ({\n                 <Grid container item sm={6} alignItems='center'>\n                     <Grid item>\n                         <Typography variant='body1' fontWeight='600'>\n-                            {contentparser(name, languageId)}\n+                            {h('meeting-notes')}",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/552#discussion_r2152166585",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Provider/TemplateProvider.tsx",
//         "line": null,
//         "comment": "remove console",
//         "commitId": "55dd244c77d9b297706e60ba0efec7df9df326e0",
//         "codeSnippet": "@@ -66,8 +75,10 @@ const TemplateProvider: FCC = ({ children }) => {\n             getTemplateById(id).then(handleTexts(languageId))\n         ])\n             .then(([config, roles, template]) => {\n+                console.log(roles)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/554#discussion_r2153863718",
//         "author": "chauhan-honey"
//     },
//     {
//         "file": "src/features/template-details/TemplateSteps/Provider/TemplateProvider.tsx",
//         "line": null,
//         "comment": "Remove this debug `console.log(roles)` to prevent unnecessary console output in production.\n```suggestion\n\n```",
//         "commitId": "55dd244c77d9b297706e60ba0efec7df9df326e0",
//         "codeSnippet": "@@ -66,8 +75,10 @@ const TemplateProvider: FCC = ({ children }) => {\n             getTemplateById(id).then(handleTexts(languageId))\n         ])\n             .then(([config, roles, template]) => {\n+                console.log(roles)",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/554#discussion_r2153865589",
//         "author": "Copilot"
//     },
//     {
//         "file": "src/services/roles/service.ts",
//         "line": 19,
//         "comment": "[nitpick] Consider trimming each role in the resulting array after splitting to handle unexpected whitespace, e.g., using map(item => item.trim()).\n```suggestion\n        .then((data) => data.csrForOneToOne.split(',').map(item => item.trim()))\n```",
//         "commitId": "f410725064b393d7b83002232f7d4ac2e2d0e93a",
//         "codeSnippet": "@@ -14,7 +14,7 @@ export const getRoles = (): Promise<Role[]> => {\n \n export const getRolesConfig = (): Promise<string[]> => {\n     return axios\n-        .get<RoleConfig>('/mono/rest/config/?configHashKeys=csrForOneToOne')\n+        .get<RoleConfig>('/mono/rest/config?configHashKeys=csrForOneToOne')\n         .then(getData)\n         .then((data) => data.csrForOneToOne.split(','))",
//         "fileContent": "",
//         "prUrl": "https://github.com/CatalystOne/one-to-one-react/pull/557#discussion_r2163101085",
//         "author": "Copilot"
//     }
// ]